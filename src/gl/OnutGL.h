/*******************************************************************************
 * This file was generated by GLBrebis on Fri, 28 Jul 2017 13:26:03 GMT
 * https://github.com/mchiasson/GLBrebis
 *******************************************************************************
 * GLBrebis License (MIT)
 *******************************************************************************
 * Copyright (c) 2017 Mathieu-AndrÃ© Chiasson
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * 1. The above copyright notice and this permission notice shall be included in
 *    all copies or substantial portions of the Software.
 *
 * Disclaimer:
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 ******************************************************************************/

#ifndef _ONUT_GL_H_
#define _ONUT_GL_H_ 1

#include "KHR/khrplatform.h"

#if defined(__glu_h__)
#error "GL/glu.h cannot be included before OnutGL.h"
#endif

#if defined(__gl_h_)
#error "GL/gl.h cannot be included before OnutGL.h"
#endif

#if defined(__gl2_h_)
#error "GL/gl2.h cannot be included before OnutGL.h"
#endif

#if defined(__glcorearb_h_)
#error "GL/glcorearb.h cannot be included before OnutGL.h"
#endif

#if defined(__gl20_h_)
#error "GLES2/gl2.h cannot be included before OnutGL.h"
#endif

#if defined(__gl_es20_h_)
#error "OpenGLES/ES2/gl.h cannot be included before OnutGL.h"
#endif

#if defined(__gl30_h_)
#error "GLES3/gl3.h cannot be included before OnutGL.h"
#endif

#if defined(__gl_es30_h_)
#error "OpenGLES/ES3/gl.h cannot be included before OnutGL.h"
#endif

#if defined(__gl31_h_)
#error "GLES3/gl31.h cannot be included before OnutGL.h"
#endif

#if defined(__gl32_h_)
#error "GLES3/gl32.h cannot be included before OnutGL.h"
#endif

#if defined(__glext_h_)
#error "GL/glext.h cannot be included before OnutGL.h"
#endif

#if defined(__gl2ext_h_)
#error "GL/glext.h cannot be included before OnutGL.h"
#endif

#if defined(__gl_es20ext_h_)
#error "OpenGLES/ES2/glext.h cannot be included before OnutGL.h"
#endif

#if defined(__gl_es30ext_h_)
#error "OpenGLES/ES3/glext.h cannot be included before OnutGL.h"
#endif

#if defined(__gltypes_h_)
#error "gltypes.h cannot be included before OnutGL.h"
#endif

#define __glu_h__ 1
#define __gl_h_ 1
#define __gl2_h_ 1
#define __glcorearb_h_ 1
#define __gl20_h_ 1
#define __gl_es20_h_ 1
#define __gl30_h_ 1
#define __gl_es30_h_ 1
#define __gl31_h_ 1
#define __gl32_h_ 1
#define __glext_h_ 1
#define __gl2ext_h_ 1
#define __gl_es20ext_h_ 1
#define __gl_es30ext_h_ 1
#define __gltypes_h_ 1

#if !defined(ONUT_PROTO_IMPL)
    #define ONUT_PROTO_IMPL 1
#endif

#if !defined(ONUT_FORCE_INLINE)
    #if defined(_MSC_VER)
        #define ONUT_FORCE_INLINE __forceinline
    #elif ( (defined(__GNUC__) && (__GNUC__ >= 4) ) || defined(__clang__) )
        #define ONUT_FORCE_INLINE __attribute__((always_inline)) static __inline__
    #else
        #define ONUT_FORCE_INLINE static inline
    #endif
#endif

/* GL and GL ES Definitions */
#define GL_NEXT_BUFFER_NV -2
#define GL_SKIP_COMPONENTS4_NV -3
#define GL_SKIP_COMPONENTS3_NV -4
#define GL_SKIP_COMPONENTS2_NV -5
#define GL_SKIP_COMPONENTS1_NV -6
#define GL_FALSE 0
#define GL_LAYOUT_DEFAULT_INTEL 0
#define GL_NONE 0
#define GL_NONE_OES 0
#define GL_NO_ERROR 0
#define GL_ZERO 0
#define GL_KTX_FRONT_REGION 0x0
#define GL_CLOSE_PATH_NV 0x00
#define GL_POINTS 0x0000
#define GL_TERMINATE_SEQUENCE_COMMAND_NV 0x0000
#define GL_PERFQUERY_SINGLE_CONTEXT_INTEL 0x00000000
#define GL_2X_BIT_ATI 0x00000001
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#define GL_COLOR_BUFFER_BIT0_QCOM 0x00000001
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_CURRENT_BIT 0x00000001
#define GL_FOVEATION_ENABLE_BIT_QCOM 0x00000001
#define GL_PERFQUERY_GLOBAL_CONTEXT_INTEL 0x00000001
#define GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD 0x00000001
#define GL_RED_BIT_ATI 0x00000001
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_SYNC_FLUSH_COMMANDS_BIT_APPLE 0x00000001
#define GL_TEXTURE_DEFORMATION_BIT_SGIX 0x00000001
#define GL_TEXTURE_STORAGE_SPARSE_BIT_AMD 0x00000001
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT 0x00000001
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_VERTEX_SHADER_BIT_EXT 0x00000001
#define GL_4X_BIT_ATI 0x00000002
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#define GL_COLOR_BUFFER_BIT1_QCOM 0x00000002
#define GL_COMP_BIT_ATI 0x00000002
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#define GL_CONTEXT_FLAG_DEBUG_BIT_KHR 0x00000002
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT 0x00000002
#define GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM 0x00000002
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_FRAGMENT_SHADER_BIT_EXT 0x00000002
#define GL_GEOMETRY_DEFORMATION_BIT_SGIX 0x00000002
#define GL_GREEN_BIT_ATI 0x00000002
#define GL_POINT_BIT 0x00000002
#define GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD 0x00000002
#define GL_8X_BIT_ATI 0x00000004
#define GL_BLUE_BIT_ATI 0x00000004
#define GL_COLOR_BUFFER_BIT2_QCOM 0x00000004
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB 0x00000004
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_GEOMETRY_SHADER_BIT_EXT 0x00000004
#define GL_GEOMETRY_SHADER_BIT_OES 0x00000004
#define GL_LINE_BIT 0x00000004
#define GL_NEGATE_BIT_ATI 0x00000004
#define GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD 0x00000004
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#define GL_UNIFORM_BARRIER_BIT_EXT 0x00000004
#define GL_VERTEX23_BIT_PGI 0x00000004
#define GL_BIAS_BIT_ATI 0x00000008
#define GL_COLOR_BUFFER_BIT3_QCOM 0x00000008
#define GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR 0x00000008
#define GL_HALF_BIT_ATI 0x00000008
#define GL_POLYGON_BIT 0x00000008
#define GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD 0x00000008
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_CONTROL_SHADER_BIT_EXT 0x00000008
#define GL_TESS_CONTROL_SHADER_BIT_OES 0x00000008
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#define GL_TEXTURE_FETCH_BARRIER_BIT_EXT 0x00000008
#define GL_VERTEX4_BIT_PGI 0x00000008
#define GL_COLOR_BUFFER_BIT4_QCOM 0x00000010
#define GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT 0x00000010
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#define GL_QUARTER_BIT_ATI 0x00000010
#define GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV 0x00000010
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_TESS_EVALUATION_SHADER_BIT_EXT 0x00000010
#define GL_TESS_EVALUATION_SHADER_BIT_OES 0x00000010
#define GL_COLOR_BUFFER_BIT5_QCOM 0x00000020
#define GL_COMPUTE_SHADER_BIT 0x00000020
#define GL_EIGHTH_BIT_ATI 0x00000020
#define GL_PIXEL_MODE_BIT 0x00000020
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT 0x00000020
#define GL_COLOR_BUFFER_BIT6_QCOM 0x00000040
#define GL_COMMAND_BARRIER_BIT 0x00000040
#define GL_COMMAND_BARRIER_BIT_EXT 0x00000040
#define GL_LIGHTING_BIT 0x00000040
#define GL_SATURATE_BIT_ATI 0x00000040
#define GL_COLOR_BUFFER_BIT7_QCOM 0x00000080
#define GL_FOG_BIT 0x00000080
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#define GL_PIXEL_BUFFER_BARRIER_BIT_EXT 0x00000080
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_DEPTH_BUFFER_BIT0_QCOM 0x00000100
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT 0x00000100
#define GL_ACCUM_BUFFER_BIT 0x00000200
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#define GL_BUFFER_UPDATE_BARRIER_BIT_EXT 0x00000200
#define GL_DEPTH_BUFFER_BIT1_QCOM 0x00000200
#define GL_DEPTH_BUFFER_BIT2_QCOM 0x00000400
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#define GL_FRAMEBUFFER_BARRIER_BIT_EXT 0x00000400
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_DEPTH_BUFFER_BIT3_QCOM 0x00000800
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT 0x00000800
#define GL_VIEWPORT_BIT 0x00000800
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT 0x00001000
#define GL_DEPTH_BUFFER_BIT4_QCOM 0x00001000
#define GL_TRANSFORM_BIT 0x00001000
#define GL_DEPTH_BUFFER_BIT5_QCOM 0x00002000
#define GL_ENABLE_BIT 0x00002000
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT 0x00004000
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_DEPTH_BUFFER_BIT6_QCOM 0x00004000
#define GL_COVERAGE_BUFFER_BIT_NV 0x00008000
#define GL_DEPTH_BUFFER_BIT7_QCOM 0x00008000
#define GL_HINT_BIT 0x00008000
#define GL_QUERY_BUFFER_BARRIER_BIT 0x00008000
#define GL_LINES 0x0001
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_READ_BIT_EXT 0x0001
#define GL_NOP_COMMAND_NV 0x0001
#define GL_RESTART_SUN 0x0001
#define GL_TRACE_OPERATIONS_BIT_MESA 0x0001
#define GL_COLOR3_BIT_PGI 0x00010000
#define GL_EVAL_BIT 0x00010000
#define GL_FONT_X_MIN_BOUNDS_BIT_NV 0x00010000
#define GL_STENCIL_BUFFER_BIT0_QCOM 0x00010000
#define GL_DRAW_ELEMENTS_COMMAND_NV 0x0002
#define GL_LINE_LOOP 0x0002
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MAP_WRITE_BIT_EXT 0x0002
#define GL_REPLACE_MIDDLE_SUN 0x0002
#define GL_TRACE_PRIMITIVES_BIT_MESA 0x0002
#define GL_COLOR4_BIT_PGI 0x00020000
#define GL_FONT_Y_MIN_BOUNDS_BIT_NV 0x00020000
#define GL_LIST_BIT 0x00020000
#define GL_STENCIL_BUFFER_BIT1_QCOM 0x00020000
#define GL_DRAW_ARRAYS_COMMAND_NV 0x0003
#define GL_LINE_STRIP 0x0003
#define GL_REPLACE_OLDEST_SUN 0x0003
#define GL_DRAW_ELEMENTS_STRIP_COMMAND_NV 0x0004
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_INVALIDATE_RANGE_BIT_EXT 0x0004
#define GL_TRACE_ARRAYS_BIT_MESA 0x0004
#define GL_TRIANGLES 0x0004
#define GL_EDGEFLAG_BIT_PGI 0x00040000
#define GL_FONT_X_MAX_BOUNDS_BIT_NV 0x00040000
#define GL_STENCIL_BUFFER_BIT2_QCOM 0x00040000
#define GL_TEXTURE_BIT 0x00040000
#define GL_DRAW_ARRAYS_STRIP_COMMAND_NV 0x0005
#define GL_TRIANGLE_STRIP 0x0005
#define GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV 0x0006
#define GL_TRIANGLE_FAN 0x0006
#define GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV 0x0007
#define GL_QUADS 0x0007
#define GL_QUADS_EXT 0x0007
#define GL_QUADS_OES 0x0007
#define GL_ELEMENT_ADDRESS_COMMAND_NV 0x0008
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_INVALIDATE_BUFFER_BIT_EXT 0x0008
#define GL_QUAD_STRIP 0x0008
#define GL_TRACE_TEXTURES_BIT_MESA 0x0008
#define GL_FONT_Y_MAX_BOUNDS_BIT_NV 0x00080000
#define GL_INDEX_BIT_PGI 0x00080000
#define GL_SCISSOR_BIT 0x00080000
#define GL_STENCIL_BUFFER_BIT3_QCOM 0x00080000
#define GL_ATTRIBUTE_ADDRESS_COMMAND_NV 0x0009
#define GL_POLYGON 0x0009
#define GL_LINES_ADJACENCY 0x000A
#define GL_LINES_ADJACENCY_ARB 0x000A
#define GL_LINES_ADJACENCY_EXT 0x000A
#define GL_LINES_ADJACENCY_OES 0x000A
#define GL_UNIFORM_ADDRESS_COMMAND_NV 0x000A
#define GL_BLEND_COLOR_COMMAND_NV 0x000B
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_LINE_STRIP_ADJACENCY_ARB 0x000B
#define GL_LINE_STRIP_ADJACENCY_EXT 0x000B
#define GL_LINE_STRIP_ADJACENCY_OES 0x000B
#define GL_STENCIL_REF_COMMAND_NV 0x000C
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRIANGLES_ADJACENCY_ARB 0x000C
#define GL_TRIANGLES_ADJACENCY_EXT 0x000C
#define GL_TRIANGLES_ADJACENCY_OES 0x000C
#define GL_LINE_WIDTH_COMMAND_NV 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_ARB 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_EXT 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_OES 0x000D
#define GL_PATCHES 0x000E
#define GL_PATCHES_EXT 0x000E
#define GL_PATCHES_OES 0x000E
#define GL_POLYGON_OFFSET_COMMAND_NV 0x000E
#define GL_ALPHA_REF_COMMAND_NV 0x000F
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_FLUSH_EXPLICIT_BIT_EXT 0x0010
#define GL_TRACE_PIXELS_BIT_MESA 0x0010
#define GL_VIEWPORT_COMMAND_NV 0x0010
#define GL_FONT_UNITS_PER_EM_BIT_NV 0x00100000
#define GL_MAT_AMBIENT_BIT_PGI 0x00100000
#define GL_STENCIL_BUFFER_BIT4_QCOM 0x00100000
#define GL_SCISSOR_COMMAND_NV 0x0011
#define GL_FRONT_FACE_COMMAND_NV 0x0012
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_MAP_UNSYNCHRONIZED_BIT_EXT 0x0020
#define GL_TRACE_ERRORS_BIT_MESA 0x0020
#define GL_FONT_ASCENDER_BIT_NV 0x00200000
#define GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI 0x00200000
#define GL_STENCIL_BUFFER_BIT5_QCOM 0x00200000
#define GL_MAP_PERSISTENT_BIT 0x0040
#define GL_MAP_PERSISTENT_BIT_EXT 0x0040
#define GL_FONT_DESCENDER_BIT_NV 0x00400000
#define GL_MAT_DIFFUSE_BIT_PGI 0x00400000
#define GL_STENCIL_BUFFER_BIT6_QCOM 0x00400000
#define GL_MAP_COHERENT_BIT 0x0080
#define GL_MAP_COHERENT_BIT_EXT 0x0080
#define GL_FONT_HEIGHT_BIT_NV 0x00800000
#define GL_MAT_EMISSION_BIT_PGI 0x00800000
#define GL_STENCIL_BUFFER_BIT7_QCOM 0x00800000
#define GL_BOLD_BIT_NV 0x01
#define GL_GLYPH_WIDTH_BIT_NV 0x01
#define GL_ACCUM 0x0100
#define GL_DYNAMIC_STORAGE_BIT 0x0100
#define GL_DYNAMIC_STORAGE_BIT_EXT 0x0100
#define GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV 0x01000000
#define GL_MAT_COLOR_INDEXES_BIT_PGI 0x01000000
#define GL_MULTISAMPLE_BUFFER_BIT0_QCOM 0x01000000
#define GL_LOAD 0x0101
#define GL_RETURN 0x0102
#define GL_MULT 0x0103
#define GL_ADD 0x0104
#define GL_GLYPH_HEIGHT_BIT_NV 0x02
#define GL_ITALIC_BIT_NV 0x02
#define GL_MOVE_TO_NV 0x02
#define GL_CLIENT_STORAGE_BIT 0x0200
#define GL_CLIENT_STORAGE_BIT_EXT 0x0200
#define GL_NEVER 0x0200
#define GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV 0x02000000
#define GL_MAT_SHININESS_BIT_PGI 0x02000000
#define GL_MULTISAMPLE_BUFFER_BIT1_QCOM 0x02000000
#define GL_LESS 0x0201
#define GL_EQUAL 0x0202
#define GL_LEQUAL 0x0203
#define GL_GREATER 0x0204
#define GL_NOTEQUAL 0x0205
#define GL_GEQUAL 0x0206
#define GL_ALWAYS 0x0207
#define GL_RELATIVE_MOVE_TO_NV 0x03
#define GL_SRC_COLOR 0x0300
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_SRC_ALPHA 0x0302
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_DST_ALPHA 0x0304
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_DST_COLOR 0x0306
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_SRC_ALPHA_SATURATE_EXT 0x0308
#define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#define GL_LINE_TO_NV 0x04
#define GL_FRONT_LEFT 0x0400
#define GL_SPARSE_STORAGE_BIT_ARB 0x0400
#define GL_FONT_UNDERLINE_POSITION_BIT_NV 0x04000000
#define GL_MAT_SPECULAR_BIT_PGI 0x04000000
#define GL_MULTISAMPLE_BUFFER_BIT2_QCOM 0x04000000
#define GL_FRONT_RIGHT 0x0401
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_FRONT 0x0404
#define GL_BACK 0x0405
#define GL_LEFT 0x0406
#define GL_RIGHT 0x0407
#define GL_FRONT_AND_BACK 0x0408
#define GL_AUX0 0x0409
#define GL_AUX1 0x040A
#define GL_AUX2 0x040B
#define GL_AUX3 0x040C
#define GL_RELATIVE_LINE_TO_NV 0x05
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_VALUE 0x0501
#define GL_INVALID_OPERATION 0x0502
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_OVERFLOW_KHR 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STACK_UNDERFLOW_KHR 0x0504
#define GL_OUT_OF_MEMORY 0x0505
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506
#define GL_INVALID_FRAMEBUFFER_OPERATION_OES 0x0506
#define GL_CONTEXT_LOST 0x0507
#define GL_CONTEXT_LOST_KHR 0x0507
#define GL_HORIZONTAL_LINE_TO_NV 0x06
#define GL_2D 0x0600
#define GL_3D 0x0601
#define GL_3D_COLOR 0x0602
#define GL_3D_COLOR_TEXTURE 0x0603
#define GL_4D_COLOR_TEXTURE 0x0604
#define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#define GL_PASS_THROUGH_TOKEN 0x0700
#define GL_POINT_TOKEN 0x0701
#define GL_LINE_TOKEN 0x0702
#define GL_POLYGON_TOKEN 0x0703
#define GL_BITMAP_TOKEN 0x0704
#define GL_DRAW_PIXEL_TOKEN 0x0705
#define GL_COPY_PIXEL_TOKEN 0x0706
#define GL_LINE_RESET_TOKEN 0x0707
#define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#define GL_VERTICAL_LINE_TO_NV 0x08
#define GL_EXP 0x0800
#define GL_LGPU_SEPARATE_STORAGE_BIT_NVX 0x0800
#define GL_PER_GPU_STORAGE_BIT_NV 0x0800
#define GL_FONT_UNDERLINE_THICKNESS_BIT_NV 0x08000000
#define GL_MULTISAMPLE_BUFFER_BIT3_QCOM 0x08000000
#define GL_NORMAL_BIT_PGI 0x08000000
#define GL_EXP2 0x0801
#define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#define GL_CW 0x0900
#define GL_CCW 0x0901
#define GL_QUADRATIC_CURVE_TO_NV 0x0A
#define GL_COEFF 0x0A00
#define GL_ORDER 0x0A01
#define GL_DOMAIN 0x0A02
#define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#define GL_CURRENT_COLOR 0x0B00
#define GL_CURRENT_INDEX 0x0B01
#define GL_CURRENT_NORMAL 0x0B02
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#define GL_CURRENT_RASTER_COLOR 0x0B04
#define GL_CURRENT_RASTER_INDEX 0x0B05
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#define GL_CURRENT_RASTER_POSITION 0x0B07
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#define GL_POINT_SMOOTH 0x0B10
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_LINE_STIPPLE 0x0B24
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#define GL_LIST_MODE 0x0B30
#define GL_MAX_LIST_NESTING 0x0B31
#define GL_LIST_BASE 0x0B32
#define GL_LIST_INDEX 0x0B33
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_MODE_NV 0x0B40
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_POLYGON_STIPPLE 0x0B42
#define GL_EDGE_FLAG 0x0B43
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_FRONT_FACE 0x0B46
#define GL_LIGHTING 0x0B50
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#define GL_SHADE_MODEL 0x0B54
#define GL_COLOR_MATERIAL_FACE 0x0B55
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#define GL_COLOR_MATERIAL 0x0B57
#define GL_FOG 0x0B60
#define GL_FOG_INDEX 0x0B61
#define GL_FOG_DENSITY 0x0B62
#define GL_FOG_START 0x0B63
#define GL_FOG_END 0x0B64
#define GL_FOG_MODE 0x0B65
#define GL_FOG_COLOR 0x0B66
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_FUNC 0x0B74
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_MATRIX_MODE 0x0BA0
#define GL_NORMALIZE 0x0BA1
#define GL_VIEWPORT 0x0BA2
#define GL_MODELVIEW0_STACK_DEPTH_EXT 0x0BA3
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#define GL_PATH_MODELVIEW_STACK_DEPTH_NV 0x0BA3
#define GL_PATH_PROJECTION_STACK_DEPTH_NV 0x0BA4
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#define GL_MODELVIEW0_MATRIX_EXT 0x0BA6
#define GL_MODELVIEW_MATRIX 0x0BA6
#define GL_PATH_MODELVIEW_MATRIX_NV 0x0BA6
#define GL_PATH_PROJECTION_MATRIX_NV 0x0BA7
#define GL_PROJECTION_MATRIX 0x0BA7
#define GL_TEXTURE_MATRIX 0x0BA8
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#define GL_ALPHA_TEST 0x0BC0
#define GL_ALPHA_TEST_QCOM 0x0BC0
#define GL_ALPHA_TEST_FUNC 0x0BC1
#define GL_ALPHA_TEST_FUNC_QCOM 0x0BC1
#define GL_ALPHA_TEST_REF 0x0BC2
#define GL_ALPHA_TEST_REF_QCOM 0x0BC2
#define GL_DITHER 0x0BD0
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND 0x0BE2
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_INDEX_LOGIC_OP 0x0BF1
#define GL_LOGIC_OP 0x0BF1
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_CUBIC_CURVE_TO_NV 0x0C
#define GL_AUX_BUFFERS 0x0C00
#define GL_DRAW_BUFFER 0x0C01
#define GL_DRAW_BUFFER_EXT 0x0C01
#define GL_READ_BUFFER 0x0C02
#define GL_READ_BUFFER_EXT 0x0C02
#define GL_READ_BUFFER_NV 0x0C02
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_INDEX_CLEAR_VALUE 0x0C20
#define GL_INDEX_WRITEMASK 0x0C21
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_INDEX_MODE 0x0C30
#define GL_RGBA_MODE 0x0C31
#define GL_DOUBLEBUFFER 0x0C32
#define GL_STEREO 0x0C33
#define GL_RENDER_MODE 0x0C40
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#define GL_POINT_SMOOTH_HINT 0x0C51
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_FOG_HINT 0x0C54
#define GL_TEXTURE_GEN_S 0x0C60
#define GL_TEXTURE_GEN_T 0x0C61
#define GL_TEXTURE_GEN_R 0x0C62
#define GL_TEXTURE_GEN_Q 0x0C63
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_ROW_LENGTH_EXT 0x0CF2
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SKIP_ROWS_EXT 0x0CF3
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_SKIP_PIXELS_EXT 0x0CF4
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_MAP_COLOR 0x0D10
#define GL_MAP_STENCIL 0x0D11
#define GL_INDEX_SHIFT 0x0D12
#define GL_INDEX_OFFSET 0x0D13
#define GL_RED_SCALE 0x0D14
#define GL_RED_BIAS 0x0D15
#define GL_ZOOM_X 0x0D16
#define GL_ZOOM_Y 0x0D17
#define GL_GREEN_SCALE 0x0D18
#define GL_GREEN_BIAS 0x0D19
#define GL_BLUE_SCALE 0x0D1A
#define GL_BLUE_BIAS 0x0D1B
#define GL_ALPHA_SCALE 0x0D1C
#define GL_ALPHA_BIAS 0x0D1D
#define GL_DEPTH_SCALE 0x0D1E
#define GL_DEPTH_BIAS 0x0D1F
#define GL_MAX_EVAL_ORDER 0x0D30
#define GL_MAX_LIGHTS 0x0D31
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAX_CLIP_DISTANCES_APPLE 0x0D32
#define GL_MAX_CLIP_DISTANCES_EXT 0x0D32
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_MAX_CLIP_PLANES_IMG 0x0D32
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#define GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV 0x0D36
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#define GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV 0x0D38
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_INDEX_BITS 0x0D51
#define GL_RED_BITS 0x0D52
#define GL_GREEN_BITS 0x0D53
#define GL_BLUE_BITS 0x0D54
#define GL_ALPHA_BITS 0x0D55
#define GL_DEPTH_BITS 0x0D56
#define GL_STENCIL_BITS 0x0D57
#define GL_ACCUM_RED_BITS 0x0D58
#define GL_ACCUM_GREEN_BITS 0x0D59
#define GL_ACCUM_BLUE_BITS 0x0D5A
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#define GL_NAME_STACK_DEPTH 0x0D70
#define GL_AUTO_NORMAL 0x0D80
#define GL_MAP1_COLOR_4 0x0D90
#define GL_MAP1_INDEX 0x0D91
#define GL_MAP1_NORMAL 0x0D92
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#define GL_MAP1_VERTEX_3 0x0D97
#define GL_MAP1_VERTEX_4 0x0D98
#define GL_MAP2_COLOR_4 0x0DB0
#define GL_MAP2_INDEX 0x0DB1
#define GL_MAP2_NORMAL 0x0DB2
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#define GL_MAP2_VERTEX_3 0x0DB7
#define GL_MAP2_VERTEX_4 0x0DB8
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_2D 0x0DE1
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#define GL_KTX_BACK_REGION 0x1
#define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#define GL_GLYPH_HAS_KERNING_BIT_NV 0x100
#define GL_TEXTURE_WIDTH 0x1000
#define GL_FONT_HAS_KERNING_BIT_NV 0x10000000
#define GL_MULTISAMPLE_BUFFER_BIT4_QCOM 0x10000000
#define GL_TEXCOORD1_BIT_PGI 0x10000000
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_COMPONENTS 0x1003
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_TEXTURE_BORDER_COLOR_EXT 0x1004
#define GL_TEXTURE_BORDER_COLOR_NV 0x1004
#define GL_TEXTURE_BORDER_COLOR_OES 0x1004
#define GL_TEXTURE_BORDER 0x1005
#define GL_TEXTURE_TARGET 0x1006
#define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#define GL_DONT_CARE 0x1100
#define GL_FASTEST 0x1101
#define GL_NICEST 0x1102
#define GL_SMALL_CCW_ARC_TO_NV 0x12
#define GL_AMBIENT 0x1200
#define GL_DIFFUSE 0x1201
#define GL_SPECULAR 0x1202
#define GL_POSITION 0x1203
#define GL_SPOT_DIRECTION 0x1204
#define GL_SPOT_EXPONENT 0x1205
#define GL_SPOT_CUTOFF 0x1206
#define GL_CONSTANT_ATTENUATION 0x1207
#define GL_LINEAR_ATTENUATION 0x1208
#define GL_QUADRATIC_ATTENUATION 0x1209
#define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#define GL_COMPILE 0x1300
#define GL_COMPILE_AND_EXECUTE 0x1301
#define GL_SMALL_CW_ARC_TO_NV 0x14
#define GL_BYTE 0x1400
#define GL_UNSIGNED_BYTE 0x1401
#define GL_SHORT 0x1402
#define GL_UNSIGNED_SHORT 0x1403
#define GL_INT 0x1404
#define GL_UNSIGNED_INT 0x1405
#define GL_FLOAT 0x1406
#define GL_2_BYTES 0x1407
#define GL_2_BYTES_NV 0x1407
#define GL_3_BYTES 0x1408
#define GL_3_BYTES_NV 0x1408
#define GL_4_BYTES 0x1409
#define GL_4_BYTES_NV 0x1409
#define GL_DOUBLE 0x140A
#define GL_DOUBLE_EXT 0x140A
#define GL_HALF_APPLE 0x140B
#define GL_HALF_FLOAT 0x140B
#define GL_HALF_FLOAT_ARB 0x140B
#define GL_HALF_FLOAT_NV 0x140B
#define GL_FIXED 0x140C
#define GL_FIXED_OES 0x140C
#define GL_INT64_ARB 0x140E
#define GL_INT64_NV 0x140E
#define GL_UNSIGNED_INT64_ARB 0x140F
#define GL_UNSIGNED_INT64_NV 0x140F
#define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#define GL_CLEAR 0x1500
#define GL_AND 0x1501
#define GL_AND_REVERSE 0x1502
#define GL_COPY 0x1503
#define GL_AND_INVERTED 0x1504
#define GL_NOOP 0x1505
#define GL_XOR 0x1506
#define GL_XOR_NV 0x1506
#define GL_OR 0x1507
#define GL_NOR 0x1508
#define GL_EQUIV 0x1509
#define GL_INVERT 0x150A
#define GL_OR_REVERSE 0x150B
#define GL_COPY_INVERTED 0x150C
#define GL_OR_INVERTED 0x150D
#define GL_NAND 0x150E
#define GL_SET 0x150F
#define GL_LARGE_CCW_ARC_TO_NV 0x16
#define GL_EMISSION 0x1600
#define GL_SHININESS 0x1601
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#define GL_COLOR_INDEXES 0x1603
#define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#define GL_MODELVIEW 0x1700
#define GL_MODELVIEW0_ARB 0x1700
#define GL_MODELVIEW0_EXT 0x1700
#define GL_PATH_MODELVIEW_NV 0x1700
#define GL_PATH_PROJECTION_NV 0x1701
#define GL_PROJECTION 0x1701
#define GL_TEXTURE 0x1702
#define GL_LARGE_CW_ARC_TO_NV 0x18
#define GL_COLOR 0x1800
#define GL_COLOR_EXT 0x1800
#define GL_DEPTH 0x1801
#define GL_DEPTH_EXT 0x1801
#define GL_STENCIL 0x1802
#define GL_STENCIL_EXT 0x1802
#define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#define GL_COLOR_INDEX 0x1900
#define GL_STENCIL_INDEX 0x1901
#define GL_STENCIL_INDEX_OES 0x1901
#define GL_DEPTH_COMPONENT 0x1902
#define GL_RED 0x1903
#define GL_RED_EXT 0x1903
#define GL_RED_NV 0x1903
#define GL_GREEN 0x1904
#define GL_GREEN_NV 0x1904
#define GL_BLUE 0x1905
#define GL_BLUE_NV 0x1905
#define GL_ALPHA 0x1906
#define GL_RGB 0x1907
#define GL_RGBA 0x1908
#define GL_LUMINANCE 0x1909
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_RASTER_POSITION_UNCLIPPED_IBM 0x19262
#define GL_CONIC_CURVE_TO_NV 0x1A
#define GL_BITMAP 0x1A00
#define GL_PREFER_DOUBLEBUFFER_HINT_PGI 0x1A1F8
#define GL_CONSERVE_MEMORY_HINT_PGI 0x1A1FD
#define GL_RECLAIM_MEMORY_HINT_PGI 0x1A1FE
#define GL_NATIVE_GRAPHICS_HANDLE_PGI 0x1A202
#define GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI 0x1A203
#define GL_NATIVE_GRAPHICS_END_HINT_PGI 0x1A204
#define GL_ALWAYS_FAST_HINT_PGI 0x1A20C
#define GL_ALWAYS_SOFT_HINT_PGI 0x1A20D
#define GL_ALLOW_DRAW_OBJ_HINT_PGI 0x1A20E
#define GL_ALLOW_DRAW_WIN_HINT_PGI 0x1A20F
#define GL_ALLOW_DRAW_FRG_HINT_PGI 0x1A210
#define GL_ALLOW_DRAW_MEM_HINT_PGI 0x1A211
#define GL_STRICT_DEPTHFUNC_HINT_PGI 0x1A216
#define GL_STRICT_LIGHTING_HINT_PGI 0x1A217
#define GL_STRICT_SCISSOR_HINT_PGI 0x1A218
#define GL_FULL_STIPPLE_HINT_PGI 0x1A219
#define GL_CLIP_NEAR_HINT_PGI 0x1A220
#define GL_CLIP_FAR_HINT_PGI 0x1A221
#define GL_WIDE_LINE_HINT_PGI 0x1A222
#define GL_BACK_NORMALS_HINT_PGI 0x1A223
#define GL_VERTEX_DATA_HINT_PGI 0x1A22A
#define GL_VERTEX_CONSISTENT_HINT_PGI 0x1A22B
#define GL_MATERIAL_SIDE_HINT_PGI 0x1A22C
#define GL_MAX_VERTEX_HINT_PGI 0x1A22D
#define GL_RELATIVE_CONIC_CURVE_TO_NV 0x1B
#define GL_POINT 0x1B00
#define GL_POINT_NV 0x1B00
#define GL_LINE 0x1B01
#define GL_LINE_NV 0x1B01
#define GL_FILL 0x1B02
#define GL_FILL_NV 0x1B02
#define GL_RENDER 0x1C00
#define GL_FEEDBACK 0x1C01
#define GL_SELECT 0x1C02
#define GL_FLAT 0x1D00
#define GL_SMOOTH 0x1D01
#define GL_KEEP 0x1E00
#define GL_REPLACE 0x1E01
#define GL_INCR 0x1E02
#define GL_DECR 0x1E03
#define GL_VENDOR 0x1F00
#define GL_RENDERER 0x1F01
#define GL_VERSION 0x1F02
#define GL_EXTENSIONS 0x1F03
#define GL_KTX_Z_REGION 0x2
#define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#define GL_S 0x2000
#define GL_FONT_NUM_GLYPH_INDICES_BIT_NV 0x20000000
#define GL_MULTISAMPLE_BIT 0x20000000
#define GL_MULTISAMPLE_BIT_3DFX 0x20000000
#define GL_MULTISAMPLE_BIT_ARB 0x20000000
#define GL_MULTISAMPLE_BIT_EXT 0x20000000
#define GL_MULTISAMPLE_BUFFER_BIT5_QCOM 0x20000000
#define GL_TEXCOORD2_BIT_PGI 0x20000000
#define GL_T 0x2001
#define GL_R 0x2002
#define GL_Q 0x2003
#define GL_MODULATE 0x2100
#define GL_DECAL 0x2101
#define GL_TEXTURE_ENV_MODE 0x2200
#define GL_TEXTURE_ENV_COLOR 0x2201
#define GL_TEXTURE_ENV 0x2300
#define GL_EYE_LINEAR 0x2400
#define GL_EYE_LINEAR_NV 0x2400
#define GL_OBJECT_LINEAR 0x2401
#define GL_OBJECT_LINEAR_NV 0x2401
#define GL_SPHERE_MAP 0x2402
#define GL_TEXTURE_GEN_MODE 0x2500
#define GL_TEXTURE_GEN_MODE_OES 0x2500
#define GL_OBJECT_PLANE 0x2501
#define GL_EYE_PLANE 0x2502
#define GL_NEAREST 0x2600
#define GL_LINEAR 0x2601
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_CLAMP 0x2900
#define GL_REPEAT 0x2901
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_POINT_NV 0x2A01
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_LINE_NV 0x2A02
#define GL_R3_G3_B2 0x2A10
#define GL_V2F 0x2A20
#define GL_V3F 0x2A21
#define GL_C4UB_V2F 0x2A22
#define GL_C4UB_V3F 0x2A23
#define GL_C3F_V3F 0x2A24
#define GL_N3F_V3F 0x2A25
#define GL_C4F_N3F_V3F 0x2A26
#define GL_T2F_V3F 0x2A27
#define GL_T4F_V4F 0x2A28
#define GL_T2F_C4UB_V3F 0x2A29
#define GL_T2F_C3F_V3F 0x2A2A
#define GL_T2F_N3F_V3F 0x2A2B
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#define GL_KTX_STENCIL_REGION 0x3
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE0_APPLE 0x3000
#define GL_CLIP_DISTANCE0_EXT 0x3000
#define GL_CLIP_PLANE0 0x3000
#define GL_CLIP_PLANE0_IMG 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE1_APPLE 0x3001
#define GL_CLIP_DISTANCE1_EXT 0x3001
#define GL_CLIP_PLANE1 0x3001
#define GL_CLIP_PLANE1_IMG 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE2_APPLE 0x3002
#define GL_CLIP_DISTANCE2_EXT 0x3002
#define GL_CLIP_PLANE2 0x3002
#define GL_CLIP_PLANE2_IMG 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE3_APPLE 0x3003
#define GL_CLIP_DISTANCE3_EXT 0x3003
#define GL_CLIP_PLANE3 0x3003
#define GL_CLIP_PLANE3_IMG 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE4_APPLE 0x3004
#define GL_CLIP_DISTANCE4_EXT 0x3004
#define GL_CLIP_PLANE4 0x3004
#define GL_CLIP_PLANE4_IMG 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE5_APPLE 0x3005
#define GL_CLIP_DISTANCE5_EXT 0x3005
#define GL_CLIP_PLANE5 0x3005
#define GL_CLIP_PLANE5_IMG 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE6_APPLE 0x3006
#define GL_CLIP_DISTANCE6_EXT 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_CLIP_DISTANCE7_APPLE 0x3007
#define GL_CLIP_DISTANCE7_EXT 0x3007
#define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#define GL_LIGHT0 0x4000
#define GL_MULTISAMPLE_BUFFER_BIT6_QCOM 0x40000000
#define GL_TEXCOORD3_BIT_PGI 0x40000000
#define GL_LIGHT1 0x4001
#define GL_LIGHT2 0x4002
#define GL_LIGHT3 0x4003
#define GL_LIGHT4 0x4004
#define GL_LIGHT5 0x4005
#define GL_LIGHT6 0x4006
#define GL_LIGHT7 0x4007
#define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#define GL_ABGR_EXT 0x8000
#define GL_MULTISAMPLE_BUFFER_BIT7_QCOM 0x80000000
#define GL_TEXCOORD4_BIT_PGI 0x80000000
#define GL_CONSTANT_COLOR 0x8001
#define GL_CONSTANT_COLOR_EXT 0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_ONE_MINUS_CONSTANT_COLOR_EXT 0x8002
#define GL_CONSTANT_ALPHA 0x8003
#define GL_CONSTANT_ALPHA_EXT 0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_ONE_MINUS_CONSTANT_ALPHA_EXT 0x8004
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_COLOR_EXT 0x8005
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_ADD_EXT 0x8006
#define GL_FUNC_ADD_OES 0x8006
#define GL_MIN 0x8007
#define GL_MIN_EXT 0x8007
#define GL_MAX 0x8008
#define GL_MAX_EXT 0x8008
#define GL_BLEND_EQUATION 0x8009
#define GL_BLEND_EQUATION_EXT 0x8009
#define GL_BLEND_EQUATION_OES 0x8009
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_BLEND_EQUATION_RGB_EXT 0x8009
#define GL_BLEND_EQUATION_RGB_OES 0x8009
#define GL_FUNC_SUBTRACT 0x800A
#define GL_FUNC_SUBTRACT_EXT 0x800A
#define GL_FUNC_SUBTRACT_OES 0x800A
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_REVERSE_SUBTRACT_EXT 0x800B
#define GL_FUNC_REVERSE_SUBTRACT_OES 0x800B
#define GL_CMYK_EXT 0x800C
#define GL_CMYKA_EXT 0x800D
#define GL_PACK_CMYK_HINT_EXT 0x800E
#define GL_UNPACK_CMYK_HINT_EXT 0x800F
#define GL_CONVOLUTION_1D 0x8010
#define GL_CONVOLUTION_1D_EXT 0x8010
#define GL_CONVOLUTION_2D 0x8011
#define GL_CONVOLUTION_2D_EXT 0x8011
#define GL_SEPARABLE_2D 0x8012
#define GL_SEPARABLE_2D_EXT 0x8012
#define GL_CONVOLUTION_BORDER_MODE 0x8013
#define GL_CONVOLUTION_BORDER_MODE_EXT 0x8013
#define GL_CONVOLUTION_FILTER_SCALE 0x8014
#define GL_CONVOLUTION_FILTER_SCALE_EXT 0x8014
#define GL_CONVOLUTION_FILTER_BIAS 0x8015
#define GL_CONVOLUTION_FILTER_BIAS_EXT 0x8015
#define GL_REDUCE 0x8016
#define GL_REDUCE_EXT 0x8016
#define GL_CONVOLUTION_FORMAT 0x8017
#define GL_CONVOLUTION_FORMAT_EXT 0x8017
#define GL_CONVOLUTION_WIDTH 0x8018
#define GL_CONVOLUTION_WIDTH_EXT 0x8018
#define GL_CONVOLUTION_HEIGHT 0x8019
#define GL_CONVOLUTION_HEIGHT_EXT 0x8019
#define GL_MAX_CONVOLUTION_WIDTH 0x801A
#define GL_MAX_CONVOLUTION_WIDTH_EXT 0x801A
#define GL_MAX_CONVOLUTION_HEIGHT 0x801B
#define GL_MAX_CONVOLUTION_HEIGHT_EXT 0x801B
#define GL_POST_CONVOLUTION_RED_SCALE 0x801C
#define GL_POST_CONVOLUTION_RED_SCALE_EXT 0x801C
#define GL_POST_CONVOLUTION_GREEN_SCALE 0x801D
#define GL_POST_CONVOLUTION_GREEN_SCALE_EXT 0x801D
#define GL_POST_CONVOLUTION_BLUE_SCALE 0x801E
#define GL_POST_CONVOLUTION_BLUE_SCALE_EXT 0x801E
#define GL_POST_CONVOLUTION_ALPHA_SCALE 0x801F
#define GL_POST_CONVOLUTION_ALPHA_SCALE_EXT 0x801F
#define GL_POST_CONVOLUTION_RED_BIAS 0x8020
#define GL_POST_CONVOLUTION_RED_BIAS_EXT 0x8020
#define GL_POST_CONVOLUTION_GREEN_BIAS 0x8021
#define GL_POST_CONVOLUTION_GREEN_BIAS_EXT 0x8021
#define GL_POST_CONVOLUTION_BLUE_BIAS 0x8022
#define GL_POST_CONVOLUTION_BLUE_BIAS_EXT 0x8022
#define GL_POST_CONVOLUTION_ALPHA_BIAS 0x8023
#define GL_POST_CONVOLUTION_ALPHA_BIAS_EXT 0x8023
#define GL_HISTOGRAM 0x8024
#define GL_HISTOGRAM_EXT 0x8024
#define GL_PROXY_HISTOGRAM 0x8025
#define GL_PROXY_HISTOGRAM_EXT 0x8025
#define GL_HISTOGRAM_WIDTH 0x8026
#define GL_HISTOGRAM_WIDTH_EXT 0x8026
#define GL_HISTOGRAM_FORMAT 0x8027
#define GL_HISTOGRAM_FORMAT_EXT 0x8027
#define GL_HISTOGRAM_RED_SIZE 0x8028
#define GL_HISTOGRAM_RED_SIZE_EXT 0x8028
#define GL_HISTOGRAM_GREEN_SIZE 0x8029
#define GL_HISTOGRAM_GREEN_SIZE_EXT 0x8029
#define GL_HISTOGRAM_BLUE_SIZE 0x802A
#define GL_HISTOGRAM_BLUE_SIZE_EXT 0x802A
#define GL_HISTOGRAM_ALPHA_SIZE 0x802B
#define GL_HISTOGRAM_ALPHA_SIZE_EXT 0x802B
#define GL_HISTOGRAM_LUMINANCE_SIZE 0x802C
#define GL_HISTOGRAM_LUMINANCE_SIZE_EXT 0x802C
#define GL_HISTOGRAM_SINK 0x802D
#define GL_HISTOGRAM_SINK_EXT 0x802D
#define GL_MINMAX 0x802E
#define GL_MINMAX_EXT 0x802E
#define GL_MINMAX_FORMAT 0x802F
#define GL_MINMAX_FORMAT_EXT 0x802F
#define GL_MINMAX_SINK 0x8030
#define GL_MINMAX_SINK_EXT 0x8030
#define GL_TABLE_TOO_LARGE 0x8031
#define GL_TABLE_TOO_LARGE_EXT 0x8031
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_BYTE_3_3_2_EXT 0x8032
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_4_4_4_4_EXT 0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_SHORT_5_5_5_1_EXT 0x8034
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_8_8_8_8_EXT 0x8035
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_UNSIGNED_INT_10_10_10_2_EXT 0x8036
#define GL_POLYGON_OFFSET_EXT 0x8037
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_POLYGON_OFFSET_FACTOR_EXT 0x8038
#define GL_POLYGON_OFFSET_BIAS_EXT 0x8039
#define GL_RESCALE_NORMAL 0x803A
#define GL_RESCALE_NORMAL_EXT 0x803A
#define GL_ALPHA4 0x803B
#define GL_ALPHA4_EXT 0x803B
#define GL_ALPHA8 0x803C
#define GL_ALPHA8_EXT 0x803C
#define GL_ALPHA8_OES 0x803C
#define GL_ALPHA12 0x803D
#define GL_ALPHA12_EXT 0x803D
#define GL_ALPHA16 0x803E
#define GL_ALPHA16_EXT 0x803E
#define GL_LUMINANCE4 0x803F
#define GL_LUMINANCE4_EXT 0x803F
#define GL_LUMINANCE8 0x8040
#define GL_LUMINANCE8_EXT 0x8040
#define GL_LUMINANCE8_OES 0x8040
#define GL_LUMINANCE12 0x8041
#define GL_LUMINANCE12_EXT 0x8041
#define GL_LUMINANCE16 0x8042
#define GL_LUMINANCE16_EXT 0x8042
#define GL_LUMINANCE4_ALPHA4 0x8043
#define GL_LUMINANCE4_ALPHA4_EXT 0x8043
#define GL_LUMINANCE4_ALPHA4_OES 0x8043
#define GL_LUMINANCE6_ALPHA2 0x8044
#define GL_LUMINANCE6_ALPHA2_EXT 0x8044
#define GL_LUMINANCE8_ALPHA8 0x8045
#define GL_LUMINANCE8_ALPHA8_EXT 0x8045
#define GL_LUMINANCE8_ALPHA8_OES 0x8045
#define GL_LUMINANCE12_ALPHA4 0x8046
#define GL_LUMINANCE12_ALPHA4_EXT 0x8046
#define GL_LUMINANCE12_ALPHA12 0x8047
#define GL_LUMINANCE12_ALPHA12_EXT 0x8047
#define GL_LUMINANCE16_ALPHA16 0x8048
#define GL_LUMINANCE16_ALPHA16_EXT 0x8048
#define GL_INTENSITY 0x8049
#define GL_INTENSITY_EXT 0x8049
#define GL_INTENSITY4 0x804A
#define GL_INTENSITY4_EXT 0x804A
#define GL_INTENSITY8 0x804B
#define GL_INTENSITY8_EXT 0x804B
#define GL_INTENSITY12 0x804C
#define GL_INTENSITY12_EXT 0x804C
#define GL_INTENSITY16 0x804D
#define GL_INTENSITY16_EXT 0x804D
#define GL_RGB2_EXT 0x804E
#define GL_RGB4 0x804F
#define GL_RGB4_EXT 0x804F
#define GL_RGB5 0x8050
#define GL_RGB5_EXT 0x8050
#define GL_RGB8 0x8051
#define GL_RGB8_EXT 0x8051
#define GL_RGB8_OES 0x8051
#define GL_RGB10 0x8052
#define GL_RGB10_EXT 0x8052
#define GL_RGB12 0x8053
#define GL_RGB12_EXT 0x8053
#define GL_RGB16 0x8054
#define GL_RGB16_EXT 0x8054
#define GL_RGBA2 0x8055
#define GL_RGBA2_EXT 0x8055
#define GL_RGBA4 0x8056
#define GL_RGBA4_EXT 0x8056
#define GL_RGBA4_OES 0x8056
#define GL_RGB5_A1 0x8057
#define GL_RGB5_A1_EXT 0x8057
#define GL_RGB5_A1_OES 0x8057
#define GL_RGBA8 0x8058
#define GL_RGBA8_EXT 0x8058
#define GL_RGBA8_OES 0x8058
#define GL_RGB10_A2 0x8059
#define GL_RGB10_A2_EXT 0x8059
#define GL_RGBA12 0x805A
#define GL_RGBA12_EXT 0x805A
#define GL_RGBA16 0x805B
#define GL_RGBA16_EXT 0x805B
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_RED_SIZE_EXT 0x805C
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_GREEN_SIZE_EXT 0x805D
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_BLUE_SIZE_EXT 0x805E
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_TEXTURE_ALPHA_SIZE_EXT 0x805F
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#define GL_TEXTURE_LUMINANCE_SIZE_EXT 0x8060
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#define GL_TEXTURE_INTENSITY_SIZE_EXT 0x8061
#define GL_REPLACE_EXT 0x8062
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_1D_EXT 0x8063
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_PROXY_TEXTURE_2D_EXT 0x8064
#define GL_TEXTURE_TOO_LARGE_EXT 0x8065
#define GL_TEXTURE_PRIORITY 0x8066
#define GL_TEXTURE_PRIORITY_EXT 0x8066
#define GL_TEXTURE_RESIDENT 0x8067
#define GL_TEXTURE_RESIDENT_EXT 0x8067
#define GL_TEXTURE_1D_BINDING_EXT 0x8068
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_2D_BINDING_EXT 0x8069
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_3D_BINDING_EXT 0x806A
#define GL_TEXTURE_3D_BINDING_OES 0x806A
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_TEXTURE_BINDING_3D_OES 0x806A
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PACK_SKIP_IMAGES_EXT 0x806B
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_PACK_IMAGE_HEIGHT_EXT 0x806C
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_SKIP_IMAGES_EXT 0x806D
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_UNPACK_IMAGE_HEIGHT_EXT 0x806E
#define GL_TEXTURE_3D 0x806F
#define GL_TEXTURE_3D_EXT 0x806F
#define GL_TEXTURE_3D_OES 0x806F
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_PROXY_TEXTURE_3D_EXT 0x8070
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_DEPTH_EXT 0x8071
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_TEXTURE_WRAP_R_EXT 0x8072
#define GL_TEXTURE_WRAP_R_OES 0x8072
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_MAX_3D_TEXTURE_SIZE_EXT 0x8073
#define GL_MAX_3D_TEXTURE_SIZE_OES 0x8073
#define GL_VERTEX_ARRAY 0x8074
#define GL_VERTEX_ARRAY_EXT 0x8074
#define GL_VERTEX_ARRAY_KHR 0x8074
#define GL_NORMAL_ARRAY 0x8075
#define GL_NORMAL_ARRAY_EXT 0x8075
#define GL_COLOR_ARRAY 0x8076
#define GL_COLOR_ARRAY_EXT 0x8076
#define GL_INDEX_ARRAY 0x8077
#define GL_INDEX_ARRAY_EXT 0x8077
#define GL_TEXTURE_COORD_ARRAY 0x8078
#define GL_TEXTURE_COORD_ARRAY_EXT 0x8078
#define GL_EDGE_FLAG_ARRAY 0x8079
#define GL_EDGE_FLAG_ARRAY_EXT 0x8079
#define GL_VERTEX_ARRAY_SIZE 0x807A
#define GL_VERTEX_ARRAY_SIZE_EXT 0x807A
#define GL_VERTEX_ARRAY_TYPE 0x807B
#define GL_VERTEX_ARRAY_TYPE_EXT 0x807B
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#define GL_VERTEX_ARRAY_STRIDE_EXT 0x807C
#define GL_VERTEX_ARRAY_COUNT_EXT 0x807D
#define GL_NORMAL_ARRAY_TYPE 0x807E
#define GL_NORMAL_ARRAY_TYPE_EXT 0x807E
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#define GL_NORMAL_ARRAY_STRIDE_EXT 0x807F
#define GL_NORMAL_ARRAY_COUNT_EXT 0x8080
#define GL_COLOR_ARRAY_SIZE 0x8081
#define GL_COLOR_ARRAY_SIZE_EXT 0x8081
#define GL_COLOR_ARRAY_TYPE 0x8082
#define GL_COLOR_ARRAY_TYPE_EXT 0x8082
#define GL_COLOR_ARRAY_STRIDE 0x8083
#define GL_COLOR_ARRAY_STRIDE_EXT 0x8083
#define GL_COLOR_ARRAY_COUNT_EXT 0x8084
#define GL_INDEX_ARRAY_TYPE 0x8085
#define GL_INDEX_ARRAY_TYPE_EXT 0x8085
#define GL_INDEX_ARRAY_STRIDE 0x8086
#define GL_INDEX_ARRAY_STRIDE_EXT 0x8086
#define GL_INDEX_ARRAY_COUNT_EXT 0x8087
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#define GL_TEXTURE_COORD_ARRAY_SIZE_EXT 0x8088
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#define GL_TEXTURE_COORD_ARRAY_TYPE_EXT 0x8089
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A
#define GL_TEXTURE_COORD_ARRAY_COUNT_EXT 0x808B
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#define GL_EDGE_FLAG_ARRAY_STRIDE_EXT 0x808C
#define GL_EDGE_FLAG_ARRAY_COUNT_EXT 0x808D
#define GL_VERTEX_ARRAY_POINTER 0x808E
#define GL_VERTEX_ARRAY_POINTER_EXT 0x808E
#define GL_NORMAL_ARRAY_POINTER 0x808F
#define GL_NORMAL_ARRAY_POINTER_EXT 0x808F
#define GL_COLOR_ARRAY_POINTER 0x8090
#define GL_COLOR_ARRAY_POINTER_EXT 0x8090
#define GL_INDEX_ARRAY_POINTER 0x8091
#define GL_INDEX_ARRAY_POINTER_EXT 0x8091
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#define GL_EDGE_FLAG_ARRAY_POINTER_EXT 0x8093
#define GL_INTERLACE_SGIX 0x8094
#define GL_DETAIL_TEXTURE_2D_SGIS 0x8095
#define GL_DETAIL_TEXTURE_2D_BINDING_SGIS 0x8096
#define GL_LINEAR_DETAIL_SGIS 0x8097
#define GL_LINEAR_DETAIL_ALPHA_SGIS 0x8098
#define GL_LINEAR_DETAIL_COLOR_SGIS 0x8099
#define GL_DETAIL_TEXTURE_LEVEL_SGIS 0x809A
#define GL_DETAIL_TEXTURE_MODE_SGIS 0x809B
#define GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS 0x809C
#define GL_MULTISAMPLE 0x809D
#define GL_MULTISAMPLE_ARB 0x809D
#define GL_MULTISAMPLE_EXT 0x809D
#define GL_MULTISAMPLE_SGIS 0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB 0x809E
#define GL_SAMPLE_ALPHA_TO_MASK_EXT 0x809E
#define GL_SAMPLE_ALPHA_TO_MASK_SGIS 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_ALPHA_TO_ONE_ARB 0x809F
#define GL_SAMPLE_ALPHA_TO_ONE_EXT 0x809F
#define GL_SAMPLE_ALPHA_TO_ONE_SGIS 0x809F
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_COVERAGE_ARB 0x80A0
#define GL_SAMPLE_MASK_EXT 0x80A0
#define GL_SAMPLE_MASK_SGIS 0x80A0
#define GL_1PASS_EXT 0x80A1
#define GL_1PASS_SGIS 0x80A1
#define GL_2PASS_0_EXT 0x80A2
#define GL_2PASS_0_SGIS 0x80A2
#define GL_2PASS_1_EXT 0x80A3
#define GL_2PASS_1_SGIS 0x80A3
#define GL_4PASS_0_EXT 0x80A4
#define GL_4PASS_0_SGIS 0x80A4
#define GL_4PASS_1_EXT 0x80A5
#define GL_4PASS_1_SGIS 0x80A5
#define GL_4PASS_2_EXT 0x80A6
#define GL_4PASS_2_SGIS 0x80A6
#define GL_4PASS_3_EXT 0x80A7
#define GL_4PASS_3_SGIS 0x80A7
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLE_BUFFERS_ARB 0x80A8
#define GL_SAMPLE_BUFFERS_EXT 0x80A8
#define GL_SAMPLE_BUFFERS_SGIS 0x80A8
#define GL_SAMPLES 0x80A9
#define GL_SAMPLES_ARB 0x80A9
#define GL_SAMPLES_EXT 0x80A9
#define GL_SAMPLES_SGIS 0x80A9
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SAMPLE_COVERAGE_VALUE_ARB 0x80AA
#define GL_SAMPLE_MASK_VALUE_EXT 0x80AA
#define GL_SAMPLE_MASK_VALUE_SGIS 0x80AA
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_SAMPLE_COVERAGE_INVERT_ARB 0x80AB
#define GL_SAMPLE_MASK_INVERT_EXT 0x80AB
#define GL_SAMPLE_MASK_INVERT_SGIS 0x80AB
#define GL_SAMPLE_PATTERN_EXT 0x80AC
#define GL_SAMPLE_PATTERN_SGIS 0x80AC
#define GL_LINEAR_SHARPEN_SGIS 0x80AD
#define GL_LINEAR_SHARPEN_ALPHA_SGIS 0x80AE
#define GL_LINEAR_SHARPEN_COLOR_SGIS 0x80AF
#define GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS 0x80B0
#define GL_COLOR_MATRIX 0x80B1
#define GL_COLOR_MATRIX_SGI 0x80B1
#define GL_COLOR_MATRIX_STACK_DEPTH 0x80B2
#define GL_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B2
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH 0x80B3
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B3
#define GL_POST_COLOR_MATRIX_RED_SCALE 0x80B4
#define GL_POST_COLOR_MATRIX_RED_SCALE_SGI 0x80B4
#define GL_POST_COLOR_MATRIX_GREEN_SCALE 0x80B5
#define GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI 0x80B5
#define GL_POST_COLOR_MATRIX_BLUE_SCALE 0x80B6
#define GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI 0x80B6
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE 0x80B7
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI 0x80B7
#define GL_POST_COLOR_MATRIX_RED_BIAS 0x80B8
#define GL_POST_COLOR_MATRIX_RED_BIAS_SGI 0x80B8
#define GL_POST_COLOR_MATRIX_GREEN_BIAS 0x80B9
#define GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI 0x80B9
#define GL_POST_COLOR_MATRIX_BLUE_BIAS 0x80BA
#define GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI 0x80BA
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS 0x80BB
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI 0x80BB
#define GL_TEXTURE_COLOR_TABLE_SGI 0x80BC
#define GL_PROXY_TEXTURE_COLOR_TABLE_SGI 0x80BD
#define GL_TEXTURE_ENV_BIAS_SGIX 0x80BE
#define GL_SHADOW_AMBIENT_SGIX 0x80BF
#define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB 0x80BF
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_DST_RGB_EXT 0x80C8
#define GL_BLEND_DST_RGB_OES 0x80C8
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLEND_SRC_RGB_EXT 0x80C9
#define GL_BLEND_SRC_RGB_OES 0x80C9
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_DST_ALPHA_EXT 0x80CA
#define GL_BLEND_DST_ALPHA_OES 0x80CA
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_BLEND_SRC_ALPHA_EXT 0x80CB
#define GL_BLEND_SRC_ALPHA_OES 0x80CB
#define GL_422_EXT 0x80CC
#define GL_422_REV_EXT 0x80CD
#define GL_422_AVERAGE_EXT 0x80CE
#define GL_422_REV_AVERAGE_EXT 0x80CF
#define GL_COLOR_TABLE 0x80D0
#define GL_COLOR_TABLE_SGI 0x80D0
#define GL_POST_CONVOLUTION_COLOR_TABLE 0x80D1
#define GL_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D1
#define GL_POST_COLOR_MATRIX_COLOR_TABLE 0x80D2
#define GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D2
#define GL_PROXY_COLOR_TABLE 0x80D3
#define GL_PROXY_COLOR_TABLE_SGI 0x80D3
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0x80D4
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D4
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0x80D5
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D5
#define GL_COLOR_TABLE_SCALE 0x80D6
#define GL_COLOR_TABLE_SCALE_SGI 0x80D6
#define GL_COLOR_TABLE_BIAS 0x80D7
#define GL_COLOR_TABLE_BIAS_SGI 0x80D7
#define GL_COLOR_TABLE_FORMAT 0x80D8
#define GL_COLOR_TABLE_FORMAT_SGI 0x80D8
#define GL_COLOR_TABLE_WIDTH 0x80D9
#define GL_COLOR_TABLE_WIDTH_SGI 0x80D9
#define GL_COLOR_TABLE_RED_SIZE 0x80DA
#define GL_COLOR_TABLE_RED_SIZE_SGI 0x80DA
#define GL_COLOR_TABLE_GREEN_SIZE 0x80DB
#define GL_COLOR_TABLE_GREEN_SIZE_SGI 0x80DB
#define GL_COLOR_TABLE_BLUE_SIZE 0x80DC
#define GL_COLOR_TABLE_BLUE_SIZE_SGI 0x80DC
#define GL_COLOR_TABLE_ALPHA_SIZE 0x80DD
#define GL_COLOR_TABLE_ALPHA_SIZE_SGI 0x80DD
#define GL_COLOR_TABLE_LUMINANCE_SIZE 0x80DE
#define GL_COLOR_TABLE_LUMINANCE_SIZE_SGI 0x80DE
#define GL_COLOR_TABLE_INTENSITY_SIZE 0x80DF
#define GL_COLOR_TABLE_INTENSITY_SIZE_SGI 0x80DF
#define GL_BGR 0x80E0
#define GL_BGR_EXT 0x80E0
#define GL_BGRA 0x80E1
#define GL_BGRA_EXT 0x80E1
#define GL_BGRA_IMG 0x80E1
#define GL_COLOR_INDEX1_EXT 0x80E2
#define GL_COLOR_INDEX2_EXT 0x80E3
#define GL_COLOR_INDEX4_EXT 0x80E4
#define GL_COLOR_INDEX8_EXT 0x80E5
#define GL_COLOR_INDEX12_EXT 0x80E6
#define GL_COLOR_INDEX16_EXT 0x80E7
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_ELEMENTS_VERTICES_EXT 0x80E8
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_MAX_ELEMENTS_INDICES_EXT 0x80E9
#define GL_PHONG_WIN 0x80EA
#define GL_PHONG_HINT_WIN 0x80EB
#define GL_FOG_SPECULAR_TEXTURE_WIN 0x80EC
#define GL_TEXTURE_INDEX_SIZE_EXT 0x80ED
#define GL_PARAMETER_BUFFER_ARB 0x80EE
#define GL_PARAMETER_BUFFER_BINDING_ARB 0x80EF
#define GL_CLIP_VOLUME_CLIPPING_HINT_EXT 0x80F0
#define GL_DUAL_ALPHA4_SGIS 0x8110
#define GL_DUAL_ALPHA8_SGIS 0x8111
#define GL_DUAL_ALPHA12_SGIS 0x8112
#define GL_DUAL_ALPHA16_SGIS 0x8113
#define GL_DUAL_LUMINANCE4_SGIS 0x8114
#define GL_DUAL_LUMINANCE8_SGIS 0x8115
#define GL_DUAL_LUMINANCE12_SGIS 0x8116
#define GL_DUAL_LUMINANCE16_SGIS 0x8117
#define GL_DUAL_INTENSITY4_SGIS 0x8118
#define GL_DUAL_INTENSITY8_SGIS 0x8119
#define GL_DUAL_INTENSITY12_SGIS 0x811A
#define GL_DUAL_INTENSITY16_SGIS 0x811B
#define GL_DUAL_LUMINANCE_ALPHA4_SGIS 0x811C
#define GL_DUAL_LUMINANCE_ALPHA8_SGIS 0x811D
#define GL_QUAD_ALPHA4_SGIS 0x811E
#define GL_QUAD_ALPHA8_SGIS 0x811F
#define GL_QUAD_LUMINANCE4_SGIS 0x8120
#define GL_QUAD_LUMINANCE8_SGIS 0x8121
#define GL_QUAD_INTENSITY4_SGIS 0x8122
#define GL_QUAD_INTENSITY8_SGIS 0x8123
#define GL_DUAL_TEXTURE_SELECT_SGIS 0x8124
#define GL_QUAD_TEXTURE_SELECT_SGIS 0x8125
#define GL_POINT_SIZE_MIN 0x8126
#define GL_POINT_SIZE_MIN_ARB 0x8126
#define GL_POINT_SIZE_MIN_EXT 0x8126
#define GL_POINT_SIZE_MIN_SGIS 0x8126
#define GL_POINT_SIZE_MAX 0x8127
#define GL_POINT_SIZE_MAX_ARB 0x8127
#define GL_POINT_SIZE_MAX_EXT 0x8127
#define GL_POINT_SIZE_MAX_SGIS 0x8127
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_ARB 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_EXT 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_SGIS 0x8128
#define GL_DISTANCE_ATTENUATION_EXT 0x8129
#define GL_DISTANCE_ATTENUATION_SGIS 0x8129
#define GL_POINT_DISTANCE_ATTENUATION 0x8129
#define GL_POINT_DISTANCE_ATTENUATION_ARB 0x8129
#define GL_FOG_FUNC_SGIS 0x812A
#define GL_FOG_FUNC_POINTS_SGIS 0x812B
#define GL_MAX_FOG_FUNC_POINTS_SGIS 0x812C
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_CLAMP_TO_BORDER_ARB 0x812D
#define GL_CLAMP_TO_BORDER_EXT 0x812D
#define GL_CLAMP_TO_BORDER_NV 0x812D
#define GL_CLAMP_TO_BORDER_OES 0x812D
#define GL_CLAMP_TO_BORDER_SGIS 0x812D
#define GL_TEXTURE_MULTI_BUFFER_HINT_SGIX 0x812E
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_CLAMP_TO_EDGE_EXT 0x812F
#define GL_CLAMP_TO_EDGE_SGIS 0x812F
#define GL_PACK_SKIP_VOLUMES_SGIS 0x8130
#define GL_PACK_IMAGE_DEPTH_SGIS 0x8131
#define GL_UNPACK_SKIP_VOLUMES_SGIS 0x8132
#define GL_UNPACK_IMAGE_DEPTH_SGIS 0x8133
#define GL_TEXTURE_4D_SGIS 0x8134
#define GL_PROXY_TEXTURE_4D_SGIS 0x8135
#define GL_TEXTURE_4DSIZE_SGIS 0x8136
#define GL_TEXTURE_WRAP_Q_SGIS 0x8137
#define GL_MAX_4D_TEXTURE_SIZE_SGIS 0x8138
#define GL_PIXEL_TEX_GEN_SGIX 0x8139
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_MIN_LOD_SGIS 0x813A
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_MAX_LOD_SGIS 0x813B
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_BASE_LEVEL_SGIS 0x813C
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_TEXTURE_MAX_LEVEL_APPLE 0x813D
#define GL_TEXTURE_MAX_LEVEL_SGIS 0x813D
#define GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX 0x813E
#define GL_PIXEL_TILE_CACHE_INCREMENT_SGIX 0x813F
#define GL_PIXEL_TILE_WIDTH_SGIX 0x8140
#define GL_PIXEL_TILE_HEIGHT_SGIX 0x8141
#define GL_PIXEL_TILE_GRID_WIDTH_SGIX 0x8142
#define GL_PIXEL_TILE_GRID_HEIGHT_SGIX 0x8143
#define GL_PIXEL_TILE_GRID_DEPTH_SGIX 0x8144
#define GL_PIXEL_TILE_CACHE_SIZE_SGIX 0x8145
#define GL_FILTER4_SGIS 0x8146
#define GL_TEXTURE_FILTER4_SIZE_SGIS 0x8147
#define GL_SPRITE_SGIX 0x8148
#define GL_SPRITE_MODE_SGIX 0x8149
#define GL_SPRITE_AXIS_SGIX 0x814A
#define GL_SPRITE_TRANSLATION_SGIX 0x814B
#define GL_SPRITE_AXIAL_SGIX 0x814C
#define GL_SPRITE_OBJECT_ALIGNED_SGIX 0x814D
#define GL_SPRITE_EYE_ALIGNED_SGIX 0x814E
#define GL_TEXTURE_4D_BINDING_SGIS 0x814F
#define GL_IGNORE_BORDER_HP 0x8150
#define GL_CONSTANT_BORDER 0x8151
#define GL_CONSTANT_BORDER_HP 0x8151
#define GL_REPLICATE_BORDER 0x8153
#define GL_REPLICATE_BORDER_HP 0x8153
#define GL_CONVOLUTION_BORDER_COLOR 0x8154
#define GL_CONVOLUTION_BORDER_COLOR_HP 0x8154
#define GL_IMAGE_SCALE_X_HP 0x8155
#define GL_IMAGE_SCALE_Y_HP 0x8156
#define GL_IMAGE_TRANSLATE_X_HP 0x8157
#define GL_IMAGE_TRANSLATE_Y_HP 0x8158
#define GL_IMAGE_ROTATE_ANGLE_HP 0x8159
#define GL_IMAGE_ROTATE_ORIGIN_X_HP 0x815A
#define GL_IMAGE_ROTATE_ORIGIN_Y_HP 0x815B
#define GL_IMAGE_MAG_FILTER_HP 0x815C
#define GL_IMAGE_MIN_FILTER_HP 0x815D
#define GL_IMAGE_CUBIC_WEIGHT_HP 0x815E
#define GL_CUBIC_HP 0x815F
#define GL_AVERAGE_HP 0x8160
#define GL_IMAGE_TRANSFORM_2D_HP 0x8161
#define GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8162
#define GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8163
#define GL_OCCLUSION_TEST_HP 0x8165
#define GL_OCCLUSION_TEST_RESULT_HP 0x8166
#define GL_TEXTURE_LIGHTING_MODE_HP 0x8167
#define GL_TEXTURE_POST_SPECULAR_HP 0x8168
#define GL_TEXTURE_PRE_SPECULAR_HP 0x8169
#define GL_LINEAR_CLIPMAP_LINEAR_SGIX 0x8170
#define GL_TEXTURE_CLIPMAP_CENTER_SGIX 0x8171
#define GL_TEXTURE_CLIPMAP_FRAME_SGIX 0x8172
#define GL_TEXTURE_CLIPMAP_OFFSET_SGIX 0x8173
#define GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8174
#define GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX 0x8175
#define GL_TEXTURE_CLIPMAP_DEPTH_SGIX 0x8176
#define GL_MAX_CLIPMAP_DEPTH_SGIX 0x8177
#define GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8178
#define GL_POST_TEXTURE_FILTER_BIAS_SGIX 0x8179
#define GL_POST_TEXTURE_FILTER_SCALE_SGIX 0x817A
#define GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX 0x817B
#define GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX 0x817C
#define GL_REFERENCE_PLANE_SGIX 0x817D
#define GL_REFERENCE_PLANE_EQUATION_SGIX 0x817E
#define GL_IR_INSTRUMENT1_SGIX 0x817F
#define GL_INSTRUMENT_BUFFER_POINTER_SGIX 0x8180
#define GL_INSTRUMENT_MEASUREMENTS_SGIX 0x8181
#define GL_LIST_PRIORITY_SGIX 0x8182
#define GL_CALLIGRAPHIC_FRAGMENT_SGIX 0x8183
#define GL_PIXEL_TEX_GEN_Q_CEILING_SGIX 0x8184
#define GL_PIXEL_TEX_GEN_Q_ROUND_SGIX 0x8185
#define GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX 0x8186
#define GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX 0x8187
#define GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX 0x8188
#define GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX 0x8189
#define GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX 0x818A
#define GL_FRAMEZOOM_SGIX 0x818B
#define GL_FRAMEZOOM_FACTOR_SGIX 0x818C
#define GL_MAX_FRAMEZOOM_FACTOR_SGIX 0x818D
#define GL_TEXTURE_LOD_BIAS_S_SGIX 0x818E
#define GL_TEXTURE_LOD_BIAS_T_SGIX 0x818F
#define GL_TEXTURE_LOD_BIAS_R_SGIX 0x8190
#define GL_GENERATE_MIPMAP 0x8191
#define GL_GENERATE_MIPMAP_SGIS 0x8191
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_GENERATE_MIPMAP_HINT_SGIS 0x8192
#define GL_GEOMETRY_DEFORMATION_SGIX 0x8194
#define GL_TEXTURE_DEFORMATION_SGIX 0x8195
#define GL_DEFORMATIONS_MASK_SGIX 0x8196
#define GL_MAX_DEFORMATION_ORDER_SGIX 0x8197
#define GL_FOG_OFFSET_SGIX 0x8198
#define GL_FOG_OFFSET_VALUE_SGIX 0x8199
#define GL_TEXTURE_COMPARE_SGIX 0x819A
#define GL_TEXTURE_COMPARE_OPERATOR_SGIX 0x819B
#define GL_TEXTURE_LEQUAL_R_SGIX 0x819C
#define GL_TEXTURE_GEQUAL_R_SGIX 0x819D
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT16_ARB 0x81A5
#define GL_DEPTH_COMPONENT16_OES 0x81A5
#define GL_DEPTH_COMPONENT16_SGIX 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT24_ARB 0x81A6
#define GL_DEPTH_COMPONENT24_OES 0x81A6
#define GL_DEPTH_COMPONENT24_SGIX 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_DEPTH_COMPONENT32_ARB 0x81A7
#define GL_DEPTH_COMPONENT32_OES 0x81A7
#define GL_DEPTH_COMPONENT32_SGIX 0x81A7
#define GL_ARRAY_ELEMENT_LOCK_FIRST_EXT 0x81A8
#define GL_ARRAY_ELEMENT_LOCK_COUNT_EXT 0x81A9
#define GL_CULL_VERTEX_EXT 0x81AA
#define GL_CULL_VERTEX_EYE_POSITION_EXT 0x81AB
#define GL_CULL_VERTEX_OBJECT_POSITION_EXT 0x81AC
#define GL_IUI_V2F_EXT 0x81AD
#define GL_IUI_V3F_EXT 0x81AE
#define GL_IUI_N3F_V2F_EXT 0x81AF
#define GL_IUI_N3F_V3F_EXT 0x81B0
#define GL_T2F_IUI_V2F_EXT 0x81B1
#define GL_T2F_IUI_V3F_EXT 0x81B2
#define GL_T2F_IUI_N3F_V2F_EXT 0x81B3
#define GL_T2F_IUI_N3F_V3F_EXT 0x81B4
#define GL_INDEX_TEST_EXT 0x81B5
#define GL_INDEX_TEST_FUNC_EXT 0x81B6
#define GL_INDEX_TEST_REF_EXT 0x81B7
#define GL_INDEX_MATERIAL_EXT 0x81B8
#define GL_INDEX_MATERIAL_PARAMETER_EXT 0x81B9
#define GL_INDEX_MATERIAL_FACE_EXT 0x81BA
#define GL_YCRCB_422_SGIX 0x81BB
#define GL_YCRCB_444_SGIX 0x81BC
#define GL_WRAP_BORDER_SUN 0x81D4
#define GL_UNPACK_CONSTANT_DATA_SUNX 0x81D5
#define GL_TEXTURE_CONSTANT_DATA_SUNX 0x81D6
#define GL_TRIANGLE_LIST_SUN 0x81D7
#define GL_REPLACEMENT_CODE_SUN 0x81D8
#define GL_GLOBAL_ALPHA_SUN 0x81D9
#define GL_GLOBAL_ALPHA_FACTOR_SUN 0x81DA
#define GL_TEXTURE_COLOR_WRITEMASK_SGIS 0x81EF
#define GL_EYE_DISTANCE_TO_POINT_SGIS 0x81F0
#define GL_OBJECT_DISTANCE_TO_POINT_SGIS 0x81F1
#define GL_EYE_DISTANCE_TO_LINE_SGIS 0x81F2
#define GL_OBJECT_DISTANCE_TO_LINE_SGIS 0x81F3
#define GL_EYE_POINT_SGIS 0x81F4
#define GL_OBJECT_POINT_SGIS 0x81F5
#define GL_EYE_LINE_SGIS 0x81F6
#define GL_OBJECT_LINE_SGIS 0x81F7
#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
#define GL_LIGHT_MODEL_COLOR_CONTROL_EXT 0x81F8
#define GL_SINGLE_COLOR 0x81F9
#define GL_SINGLE_COLOR_EXT 0x81F9
#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
#define GL_SEPARATE_SPECULAR_COLOR_EXT 0x81FA
#define GL_SHARED_TEXTURE_PALETTE_EXT 0x81FB
#define GL_TEXT_FRAGMENT_SHADER_ATI 0x8200
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_FRAMEBUFFER_UNDEFINED_OES 0x8219
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_MAJOR_VERSION 0x821B
#define GL_MINOR_VERSION 0x821C
#define GL_NUM_EXTENSIONS 0x821D
#define GL_CONTEXT_FLAGS 0x821E
#define GL_BUFFER_IMMUTABLE_STORAGE 0x821F
#define GL_BUFFER_IMMUTABLE_STORAGE_EXT 0x821F
#define GL_BUFFER_STORAGE_FLAGS 0x8220
#define GL_BUFFER_STORAGE_FLAGS_EXT 0x8220
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES 0x8221
#define GL_INDEX 0x8222
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RG 0x8226
#define GL_RG 0x8227
#define GL_RG_EXT 0x8227
#define GL_RG_INTEGER 0x8228
#define GL_R8 0x8229
#define GL_R8_EXT 0x8229
#define GL_R16 0x822A
#define GL_R16_EXT 0x822A
#define GL_RG8 0x822B
#define GL_RG8_EXT 0x822B
#define GL_RG16 0x822C
#define GL_RG16_EXT 0x822C
#define GL_R16F 0x822D
#define GL_R16F_EXT 0x822D
#define GL_R32F 0x822E
#define GL_R32F_EXT 0x822E
#define GL_RG16F 0x822F
#define GL_RG16F_EXT 0x822F
#define GL_RG32F 0x8230
#define GL_RG32F_EXT 0x8230
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_SYNC_CL_EVENT_ARB 0x8240
#define GL_SYNC_CL_EVENT_COMPLETE_ARB 0x8241
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB 0x8242
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR 0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB 0x8243
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#define GL_DEBUG_CALLBACK_FUNCTION_ARB 0x8244
#define GL_DEBUG_CALLBACK_FUNCTION_KHR 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#define GL_DEBUG_CALLBACK_USER_PARAM_ARB 0x8245
#define GL_DEBUG_CALLBACK_USER_PARAM_KHR 0x8245
#define GL_DEBUG_SOURCE_API 0x8246
#define GL_DEBUG_SOURCE_API_ARB 0x8246
#define GL_DEBUG_SOURCE_API_KHR 0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB 0x8247
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR 0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB 0x8248
#define GL_DEBUG_SOURCE_SHADER_COMPILER_KHR 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#define GL_DEBUG_SOURCE_THIRD_PARTY_ARB 0x8249
#define GL_DEBUG_SOURCE_THIRD_PARTY_KHR 0x8249
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#define GL_DEBUG_SOURCE_APPLICATION_ARB 0x824A
#define GL_DEBUG_SOURCE_APPLICATION_KHR 0x824A
#define GL_DEBUG_SOURCE_OTHER 0x824B
#define GL_DEBUG_SOURCE_OTHER_ARB 0x824B
#define GL_DEBUG_SOURCE_OTHER_KHR 0x824B
#define GL_DEBUG_TYPE_ERROR 0x824C
#define GL_DEBUG_TYPE_ERROR_ARB 0x824C
#define GL_DEBUG_TYPE_ERROR_KHR 0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB 0x824D
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB 0x824E
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR 0x824E
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#define GL_DEBUG_TYPE_PORTABILITY_ARB 0x824F
#define GL_DEBUG_TYPE_PORTABILITY_KHR 0x824F
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#define GL_DEBUG_TYPE_PERFORMANCE_ARB 0x8250
#define GL_DEBUG_TYPE_PERFORMANCE_KHR 0x8250
#define GL_DEBUG_TYPE_OTHER 0x8251
#define GL_DEBUG_TYPE_OTHER_ARB 0x8251
#define GL_DEBUG_TYPE_OTHER_KHR 0x8251
#define GL_LOSE_CONTEXT_ON_RESET 0x8252
#define GL_LOSE_CONTEXT_ON_RESET_ARB 0x8252
#define GL_LOSE_CONTEXT_ON_RESET_EXT 0x8252
#define GL_LOSE_CONTEXT_ON_RESET_KHR 0x8252
#define GL_GUILTY_CONTEXT_RESET 0x8253
#define GL_GUILTY_CONTEXT_RESET_ARB 0x8253
#define GL_GUILTY_CONTEXT_RESET_EXT 0x8253
#define GL_GUILTY_CONTEXT_RESET_KHR 0x8253
#define GL_INNOCENT_CONTEXT_RESET 0x8254
#define GL_INNOCENT_CONTEXT_RESET_ARB 0x8254
#define GL_INNOCENT_CONTEXT_RESET_EXT 0x8254
#define GL_INNOCENT_CONTEXT_RESET_KHR 0x8254
#define GL_UNKNOWN_CONTEXT_RESET 0x8255
#define GL_UNKNOWN_CONTEXT_RESET_ARB 0x8255
#define GL_UNKNOWN_CONTEXT_RESET_EXT 0x8255
#define GL_UNKNOWN_CONTEXT_RESET_KHR 0x8255
#define GL_RESET_NOTIFICATION_STRATEGY 0x8256
#define GL_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
#define GL_RESET_NOTIFICATION_STRATEGY_EXT 0x8256
#define GL_RESET_NOTIFICATION_STRATEGY_KHR 0x8256
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_PROGRAM_SEPARABLE_EXT 0x8258
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_ACTIVE_PROGRAM_EXT 0x8259 /* for gles2 */
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_PROGRAM_PIPELINE_BINDING_EXT 0x825A
#define GL_MAX_VIEWPORTS 0x825B
#define GL_MAX_VIEWPORTS_NV 0x825B
#define GL_MAX_VIEWPORTS_OES 0x825B
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#define GL_VIEWPORT_SUBPIXEL_BITS_EXT 0x825C
#define GL_VIEWPORT_SUBPIXEL_BITS_NV 0x825C
#define GL_VIEWPORT_SUBPIXEL_BITS_OES 0x825C
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_VIEWPORT_BOUNDS_RANGE_EXT 0x825D
#define GL_VIEWPORT_BOUNDS_RANGE_NV 0x825D
#define GL_VIEWPORT_BOUNDS_RANGE_OES 0x825D
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_LAYER_PROVOKING_VERTEX_EXT 0x825E
#define GL_LAYER_PROVOKING_VERTEX_OES 0x825E
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_EXT 0x825F
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV 0x825F
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES 0x825F
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_UNDEFINED_VERTEX_EXT 0x8260
#define GL_UNDEFINED_VERTEX_OES 0x8260
#define GL_NO_RESET_NOTIFICATION 0x8261
#define GL_NO_RESET_NOTIFICATION_ARB 0x8261
#define GL_NO_RESET_NOTIFICATION_EXT 0x8261
#define GL_NO_RESET_NOTIFICATION_KHR 0x8261
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#define GL_DEBUG_TYPE_MARKER 0x8268
#define GL_DEBUG_TYPE_MARKER_KHR 0x8268
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#define GL_DEBUG_TYPE_PUSH_GROUP_KHR 0x8269
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#define GL_DEBUG_TYPE_POP_GROUP_KHR 0x826A
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#define GL_DEBUG_SEVERITY_NOTIFICATION_KHR 0x826B
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR 0x826C
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#define GL_DEBUG_GROUP_STACK_DEPTH_KHR 0x826D
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#define GL_INTERNALFORMAT_SUPPORTED 0x826F
#define GL_INTERNALFORMAT_PREFERRED 0x8270
#define GL_INTERNALFORMAT_RED_SIZE 0x8271
#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
#define GL_INTERNALFORMAT_RED_TYPE 0x8278
#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
#define GL_MAX_WIDTH 0x827E
#define GL_MAX_HEIGHT 0x827F
#define GL_MAX_DEPTH 0x8280
#define GL_MAX_LAYERS 0x8281
#define GL_MAX_COMBINED_DIMENSIONS 0x8282
#define GL_COLOR_COMPONENTS 0x8283
#define GL_DEPTH_COMPONENTS 0x8284
#define GL_STENCIL_COMPONENTS 0x8285
#define GL_COLOR_RENDERABLE 0x8286
#define GL_DEPTH_RENDERABLE 0x8287
#define GL_STENCIL_RENDERABLE 0x8288
#define GL_FRAMEBUFFER_RENDERABLE 0x8289
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#define GL_FRAMEBUFFER_BLEND 0x828B
#define GL_READ_PIXELS 0x828C
#define GL_READ_PIXELS_FORMAT 0x828D
#define GL_READ_PIXELS_TYPE 0x828E
#define GL_TEXTURE_IMAGE_FORMAT 0x828F
#define GL_TEXTURE_IMAGE_TYPE 0x8290
#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
#define GL_MIPMAP 0x8293
#define GL_MANUAL_GENERATE_MIPMAP 0x8294
#define GL_AUTO_GENERATE_MIPMAP 0x8295
#define GL_COLOR_ENCODING 0x8296
#define GL_SRGB_READ 0x8297
#define GL_SRGB_WRITE 0x8298
#define GL_SRGB_DECODE_ARB 0x8299
#define GL_FILTER 0x829A
#define GL_VERTEX_TEXTURE 0x829B
#define GL_TESS_CONTROL_TEXTURE 0x829C
#define GL_TESS_EVALUATION_TEXTURE 0x829D
#define GL_GEOMETRY_TEXTURE 0x829E
#define GL_FRAGMENT_TEXTURE 0x829F
#define GL_COMPUTE_TEXTURE 0x82A0
#define GL_TEXTURE_SHADOW 0x82A1
#define GL_TEXTURE_GATHER 0x82A2
#define GL_TEXTURE_GATHER_SHADOW 0x82A3
#define GL_SHADER_IMAGE_LOAD 0x82A4
#define GL_SHADER_IMAGE_STORE 0x82A5
#define GL_SHADER_IMAGE_ATOMIC 0x82A6
#define GL_IMAGE_TEXEL_SIZE 0x82A7
#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
#define GL_IMAGE_PIXEL_FORMAT 0x82A9
#define GL_IMAGE_PIXEL_TYPE 0x82AA
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
#define GL_CLEAR_BUFFER 0x82B4
#define GL_TEXTURE_VIEW 0x82B5
#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
#define GL_FULL_SUPPORT 0x82B7
#define GL_CAVEAT_SUPPORT 0x82B8
#define GL_IMAGE_CLASS_4_X_32 0x82B9
#define GL_IMAGE_CLASS_2_X_32 0x82BA
#define GL_IMAGE_CLASS_1_X_32 0x82BB
#define GL_IMAGE_CLASS_4_X_16 0x82BC
#define GL_IMAGE_CLASS_2_X_16 0x82BD
#define GL_IMAGE_CLASS_1_X_16 0x82BE
#define GL_IMAGE_CLASS_4_X_8 0x82BF
#define GL_IMAGE_CLASS_2_X_8 0x82C0
#define GL_IMAGE_CLASS_1_X_8 0x82C1
#define GL_IMAGE_CLASS_11_11_10 0x82C2
#define GL_IMAGE_CLASS_10_10_10_2 0x82C3
#define GL_VIEW_CLASS_128_BITS 0x82C4
#define GL_VIEW_CLASS_96_BITS 0x82C5
#define GL_VIEW_CLASS_64_BITS 0x82C6
#define GL_VIEW_CLASS_48_BITS 0x82C7
#define GL_VIEW_CLASS_32_BITS 0x82C8
#define GL_VIEW_CLASS_24_BITS 0x82C9
#define GL_VIEW_CLASS_16_BITS 0x82CA
#define GL_VIEW_CLASS_8_BITS 0x82CB
#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
#define GL_VIEW_CLASS_RGTC1_RED 0x82D0
#define GL_VIEW_CLASS_RGTC2_RG 0x82D1
#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
#define GL_TEXTURE_VIEW_MIN_LEVEL_EXT 0x82DB
#define GL_TEXTURE_VIEW_MIN_LEVEL_OES 0x82DB
#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
#define GL_TEXTURE_VIEW_NUM_LEVELS_EXT 0x82DC
#define GL_TEXTURE_VIEW_NUM_LEVELS_OES 0x82DC
#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
#define GL_TEXTURE_VIEW_MIN_LAYER_EXT 0x82DD
#define GL_TEXTURE_VIEW_MIN_LAYER_OES 0x82DD
#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
#define GL_TEXTURE_VIEW_NUM_LAYERS_EXT 0x82DE
#define GL_TEXTURE_VIEW_NUM_LAYERS_OES 0x82DE
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#define GL_BUFFER 0x82E0
#define GL_BUFFER_KHR 0x82E0
#define GL_SHADER 0x82E1
#define GL_SHADER_KHR 0x82E1
#define GL_PROGRAM 0x82E2
#define GL_PROGRAM_KHR 0x82E2
#define GL_QUERY 0x82E3
#define GL_QUERY_KHR 0x82E3
#define GL_PROGRAM_PIPELINE 0x82E4
#define GL_PROGRAM_PIPELINE_KHR 0x82E4
#define GL_MAX_VERTEX_ATTRIB_STRIDE 0x82E5
#define GL_SAMPLER 0x82E6
#define GL_SAMPLER_KHR 0x82E6
#define GL_DISPLAY_LIST 0x82E7
#define GL_MAX_LABEL_LENGTH 0x82E8
#define GL_MAX_LABEL_LENGTH_KHR 0x82E8
#define GL_NUM_SHADING_LANGUAGE_VERSIONS 0x82E9
#define GL_QUERY_TARGET 0x82EA
#define GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB 0x82EC
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB 0x82ED
#define GL_VERTICES_SUBMITTED_ARB 0x82EE
#define GL_PRIMITIVES_SUBMITTED_ARB 0x82EF
#define GL_VERTEX_SHADER_INVOCATIONS_ARB 0x82F0
#define GL_TESS_CONTROL_SHADER_PATCHES_ARB 0x82F1
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB 0x82F2
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB 0x82F3
#define GL_FRAGMENT_SHADER_INVOCATIONS_ARB 0x82F4
#define GL_COMPUTE_SHADER_INVOCATIONS_ARB 0x82F5
#define GL_CLIPPING_INPUT_PRIMITIVES_ARB 0x82F6
#define GL_CLIPPING_OUTPUT_PRIMITIVES_ARB 0x82F7
#define GL_SPARSE_BUFFER_PAGE_SIZE_ARB 0x82F8
#define GL_MAX_CULL_DISTANCES 0x82F9
#define GL_MAX_CULL_DISTANCES_EXT 0x82F9
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT 0x82FA
#define GL_CONTEXT_RELEASE_BEHAVIOR 0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_KHR 0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR 0x82FC
#define GL_DEPTH_PASS_INSTRUMENT_SGIX 0x8310
#define GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX 0x8311
#define GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX 0x8312
#define GL_FRAGMENTS_INSTRUMENT_SGIX 0x8313
#define GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX 0x8314
#define GL_FRAGMENTS_INSTRUMENT_MAX_SGIX 0x8315
#define GL_CONVOLUTION_HINT_SGIX 0x8316
#define GL_YCRCB_SGIX 0x8318
#define GL_YCRCBA_SGIX 0x8319
#define GL_UNPACK_COMPRESSED_SIZE_SGIX 0x831A
#define GL_PACK_MAX_COMPRESSED_SIZE_SGIX 0x831B
#define GL_PACK_COMPRESSED_SIZE_SGIX 0x831C
#define GL_SLIM8U_SGIX 0x831D
#define GL_SLIM10U_SGIX 0x831E
#define GL_SLIM12S_SGIX 0x831F
#define GL_ALPHA_MIN_SGIX 0x8320
#define GL_ALPHA_MAX_SGIX 0x8321
#define GL_SCALEBIAS_HINT_SGIX 0x8322
#define GL_ASYNC_MARKER_SGIX 0x8329
#define GL_PIXEL_TEX_GEN_MODE_SGIX 0x832B
#define GL_ASYNC_HISTOGRAM_SGIX 0x832C
#define GL_MAX_ASYNC_HISTOGRAM_SGIX 0x832D
#define GL_PIXEL_TRANSFORM_2D_EXT 0x8330
#define GL_PIXEL_MAG_FILTER_EXT 0x8331
#define GL_PIXEL_MIN_FILTER_EXT 0x8332
#define GL_PIXEL_CUBIC_WEIGHT_EXT 0x8333
#define GL_CUBIC_EXT 0x8334
#define GL_AVERAGE_EXT 0x8335
#define GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8336
#define GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8337
#define GL_PIXEL_TRANSFORM_2D_MATRIX_EXT 0x8338
#define GL_FRAGMENT_MATERIAL_EXT 0x8349
#define GL_FRAGMENT_NORMAL_EXT 0x834A
#define GL_FRAGMENT_COLOR_EXT 0x834C
#define GL_ATTENUATION_EXT 0x834D
#define GL_SHADOW_ATTENUATION_EXT 0x834E
#define GL_TEXTURE_APPLICATION_MODE_EXT 0x834F
#define GL_TEXTURE_LIGHT_EXT 0x8350
#define GL_TEXTURE_MATERIAL_FACE_EXT 0x8351
#define GL_TEXTURE_MATERIAL_PARAMETER_EXT 0x8352
#define GL_PIXEL_TEXTURE_SGIS 0x8353
#define GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS 0x8354
#define GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS 0x8355
#define GL_PIXEL_GROUP_COLOR_SGIS 0x8356
#define GL_LINE_QUALITY_HINT_SGIX 0x835B
#define GL_ASYNC_TEX_IMAGE_SGIX 0x835C
#define GL_ASYNC_DRAW_PIXELS_SGIX 0x835D
#define GL_ASYNC_READ_PIXELS_SGIX 0x835E
#define GL_MAX_ASYNC_TEX_IMAGE_SGIX 0x835F
#define GL_MAX_ASYNC_DRAW_PIXELS_SGIX 0x8360
#define GL_MAX_ASYNC_READ_PIXELS_SGIX 0x8361
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_BYTE_2_3_3_REV_EXT 0x8362
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_EXT 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_UNSIGNED_SHORT_5_6_5_REV_EXT 0x8364
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT 0x8365
#define GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG 0x8365
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT 0x8366
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_INT_8_8_8_8_REV_EXT 0x8367
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_UNSIGNED_INT_2_10_10_10_REV_EXT 0x8368
#define GL_TEXTURE_MAX_CLAMP_S_SGIX 0x8369
#define GL_TEXTURE_MAX_CLAMP_T_SGIX 0x836A
#define GL_TEXTURE_MAX_CLAMP_R_SGIX 0x836B
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MIRRORED_REPEAT_ARB 0x8370
#define GL_MIRRORED_REPEAT_IBM 0x8370
#define GL_MIRRORED_REPEAT_OES 0x8370
#define GL_RGB_S3TC 0x83A0
#define GL_RGB4_S3TC 0x83A1
#define GL_RGBA_S3TC 0x83A2
#define GL_RGBA4_S3TC 0x83A3
#define GL_RGBA_DXT5_S3TC 0x83A4
#define GL_RGBA4_DXT5_S3TC 0x83A5
#define GL_VERTEX_PRECLIP_SGIX 0x83EE
#define GL_VERTEX_PRECLIP_HINT_SGIX 0x83EF
#define GL_COMPRESSED_RGB_S3TC_DXT1_EXT 0x83F0
#define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT 0x83F1
#define GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE 0x83F2
#define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT 0x83F2
#define GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE 0x83F3
#define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT 0x83F3
#define GL_PARALLEL_ARRAYS_INTEL 0x83F4
#define GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL 0x83F5
#define GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL 0x83F6
#define GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL 0x83F7
#define GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL 0x83F8
#define GL_PERFQUERY_DONOT_FLUSH_INTEL 0x83F9
#define GL_PERFQUERY_FLUSH_INTEL 0x83FA
#define GL_PERFQUERY_WAIT_INTEL 0x83FB
#define GL_CONSERVATIVE_RASTERIZATION_INTEL 0x83FE
#define GL_TEXTURE_MEMORY_LAYOUT_INTEL 0x83FF
#define GL_FRAGMENT_LIGHTING_SGIX 0x8400
#define GL_FRAGMENT_COLOR_MATERIAL_SGIX 0x8401
#define GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX 0x8402
#define GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX 0x8403
#define GL_MAX_FRAGMENT_LIGHTS_SGIX 0x8404
#define GL_MAX_ACTIVE_LIGHTS_SGIX 0x8405
#define GL_CURRENT_RASTER_NORMAL_SGIX 0x8406
#define GL_LIGHT_ENV_MODE_SGIX 0x8407
#define GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX 0x8408
#define GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX 0x8409
#define GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX 0x840A
#define GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX 0x840B
#define GL_FRAGMENT_LIGHT0_SGIX 0x840C
#define GL_FRAGMENT_LIGHT1_SGIX 0x840D
#define GL_FRAGMENT_LIGHT2_SGIX 0x840E
#define GL_FRAGMENT_LIGHT3_SGIX 0x840F
#define GL_FRAGMENT_LIGHT4_SGIX 0x8410
#define GL_FRAGMENT_LIGHT5_SGIX 0x8411
#define GL_FRAGMENT_LIGHT6_SGIX 0x8412
#define GL_FRAGMENT_LIGHT7_SGIX 0x8413
#define GL_PACK_RESAMPLE_SGIX 0x842E
#define GL_UNPACK_RESAMPLE_SGIX 0x842F
#define GL_RESAMPLE_DECIMATE_SGIX 0x8430
#define GL_RESAMPLE_REPLICATE_SGIX 0x8433
#define GL_RESAMPLE_ZERO_FILL_SGIX 0x8434
#define GL_TANGENT_ARRAY_EXT 0x8439
#define GL_BINORMAL_ARRAY_EXT 0x843A
#define GL_CURRENT_TANGENT_EXT 0x843B
#define GL_CURRENT_BINORMAL_EXT 0x843C
#define GL_TANGENT_ARRAY_TYPE_EXT 0x843E
#define GL_TANGENT_ARRAY_STRIDE_EXT 0x843F
#define GL_BINORMAL_ARRAY_TYPE_EXT 0x8440
#define GL_BINORMAL_ARRAY_STRIDE_EXT 0x8441
#define GL_TANGENT_ARRAY_POINTER_EXT 0x8442
#define GL_BINORMAL_ARRAY_POINTER_EXT 0x8443
#define GL_MAP1_TANGENT_EXT 0x8444
#define GL_MAP2_TANGENT_EXT 0x8445
#define GL_MAP1_BINORMAL_EXT 0x8446
#define GL_MAP2_BINORMAL_EXT 0x8447
#define GL_NEAREST_CLIPMAP_NEAREST_SGIX 0x844D
#define GL_NEAREST_CLIPMAP_LINEAR_SGIX 0x844E
#define GL_LINEAR_CLIPMAP_NEAREST_SGIX 0x844F
#define GL_FOG_COORDINATE_SOURCE 0x8450
#define GL_FOG_COORDINATE_SOURCE_EXT 0x8450
#define GL_FOG_COORD_SRC 0x8450
#define GL_FOG_COORD 0x8451
#define GL_FOG_COORDINATE 0x8451
#define GL_FOG_COORDINATE_EXT 0x8451
#define GL_FRAGMENT_DEPTH 0x8452
#define GL_FRAGMENT_DEPTH_EXT 0x8452
#define GL_CURRENT_FOG_COORD 0x8453
#define GL_CURRENT_FOG_COORDINATE 0x8453
#define GL_CURRENT_FOG_COORDINATE_EXT 0x8453
#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
#define GL_FOG_COORDINATE_ARRAY_TYPE_EXT 0x8454
#define GL_FOG_COORD_ARRAY_TYPE 0x8454
#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
#define GL_FOG_COORDINATE_ARRAY_STRIDE_EXT 0x8455
#define GL_FOG_COORD_ARRAY_STRIDE 0x8455
#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
#define GL_FOG_COORDINATE_ARRAY_POINTER_EXT 0x8456
#define GL_FOG_COORD_ARRAY_POINTER 0x8456
#define GL_FOG_COORDINATE_ARRAY 0x8457
#define GL_FOG_COORDINATE_ARRAY_EXT 0x8457
#define GL_FOG_COORD_ARRAY 0x8457
#define GL_COLOR_SUM 0x8458
#define GL_COLOR_SUM_ARB 0x8458
#define GL_COLOR_SUM_EXT 0x8458
#define GL_CURRENT_SECONDARY_COLOR 0x8459
#define GL_CURRENT_SECONDARY_COLOR_EXT 0x8459
#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
#define GL_SECONDARY_COLOR_ARRAY_SIZE_EXT 0x845A
#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
#define GL_SECONDARY_COLOR_ARRAY_TYPE_EXT 0x845B
#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
#define GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT 0x845C
#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
#define GL_SECONDARY_COLOR_ARRAY_POINTER_EXT 0x845D
#define GL_SECONDARY_COLOR_ARRAY 0x845E
#define GL_SECONDARY_COLOR_ARRAY_EXT 0x845E
#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_SCREEN_COORDINATES_REND 0x8490
#define GL_INVERTED_SCREEN_W_REND 0x8491
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE0_ARB 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE1_ARB 0x84C1
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE2_ARB 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE3_ARB 0x84C3
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE4_ARB 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE5_ARB 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE6_ARB 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE7_ARB 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE8_ARB 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE9_ARB 0x84C9
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE10_ARB 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE11_ARB 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE12_ARB 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE13_ARB 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE14_ARB 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE15_ARB 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE16_ARB 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE17_ARB 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE18_ARB 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE19_ARB 0x84D3
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE20_ARB 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE21_ARB 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE22_ARB 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE23_ARB 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE24_ARB 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE25_ARB 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE26_ARB 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE27_ARB 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE28_ARB 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE29_ARB 0x84DD
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE30_ARB 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_TEXTURE31_ARB 0x84DF
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_ACTIVE_TEXTURE_ARB 0x84E0
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#define GL_CLIENT_ACTIVE_TEXTURE_ARB 0x84E1
#define GL_MAX_TEXTURE_UNITS 0x84E2
#define GL_MAX_TEXTURE_UNITS_ARB 0x84E2
#define GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV 0x84E3
#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
#define GL_TRANSPOSE_MODELVIEW_MATRIX_ARB 0x84E3
#define GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV 0x84E4
#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
#define GL_TRANSPOSE_PROJECTION_MATRIX_ARB 0x84E4
#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
#define GL_TRANSPOSE_TEXTURE_MATRIX_ARB 0x84E5
#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
#define GL_TRANSPOSE_COLOR_MATRIX_ARB 0x84E6
#define GL_SUBTRACT 0x84E7
#define GL_SUBTRACT_ARB 0x84E7
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_MAX_RENDERBUFFER_SIZE_EXT 0x84E8
#define GL_MAX_RENDERBUFFER_SIZE_OES 0x84E8
#define GL_COMPRESSED_ALPHA 0x84E9
#define GL_COMPRESSED_ALPHA_ARB 0x84E9
#define GL_COMPRESSED_LUMINANCE 0x84EA
#define GL_COMPRESSED_LUMINANCE_ARB 0x84EA
#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
#define GL_COMPRESSED_LUMINANCE_ALPHA_ARB 0x84EB
#define GL_COMPRESSED_INTENSITY 0x84EC
#define GL_COMPRESSED_INTENSITY_ARB 0x84EC
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGB_ARB 0x84ED
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_COMPRESSED_RGBA_ARB 0x84EE
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_COMPRESSION_HINT_ARB 0x84EF
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_ALL_COMPLETED_NV 0x84F2
#define GL_FENCE_STATUS_NV 0x84F3
#define GL_FENCE_CONDITION_NV 0x84F4
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_TEXTURE_RECTANGLE_ARB 0x84F5
#define GL_TEXTURE_RECTANGLE_NV 0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_TEXTURE_BINDING_RECTANGLE_ARB 0x84F6
#define GL_TEXTURE_BINDING_RECTANGLE_NV 0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_PROXY_TEXTURE_RECTANGLE_ARB 0x84F7
#define GL_PROXY_TEXTURE_RECTANGLE_NV 0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB 0x84F8
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_NV 0x84F8
#define GL_DEPTH_STENCIL 0x84F9
#define GL_DEPTH_STENCIL_EXT 0x84F9
#define GL_DEPTH_STENCIL_NV 0x84F9
#define GL_DEPTH_STENCIL_OES 0x84F9
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_UNSIGNED_INT_24_8_EXT 0x84FA
#define GL_UNSIGNED_INT_24_8_NV 0x84FA
#define GL_UNSIGNED_INT_24_8_OES 0x84FA
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_MAX_TEXTURE_LOD_BIAS_EXT 0x84FD
#define GL_TEXTURE_MAX_ANISOTROPY_EXT 0x84FE
#define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 0x84FF
#define GL_TEXTURE_FILTER_CONTROL 0x8500
#define GL_TEXTURE_FILTER_CONTROL_EXT 0x8500
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_TEXTURE_LOD_BIAS_EXT 0x8501
#define GL_MODELVIEW1_STACK_DEPTH_EXT 0x8502
#define GL_COMBINE4_NV 0x8503
#define GL_MAX_SHININESS_NV 0x8504
#define GL_MAX_SPOT_EXPONENT_NV 0x8505
#define GL_MODELVIEW1_MATRIX_EXT 0x8506
#define GL_INCR_WRAP 0x8507
#define GL_INCR_WRAP_EXT 0x8507
#define GL_INCR_WRAP_OES 0x8507
#define GL_DECR_WRAP 0x8508
#define GL_DECR_WRAP_EXT 0x8508
#define GL_DECR_WRAP_OES 0x8508
#define GL_VERTEX_WEIGHTING_EXT 0x8509
#define GL_MODELVIEW1_ARB 0x850A
#define GL_MODELVIEW1_EXT 0x850A
#define GL_CURRENT_VERTEX_WEIGHT_EXT 0x850B
#define GL_VERTEX_WEIGHT_ARRAY_EXT 0x850C
#define GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT 0x850D
#define GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT 0x850E
#define GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT 0x850F
#define GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT 0x8510
#define GL_NORMAL_MAP 0x8511
#define GL_NORMAL_MAP_ARB 0x8511
#define GL_NORMAL_MAP_EXT 0x8511
#define GL_NORMAL_MAP_NV 0x8511
#define GL_NORMAL_MAP_OES 0x8511
#define GL_REFLECTION_MAP 0x8512
#define GL_REFLECTION_MAP_ARB 0x8512
#define GL_REFLECTION_MAP_EXT 0x8512
#define GL_REFLECTION_MAP_NV 0x8512
#define GL_REFLECTION_MAP_OES 0x8512
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_CUBE_MAP_ARB 0x8513
#define GL_TEXTURE_CUBE_MAP_EXT 0x8513
#define GL_TEXTURE_CUBE_MAP_OES 0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_ARB 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_EXT 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_OES 0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB 0x8519
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT 0x8519
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB 0x851A
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT 0x851A
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES 0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_PROXY_TEXTURE_CUBE_MAP_ARB 0x851B
#define GL_PROXY_TEXTURE_CUBE_MAP_EXT 0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB 0x851C
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT 0x851C
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES 0x851C
#define GL_VERTEX_ARRAY_RANGE_APPLE 0x851D
#define GL_VERTEX_ARRAY_RANGE_NV 0x851D
#define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE 0x851E
#define GL_VERTEX_ARRAY_RANGE_LENGTH_NV 0x851E
#define GL_VERTEX_ARRAY_RANGE_VALID_NV 0x851F
#define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE 0x851F
#define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV 0x8520
#define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE 0x8521
#define GL_VERTEX_ARRAY_RANGE_POINTER_NV 0x8521
#define GL_REGISTER_COMBINERS_NV 0x8522
#define GL_VARIABLE_A_NV 0x8523
#define GL_VARIABLE_B_NV 0x8524
#define GL_VARIABLE_C_NV 0x8525
#define GL_VARIABLE_D_NV 0x8526
#define GL_VARIABLE_E_NV 0x8527
#define GL_VARIABLE_F_NV 0x8528
#define GL_VARIABLE_G_NV 0x8529
#define GL_CONSTANT_COLOR0_NV 0x852A
#define GL_CONSTANT_COLOR1_NV 0x852B
#define GL_PRIMARY_COLOR_NV 0x852C
#define GL_SECONDARY_COLOR_NV 0x852D
#define GL_SPARE0_NV 0x852E
#define GL_SPARE1_NV 0x852F
#define GL_DISCARD_NV 0x8530
#define GL_E_TIMES_F_NV 0x8531
#define GL_SPARE0_PLUS_SECONDARY_COLOR_NV 0x8532
#define GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV 0x8533
#define GL_MULTISAMPLE_FILTER_HINT_NV 0x8534
#define GL_PER_STAGE_CONSTANTS_NV 0x8535
#define GL_UNSIGNED_IDENTITY_NV 0x8536
#define GL_UNSIGNED_INVERT_NV 0x8537
#define GL_EXPAND_NORMAL_NV 0x8538
#define GL_EXPAND_NEGATE_NV 0x8539
#define GL_HALF_BIAS_NORMAL_NV 0x853A
#define GL_HALF_BIAS_NEGATE_NV 0x853B
#define GL_SIGNED_IDENTITY_NV 0x853C
#define GL_SIGNED_NEGATE_NV 0x853D
#define GL_SCALE_BY_TWO_NV 0x853E
#define GL_SCALE_BY_FOUR_NV 0x853F
#define GL_SCALE_BY_ONE_HALF_NV 0x8540
#define GL_BIAS_BY_NEGATIVE_ONE_HALF_NV 0x8541
#define GL_COMBINER_INPUT_NV 0x8542
#define GL_COMBINER_MAPPING_NV 0x8543
#define GL_COMBINER_COMPONENT_USAGE_NV 0x8544
#define GL_COMBINER_AB_DOT_PRODUCT_NV 0x8545
#define GL_COMBINER_CD_DOT_PRODUCT_NV 0x8546
#define GL_COMBINER_MUX_SUM_NV 0x8547
#define GL_COMBINER_SCALE_NV 0x8548
#define GL_COMBINER_BIAS_NV 0x8549
#define GL_COMBINER_AB_OUTPUT_NV 0x854A
#define GL_COMBINER_CD_OUTPUT_NV 0x854B
#define GL_COMBINER_SUM_OUTPUT_NV 0x854C
#define GL_MAX_GENERAL_COMBINERS_NV 0x854D
#define GL_NUM_GENERAL_COMBINERS_NV 0x854E
#define GL_COLOR_SUM_CLAMP_NV 0x854F
#define GL_COMBINER0_NV 0x8550
#define GL_COMBINER1_NV 0x8551
#define GL_COMBINER2_NV 0x8552
#define GL_COMBINER3_NV 0x8553
#define GL_COMBINER4_NV 0x8554
#define GL_COMBINER5_NV 0x8555
#define GL_COMBINER6_NV 0x8556
#define GL_COMBINER7_NV 0x8557
#define GL_PRIMITIVE_RESTART_NV 0x8558
#define GL_PRIMITIVE_RESTART_INDEX_NV 0x8559
#define GL_FOG_DISTANCE_MODE_NV 0x855A
#define GL_EYE_RADIAL_NV 0x855B
#define GL_EYE_PLANE_ABSOLUTE_NV 0x855C
#define GL_EMBOSS_LIGHT_NV 0x855D
#define GL_EMBOSS_CONSTANT_NV 0x855E
#define GL_EMBOSS_MAP_NV 0x855F
#define GL_RED_MIN_CLAMP_INGR 0x8560
#define GL_GREEN_MIN_CLAMP_INGR 0x8561
#define GL_BLUE_MIN_CLAMP_INGR 0x8562
#define GL_ALPHA_MIN_CLAMP_INGR 0x8563
#define GL_RED_MAX_CLAMP_INGR 0x8564
#define GL_GREEN_MAX_CLAMP_INGR 0x8565
#define GL_BLUE_MAX_CLAMP_INGR 0x8566
#define GL_ALPHA_MAX_CLAMP_INGR 0x8567
#define GL_INTERLACE_READ_INGR 0x8568
#define GL_COMBINE 0x8570
#define GL_COMBINE_ARB 0x8570
#define GL_COMBINE_EXT 0x8570
#define GL_COMBINE_RGB 0x8571
#define GL_COMBINE_RGB_ARB 0x8571
#define GL_COMBINE_RGB_EXT 0x8571
#define GL_COMBINE_ALPHA 0x8572
#define GL_COMBINE_ALPHA_ARB 0x8572
#define GL_COMBINE_ALPHA_EXT 0x8572
#define GL_RGB_SCALE 0x8573
#define GL_RGB_SCALE_ARB 0x8573
#define GL_RGB_SCALE_EXT 0x8573
#define GL_ADD_SIGNED 0x8574
#define GL_ADD_SIGNED_ARB 0x8574
#define GL_ADD_SIGNED_EXT 0x8574
#define GL_INTERPOLATE 0x8575
#define GL_INTERPOLATE_ARB 0x8575
#define GL_INTERPOLATE_EXT 0x8575
#define GL_CONSTANT 0x8576
#define GL_CONSTANT_ARB 0x8576
#define GL_CONSTANT_EXT 0x8576
#define GL_CONSTANT_NV 0x8576
#define GL_PRIMARY_COLOR 0x8577
#define GL_PRIMARY_COLOR_ARB 0x8577
#define GL_PRIMARY_COLOR_EXT 0x8577
#define GL_PREVIOUS 0x8578
#define GL_PREVIOUS_ARB 0x8578
#define GL_PREVIOUS_EXT 0x8578
#define GL_SOURCE0_RGB 0x8580
#define GL_SOURCE0_RGB_ARB 0x8580
#define GL_SOURCE0_RGB_EXT 0x8580
#define GL_SRC0_RGB 0x8580
#define GL_SOURCE1_RGB 0x8581
#define GL_SOURCE1_RGB_ARB 0x8581
#define GL_SOURCE1_RGB_EXT 0x8581
#define GL_SRC1_RGB 0x8581
#define GL_SOURCE2_RGB 0x8582
#define GL_SOURCE2_RGB_ARB 0x8582
#define GL_SOURCE2_RGB_EXT 0x8582
#define GL_SRC2_RGB 0x8582
#define GL_SOURCE3_RGB_NV 0x8583
#define GL_SOURCE0_ALPHA 0x8588
#define GL_SOURCE0_ALPHA_ARB 0x8588
#define GL_SOURCE0_ALPHA_EXT 0x8588
#define GL_SRC0_ALPHA 0x8588
#define GL_SOURCE1_ALPHA 0x8589
#define GL_SOURCE1_ALPHA_ARB 0x8589
#define GL_SOURCE1_ALPHA_EXT 0x8589
#define GL_SRC1_ALPHA 0x8589
#define GL_SRC1_ALPHA_EXT 0x8589
#define GL_SOURCE2_ALPHA 0x858A
#define GL_SOURCE2_ALPHA_ARB 0x858A
#define GL_SOURCE2_ALPHA_EXT 0x858A
#define GL_SRC2_ALPHA 0x858A
#define GL_SOURCE3_ALPHA_NV 0x858B
#define GL_OPERAND0_RGB 0x8590
#define GL_OPERAND0_RGB_ARB 0x8590
#define GL_OPERAND0_RGB_EXT 0x8590
#define GL_OPERAND1_RGB 0x8591
#define GL_OPERAND1_RGB_ARB 0x8591
#define GL_OPERAND1_RGB_EXT 0x8591
#define GL_OPERAND2_RGB 0x8592
#define GL_OPERAND2_RGB_ARB 0x8592
#define GL_OPERAND2_RGB_EXT 0x8592
#define GL_OPERAND3_RGB_NV 0x8593
#define GL_OPERAND0_ALPHA 0x8598
#define GL_OPERAND0_ALPHA_ARB 0x8598
#define GL_OPERAND0_ALPHA_EXT 0x8598
#define GL_OPERAND1_ALPHA 0x8599
#define GL_OPERAND1_ALPHA_ARB 0x8599
#define GL_OPERAND1_ALPHA_EXT 0x8599
#define GL_OPERAND2_ALPHA 0x859A
#define GL_OPERAND2_ALPHA_ARB 0x859A
#define GL_OPERAND2_ALPHA_EXT 0x859A
#define GL_OPERAND3_ALPHA_NV 0x859B
#define GL_PACK_SUBSAMPLE_RATE_SGIX 0x85A0
#define GL_UNPACK_SUBSAMPLE_RATE_SGIX 0x85A1
#define GL_PIXEL_SUBSAMPLE_4444_SGIX 0x85A2
#define GL_PIXEL_SUBSAMPLE_2424_SGIX 0x85A3
#define GL_PIXEL_SUBSAMPLE_4242_SGIX 0x85A4
#define GL_PERTURB_EXT 0x85AE
#define GL_TEXTURE_NORMAL_EXT 0x85AF
#define GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE 0x85B0
#define GL_TRANSFORM_HINT_APPLE 0x85B1
#define GL_UNPACK_CLIENT_STORAGE_APPLE 0x85B2
#define GL_BUFFER_OBJECT_APPLE 0x85B3
#define GL_STORAGE_CLIENT_APPLE 0x85B4
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_VERTEX_ARRAY_BINDING_APPLE 0x85B5
#define GL_VERTEX_ARRAY_BINDING_OES 0x85B5
#define GL_TEXTURE_RANGE_LENGTH_APPLE 0x85B7
#define GL_TEXTURE_RANGE_POINTER_APPLE 0x85B8
#define GL_YCBCR_422_APPLE 0x85B9
#define GL_UNSIGNED_SHORT_8_8_APPLE 0x85BA
#define GL_UNSIGNED_SHORT_8_8_MESA 0x85BA
#define GL_UNSIGNED_SHORT_8_8_REV_APPLE 0x85BB
#define GL_UNSIGNED_SHORT_8_8_REV_MESA 0x85BB
#define GL_TEXTURE_STORAGE_HINT_APPLE 0x85BC
#define GL_STORAGE_PRIVATE_APPLE 0x85BD
#define GL_STORAGE_CACHED_APPLE 0x85BE
#define GL_STORAGE_SHARED_APPLE 0x85BF
#define GL_REPLACEMENT_CODE_ARRAY_SUN 0x85C0
#define GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN 0x85C1
#define GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN 0x85C2
#define GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN 0x85C3
#define GL_R1UI_V3F_SUN 0x85C4
#define GL_R1UI_C4UB_V3F_SUN 0x85C5
#define GL_R1UI_C3F_V3F_SUN 0x85C6
#define GL_R1UI_N3F_V3F_SUN 0x85C7
#define GL_R1UI_C4F_N3F_V3F_SUN 0x85C8
#define GL_R1UI_T2F_V3F_SUN 0x85C9
#define GL_R1UI_T2F_N3F_V3F_SUN 0x85CA
#define GL_R1UI_T2F_C4F_N3F_V3F_SUN 0x85CB
#define GL_SLICE_ACCUM_SUN 0x85CC
#define GL_QUAD_MESH_SUN 0x8614
#define GL_TRIANGLE_MESH_SUN 0x8615
#define GL_VERTEX_PROGRAM_ARB 0x8620
#define GL_VERTEX_PROGRAM_NV 0x8620
#define GL_VERTEX_STATE_PROGRAM_NV 0x8621
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622
#define GL_ATTRIB_ARRAY_SIZE_NV 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB 0x8623
#define GL_ATTRIB_ARRAY_STRIDE_NV 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624
#define GL_ATTRIB_ARRAY_TYPE_NV 0x8625
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB 0x8625
#define GL_CURRENT_ATTRIB_NV 0x8626
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_CURRENT_VERTEX_ATTRIB_ARB 0x8626
#define GL_PROGRAM_LENGTH_ARB 0x8627
#define GL_PROGRAM_LENGTH_NV 0x8627
#define GL_PROGRAM_STRING_ARB 0x8628
#define GL_PROGRAM_STRING_NV 0x8628
#define GL_MODELVIEW_PROJECTION_NV 0x8629
#define GL_IDENTITY_NV 0x862A
#define GL_INVERSE_NV 0x862B
#define GL_TRANSPOSE_NV 0x862C
#define GL_INVERSE_TRANSPOSE_NV 0x862D
#define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E
#define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV 0x862E
#define GL_MAX_PROGRAM_MATRICES_ARB 0x862F
#define GL_MAX_TRACK_MATRICES_NV 0x862F
#define GL_MATRIX0_NV 0x8630
#define GL_MATRIX1_NV 0x8631
#define GL_MATRIX2_NV 0x8632
#define GL_MATRIX3_NV 0x8633
#define GL_MATRIX4_NV 0x8634
#define GL_MATRIX5_NV 0x8635
#define GL_MATRIX6_NV 0x8636
#define GL_MATRIX7_NV 0x8637
#define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640
#define GL_CURRENT_MATRIX_STACK_DEPTH_NV 0x8640
#define GL_CURRENT_MATRIX_ARB 0x8641
#define GL_CURRENT_MATRIX_NV 0x8641
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_PROGRAM_POINT_SIZE_EXT 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE_NV 0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
#define GL_VERTEX_PROGRAM_TWO_SIDE_ARB 0x8643
#define GL_VERTEX_PROGRAM_TWO_SIDE_NV 0x8643
#define GL_PROGRAM_PARAMETER_NV 0x8644
#define GL_ATTRIB_ARRAY_POINTER_NV 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645
#define GL_PROGRAM_TARGET_NV 0x8646
#define GL_PROGRAM_RESIDENT_NV 0x8647
#define GL_TRACK_MATRIX_NV 0x8648
#define GL_TRACK_MATRIX_TRANSFORM_NV 0x8649
#define GL_VERTEX_PROGRAM_BINDING_NV 0x864A
#define GL_PROGRAM_ERROR_POSITION_ARB 0x864B
#define GL_PROGRAM_ERROR_POSITION_NV 0x864B
#define GL_OFFSET_TEXTURE_RECTANGLE_NV 0x864C
#define GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV 0x864D
#define GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV 0x864E
#define GL_DEPTH_CLAMP 0x864F
#define GL_DEPTH_CLAMP_NV 0x864F
#define GL_VERTEX_ATTRIB_ARRAY0_NV 0x8650
#define GL_VERTEX_ATTRIB_ARRAY1_NV 0x8651
#define GL_VERTEX_ATTRIB_ARRAY2_NV 0x8652
#define GL_VERTEX_ATTRIB_ARRAY3_NV 0x8653
#define GL_VERTEX_ATTRIB_ARRAY4_NV 0x8654
#define GL_VERTEX_ATTRIB_ARRAY5_NV 0x8655
#define GL_VERTEX_ATTRIB_ARRAY6_NV 0x8656
#define GL_VERTEX_ATTRIB_ARRAY7_NV 0x8657
#define GL_VERTEX_ATTRIB_ARRAY8_NV 0x8658
#define GL_VERTEX_ATTRIB_ARRAY9_NV 0x8659
#define GL_VERTEX_ATTRIB_ARRAY10_NV 0x865A
#define GL_VERTEX_ATTRIB_ARRAY11_NV 0x865B
#define GL_VERTEX_ATTRIB_ARRAY12_NV 0x865C
#define GL_VERTEX_ATTRIB_ARRAY13_NV 0x865D
#define GL_VERTEX_ATTRIB_ARRAY14_NV 0x865E
#define GL_VERTEX_ATTRIB_ARRAY15_NV 0x865F
#define GL_MAP1_VERTEX_ATTRIB0_4_NV 0x8660
#define GL_MAP1_VERTEX_ATTRIB1_4_NV 0x8661
#define GL_MAP1_VERTEX_ATTRIB2_4_NV 0x8662
#define GL_MAP1_VERTEX_ATTRIB3_4_NV 0x8663
#define GL_MAP1_VERTEX_ATTRIB4_4_NV 0x8664
#define GL_MAP1_VERTEX_ATTRIB5_4_NV 0x8665
#define GL_MAP1_VERTEX_ATTRIB6_4_NV 0x8666
#define GL_MAP1_VERTEX_ATTRIB7_4_NV 0x8667
#define GL_MAP1_VERTEX_ATTRIB8_4_NV 0x8668
#define GL_MAP1_VERTEX_ATTRIB9_4_NV 0x8669
#define GL_MAP1_VERTEX_ATTRIB10_4_NV 0x866A
#define GL_MAP1_VERTEX_ATTRIB11_4_NV 0x866B
#define GL_MAP1_VERTEX_ATTRIB12_4_NV 0x866C
#define GL_MAP1_VERTEX_ATTRIB13_4_NV 0x866D
#define GL_MAP1_VERTEX_ATTRIB14_4_NV 0x866E
#define GL_MAP1_VERTEX_ATTRIB15_4_NV 0x866F
#define GL_MAP2_VERTEX_ATTRIB0_4_NV 0x8670
#define GL_MAP2_VERTEX_ATTRIB1_4_NV 0x8671
#define GL_MAP2_VERTEX_ATTRIB2_4_NV 0x8672
#define GL_MAP2_VERTEX_ATTRIB3_4_NV 0x8673
#define GL_MAP2_VERTEX_ATTRIB4_4_NV 0x8674
#define GL_MAP2_VERTEX_ATTRIB5_4_NV 0x8675
#define GL_MAP2_VERTEX_ATTRIB6_4_NV 0x8676
#define GL_MAP2_VERTEX_ATTRIB7_4_NV 0x8677
#define GL_PROGRAM_BINDING_ARB 0x8677
#define GL_MAP2_VERTEX_ATTRIB8_4_NV 0x8678
#define GL_MAP2_VERTEX_ATTRIB9_4_NV 0x8679
#define GL_MAP2_VERTEX_ATTRIB10_4_NV 0x867A
#define GL_MAP2_VERTEX_ATTRIB11_4_NV 0x867B
#define GL_MAP2_VERTEX_ATTRIB12_4_NV 0x867C
#define GL_MAP2_VERTEX_ATTRIB13_4_NV 0x867D
#define GL_MAP2_VERTEX_ATTRIB14_4_NV 0x867E
#define GL_MAP2_VERTEX_ATTRIB15_4_NV 0x867F
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB 0x86A0
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_TEXTURE_COMPRESSED_ARB 0x86A1
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A3
#define GL_MAX_VERTEX_UNITS_ARB 0x86A4
#define GL_MAX_VERTEX_UNITS_OES 0x86A4
#define GL_ACTIVE_VERTEX_UNITS_ARB 0x86A5
#define GL_WEIGHT_SUM_UNITY_ARB 0x86A6
#define GL_VERTEX_BLEND_ARB 0x86A7
#define GL_CURRENT_WEIGHT_ARB 0x86A8
#define GL_WEIGHT_ARRAY_TYPE_ARB 0x86A9
#define GL_WEIGHT_ARRAY_TYPE_OES 0x86A9
#define GL_WEIGHT_ARRAY_STRIDE_ARB 0x86AA
#define GL_WEIGHT_ARRAY_STRIDE_OES 0x86AA
#define GL_WEIGHT_ARRAY_SIZE_ARB 0x86AB
#define GL_WEIGHT_ARRAY_SIZE_OES 0x86AB
#define GL_WEIGHT_ARRAY_POINTER_ARB 0x86AC
#define GL_WEIGHT_ARRAY_POINTER_OES 0x86AC
#define GL_WEIGHT_ARRAY_ARB 0x86AD
#define GL_WEIGHT_ARRAY_OES 0x86AD
#define GL_DOT3_RGB 0x86AE
#define GL_DOT3_RGB_ARB 0x86AE
#define GL_DOT3_RGBA 0x86AF
#define GL_DOT3_RGBA_ARB 0x86AF
#define GL_DOT3_RGBA_IMG 0x86AF
#define GL_COMPRESSED_RGB_FXT1_3DFX 0x86B0
#define GL_COMPRESSED_RGBA_FXT1_3DFX 0x86B1
#define GL_MULTISAMPLE_3DFX 0x86B2
#define GL_SAMPLE_BUFFERS_3DFX 0x86B3
#define GL_SAMPLES_3DFX 0x86B4
#define GL_EVAL_2D_NV 0x86C0
#define GL_EVAL_TRIANGULAR_2D_NV 0x86C1
#define GL_MAP_TESSELLATION_NV 0x86C2
#define GL_MAP_ATTRIB_U_ORDER_NV 0x86C3
#define GL_MAP_ATTRIB_V_ORDER_NV 0x86C4
#define GL_EVAL_FRACTIONAL_TESSELLATION_NV 0x86C5
#define GL_EVAL_VERTEX_ATTRIB0_NV 0x86C6
#define GL_EVAL_VERTEX_ATTRIB1_NV 0x86C7
#define GL_EVAL_VERTEX_ATTRIB2_NV 0x86C8
#define GL_EVAL_VERTEX_ATTRIB3_NV 0x86C9
#define GL_EVAL_VERTEX_ATTRIB4_NV 0x86CA
#define GL_EVAL_VERTEX_ATTRIB5_NV 0x86CB
#define GL_EVAL_VERTEX_ATTRIB6_NV 0x86CC
#define GL_EVAL_VERTEX_ATTRIB7_NV 0x86CD
#define GL_EVAL_VERTEX_ATTRIB8_NV 0x86CE
#define GL_EVAL_VERTEX_ATTRIB9_NV 0x86CF
#define GL_EVAL_VERTEX_ATTRIB10_NV 0x86D0
#define GL_EVAL_VERTEX_ATTRIB11_NV 0x86D1
#define GL_EVAL_VERTEX_ATTRIB12_NV 0x86D2
#define GL_EVAL_VERTEX_ATTRIB13_NV 0x86D3
#define GL_EVAL_VERTEX_ATTRIB14_NV 0x86D4
#define GL_EVAL_VERTEX_ATTRIB15_NV 0x86D5
#define GL_MAX_MAP_TESSELLATION_NV 0x86D6
#define GL_MAX_RATIONAL_EVAL_ORDER_NV 0x86D7
#define GL_MAX_PROGRAM_PATCH_ATTRIBS_NV 0x86D8
#define GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV 0x86D9
#define GL_UNSIGNED_INT_S8_S8_8_8_NV 0x86DA
#define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV 0x86DB
#define GL_DSDT_MAG_INTENSITY_NV 0x86DC
#define GL_SHADER_CONSISTENT_NV 0x86DD
#define GL_TEXTURE_SHADER_NV 0x86DE
#define GL_SHADER_OPERATION_NV 0x86DF
#define GL_CULL_MODES_NV 0x86E0
#define GL_OFFSET_TEXTURE_2D_MATRIX_NV 0x86E1
#define GL_OFFSET_TEXTURE_MATRIX_NV 0x86E1
#define GL_OFFSET_TEXTURE_2D_SCALE_NV 0x86E2
#define GL_OFFSET_TEXTURE_SCALE_NV 0x86E2
#define GL_OFFSET_TEXTURE_2D_BIAS_NV 0x86E3
#define GL_OFFSET_TEXTURE_BIAS_NV 0x86E3
#define GL_PREVIOUS_TEXTURE_INPUT_NV 0x86E4
#define GL_CONST_EYE_NV 0x86E5
#define GL_PASS_THROUGH_NV 0x86E6
#define GL_CULL_FRAGMENT_NV 0x86E7
#define GL_OFFSET_TEXTURE_2D_NV 0x86E8
#define GL_DEPENDENT_AR_TEXTURE_2D_NV 0x86E9
#define GL_DEPENDENT_GB_TEXTURE_2D_NV 0x86EA
#define GL_SURFACE_STATE_NV 0x86EB
#define GL_DOT_PRODUCT_NV 0x86EC
#define GL_DOT_PRODUCT_DEPTH_REPLACE_NV 0x86ED
#define GL_DOT_PRODUCT_TEXTURE_2D_NV 0x86EE
#define GL_DOT_PRODUCT_TEXTURE_3D_NV 0x86EF
#define GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV 0x86F0
#define GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV 0x86F1
#define GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV 0x86F2
#define GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV 0x86F3
#define GL_HILO_NV 0x86F4
#define GL_DSDT_NV 0x86F5
#define GL_DSDT_MAG_NV 0x86F6
#define GL_DSDT_MAG_VIB_NV 0x86F7
#define GL_HILO16_NV 0x86F8
#define GL_SIGNED_HILO_NV 0x86F9
#define GL_SIGNED_HILO16_NV 0x86FA
#define GL_SIGNED_RGBA_NV 0x86FB
#define GL_SIGNED_RGBA8_NV 0x86FC
#define GL_SURFACE_REGISTERED_NV 0x86FD
#define GL_SIGNED_RGB_NV 0x86FE
#define GL_SIGNED_RGB8_NV 0x86FF
#define GL_SURFACE_MAPPED_NV 0x8700
#define GL_SIGNED_LUMINANCE_NV 0x8701
#define GL_SIGNED_LUMINANCE8_NV 0x8702
#define GL_SIGNED_LUMINANCE_ALPHA_NV 0x8703
#define GL_SIGNED_LUMINANCE8_ALPHA8_NV 0x8704
#define GL_SIGNED_ALPHA_NV 0x8705
#define GL_SIGNED_ALPHA8_NV 0x8706
#define GL_SIGNED_INTENSITY_NV 0x8707
#define GL_SIGNED_INTENSITY8_NV 0x8708
#define GL_DSDT8_NV 0x8709
#define GL_DSDT8_MAG8_NV 0x870A
#define GL_DSDT8_MAG8_INTENSITY8_NV 0x870B
#define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV 0x870C
#define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV 0x870D
#define GL_HI_SCALE_NV 0x870E
#define GL_LO_SCALE_NV 0x870F
#define GL_DS_SCALE_NV 0x8710
#define GL_DT_SCALE_NV 0x8711
#define GL_MAGNITUDE_SCALE_NV 0x8712
#define GL_VIBRANCE_SCALE_NV 0x8713
#define GL_HI_BIAS_NV 0x8714
#define GL_LO_BIAS_NV 0x8715
#define GL_DS_BIAS_NV 0x8716
#define GL_DT_BIAS_NV 0x8717
#define GL_MAGNITUDE_BIAS_NV 0x8718
#define GL_VIBRANCE_BIAS_NV 0x8719
#define GL_TEXTURE_BORDER_VALUES_NV 0x871A
#define GL_TEXTURE_HI_SIZE_NV 0x871B
#define GL_TEXTURE_LO_SIZE_NV 0x871C
#define GL_TEXTURE_DS_SIZE_NV 0x871D
#define GL_TEXTURE_DT_SIZE_NV 0x871E
#define GL_TEXTURE_MAG_SIZE_NV 0x871F
#define GL_MODELVIEW2_ARB 0x8722
#define GL_MODELVIEW3_ARB 0x8723
#define GL_MODELVIEW4_ARB 0x8724
#define GL_MODELVIEW5_ARB 0x8725
#define GL_MODELVIEW6_ARB 0x8726
#define GL_MODELVIEW7_ARB 0x8727
#define GL_MODELVIEW8_ARB 0x8728
#define GL_MODELVIEW9_ARB 0x8729
#define GL_MODELVIEW10_ARB 0x872A
#define GL_MODELVIEW11_ARB 0x872B
#define GL_MODELVIEW12_ARB 0x872C
#define GL_MODELVIEW13_ARB 0x872D
#define GL_MODELVIEW14_ARB 0x872E
#define GL_MODELVIEW15_ARB 0x872F
#define GL_MODELVIEW16_ARB 0x8730
#define GL_MODELVIEW17_ARB 0x8731
#define GL_MODELVIEW18_ARB 0x8732
#define GL_MODELVIEW19_ARB 0x8733
#define GL_MODELVIEW20_ARB 0x8734
#define GL_MODELVIEW21_ARB 0x8735
#define GL_MODELVIEW22_ARB 0x8736
#define GL_MODELVIEW23_ARB 0x8737
#define GL_MODELVIEW24_ARB 0x8738
#define GL_MODELVIEW25_ARB 0x8739
#define GL_MODELVIEW26_ARB 0x873A
#define GL_MODELVIEW27_ARB 0x873B
#define GL_MODELVIEW28_ARB 0x873C
#define GL_MODELVIEW29_ARB 0x873D
#define GL_MODELVIEW30_ARB 0x873E
#define GL_MODELVIEW31_ARB 0x873F
#define GL_DOT3_RGB_EXT 0x8740
#define GL_Z400_BINARY_AMD 0x8740
#define GL_DOT3_RGBA_EXT 0x8741
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_PROGRAM_BINARY_LENGTH_OES 0x8741
#define GL_MIRROR_CLAMP_ATI 0x8742
#define GL_MIRROR_CLAMP_EXT 0x8742
#define GL_MIRROR_CLAMP_TO_EDGE 0x8743
#define GL_MIRROR_CLAMP_TO_EDGE_ATI 0x8743
#define GL_MIRROR_CLAMP_TO_EDGE_EXT 0x8743
#define GL_MODULATE_ADD_ATI 0x8744
#define GL_MODULATE_SIGNED_ADD_ATI 0x8745
#define GL_MODULATE_SUBTRACT_ATI 0x8746
#define GL_SET_AMD 0x874A
#define GL_REPLACE_VALUE_AMD 0x874B
#define GL_STENCIL_OP_VALUE_AMD 0x874C
#define GL_STENCIL_BACK_OP_VALUE_AMD 0x874D
#define GL_VERTEX_ATTRIB_ARRAY_LONG 0x874E
#define GL_OCCLUSION_QUERY_EVENT_MASK_AMD 0x874F
#define GL_DEPTH_STENCIL_MESA 0x8750
#define GL_UNSIGNED_INT_24_8_MESA 0x8751
#define GL_UNSIGNED_INT_8_24_REV_MESA 0x8752
#define GL_UNSIGNED_SHORT_15_1_MESA 0x8753
#define GL_UNSIGNED_SHORT_1_15_REV_MESA 0x8754
#define GL_TRACE_MASK_MESA 0x8755
#define GL_TRACE_NAME_MESA 0x8756
#define GL_YCBCR_MESA 0x8757
#define GL_PACK_INVERT_MESA 0x8758
#define GL_DEBUG_OBJECT_MESA 0x8759
#define GL_TEXTURE_1D_STACK_MESAX 0x8759
#define GL_DEBUG_PRINT_MESA 0x875A
#define GL_TEXTURE_2D_STACK_MESAX 0x875A
#define GL_DEBUG_ASSERT_MESA 0x875B
#define GL_PROXY_TEXTURE_1D_STACK_MESAX 0x875B
#define GL_PROXY_TEXTURE_2D_STACK_MESAX 0x875C
#define GL_TEXTURE_1D_STACK_BINDING_MESAX 0x875D
#define GL_TEXTURE_2D_STACK_BINDING_MESAX 0x875E
#define GL_STATIC_ATI 0x8760
#define GL_DYNAMIC_ATI 0x8761
#define GL_PRESERVE_ATI 0x8762
#define GL_DISCARD_ATI 0x8763
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_SIZE_ARB 0x8764
#define GL_OBJECT_BUFFER_SIZE_ATI 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_BUFFER_USAGE_ARB 0x8765
#define GL_OBJECT_BUFFER_USAGE_ATI 0x8765
#define GL_ARRAY_OBJECT_BUFFER_ATI 0x8766
#define GL_ARRAY_OBJECT_OFFSET_ATI 0x8767
#define GL_ELEMENT_ARRAY_ATI 0x8768
#define GL_ELEMENT_ARRAY_TYPE_ATI 0x8769
#define GL_ELEMENT_ARRAY_POINTER_ATI 0x876A
#define GL_MAX_VERTEX_STREAMS_ATI 0x876B
#define GL_VERTEX_STREAM0_ATI 0x876C
#define GL_VERTEX_STREAM1_ATI 0x876D
#define GL_VERTEX_STREAM2_ATI 0x876E
#define GL_VERTEX_STREAM3_ATI 0x876F
#define GL_VERTEX_STREAM4_ATI 0x8770
#define GL_VERTEX_STREAM5_ATI 0x8771
#define GL_VERTEX_STREAM6_ATI 0x8772
#define GL_VERTEX_STREAM7_ATI 0x8773
#define GL_VERTEX_SOURCE_ATI 0x8774
#define GL_BUMP_ROT_MATRIX_ATI 0x8775
#define GL_BUMP_ROT_MATRIX_SIZE_ATI 0x8776
#define GL_BUMP_NUM_TEX_UNITS_ATI 0x8777
#define GL_BUMP_TEX_UNITS_ATI 0x8778
#define GL_DUDV_ATI 0x8779
#define GL_DU8DV8_ATI 0x877A
#define GL_BUMP_ENVMAP_ATI 0x877B
#define GL_BUMP_TARGET_ATI 0x877C
#define GL_VERTEX_SHADER_EXT 0x8780
#define GL_VERTEX_SHADER_BINDING_EXT 0x8781
#define GL_OP_INDEX_EXT 0x8782
#define GL_OP_NEGATE_EXT 0x8783
#define GL_OP_DOT3_EXT 0x8784
#define GL_OP_DOT4_EXT 0x8785
#define GL_OP_MUL_EXT 0x8786
#define GL_OP_ADD_EXT 0x8787
#define GL_OP_MADD_EXT 0x8788
#define GL_OP_FRAC_EXT 0x8789
#define GL_OP_MAX_EXT 0x878A
#define GL_OP_MIN_EXT 0x878B
#define GL_OP_SET_GE_EXT 0x878C
#define GL_OP_SET_LT_EXT 0x878D
#define GL_OP_CLAMP_EXT 0x878E
#define GL_OP_FLOOR_EXT 0x878F
#define GL_OP_ROUND_EXT 0x8790
#define GL_OP_EXP_BASE_2_EXT 0x8791
#define GL_OP_LOG_BASE_2_EXT 0x8792
#define GL_OP_POWER_EXT 0x8793
#define GL_OP_RECIP_EXT 0x8794
#define GL_OP_RECIP_SQRT_EXT 0x8795
#define GL_OP_SUB_EXT 0x8796
#define GL_OP_CROSS_PRODUCT_EXT 0x8797
#define GL_OP_MULTIPLY_MATRIX_EXT 0x8798
#define GL_OP_MOV_EXT 0x8799
#define GL_OUTPUT_VERTEX_EXT 0x879A
#define GL_OUTPUT_COLOR0_EXT 0x879B
#define GL_OUTPUT_COLOR1_EXT 0x879C
#define GL_OUTPUT_TEXTURE_COORD0_EXT 0x879D
#define GL_OUTPUT_TEXTURE_COORD1_EXT 0x879E
#define GL_OUTPUT_TEXTURE_COORD2_EXT 0x879F
#define GL_OUTPUT_TEXTURE_COORD3_EXT 0x87A0
#define GL_OUTPUT_TEXTURE_COORD4_EXT 0x87A1
#define GL_OUTPUT_TEXTURE_COORD5_EXT 0x87A2
#define GL_OUTPUT_TEXTURE_COORD6_EXT 0x87A3
#define GL_OUTPUT_TEXTURE_COORD7_EXT 0x87A4
#define GL_OUTPUT_TEXTURE_COORD8_EXT 0x87A5
#define GL_OUTPUT_TEXTURE_COORD9_EXT 0x87A6
#define GL_OUTPUT_TEXTURE_COORD10_EXT 0x87A7
#define GL_OUTPUT_TEXTURE_COORD11_EXT 0x87A8
#define GL_OUTPUT_TEXTURE_COORD12_EXT 0x87A9
#define GL_OUTPUT_TEXTURE_COORD13_EXT 0x87AA
#define GL_OUTPUT_TEXTURE_COORD14_EXT 0x87AB
#define GL_OUTPUT_TEXTURE_COORD15_EXT 0x87AC
#define GL_OUTPUT_TEXTURE_COORD16_EXT 0x87AD
#define GL_OUTPUT_TEXTURE_COORD17_EXT 0x87AE
#define GL_OUTPUT_TEXTURE_COORD18_EXT 0x87AF
#define GL_OUTPUT_TEXTURE_COORD19_EXT 0x87B0
#define GL_OUTPUT_TEXTURE_COORD20_EXT 0x87B1
#define GL_OUTPUT_TEXTURE_COORD21_EXT 0x87B2
#define GL_OUTPUT_TEXTURE_COORD22_EXT 0x87B3
#define GL_OUTPUT_TEXTURE_COORD23_EXT 0x87B4
#define GL_OUTPUT_TEXTURE_COORD24_EXT 0x87B5
#define GL_OUTPUT_TEXTURE_COORD25_EXT 0x87B6
#define GL_OUTPUT_TEXTURE_COORD26_EXT 0x87B7
#define GL_OUTPUT_TEXTURE_COORD27_EXT 0x87B8
#define GL_OUTPUT_TEXTURE_COORD28_EXT 0x87B9
#define GL_OUTPUT_TEXTURE_COORD29_EXT 0x87BA
#define GL_OUTPUT_TEXTURE_COORD30_EXT 0x87BB
#define GL_OUTPUT_TEXTURE_COORD31_EXT 0x87BC
#define GL_OUTPUT_FOG_EXT 0x87BD
#define GL_SCALAR_EXT 0x87BE
#define GL_VECTOR_EXT 0x87BF
#define GL_MATRIX_EXT 0x87C0
#define GL_VARIANT_EXT 0x87C1
#define GL_INVARIANT_EXT 0x87C2
#define GL_LOCAL_CONSTANT_EXT 0x87C3
#define GL_LOCAL_EXT 0x87C4
#define GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87C5
#define GL_MAX_VERTEX_SHADER_VARIANTS_EXT 0x87C6
#define GL_MAX_VERTEX_SHADER_INVARIANTS_EXT 0x87C7
#define GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87C8
#define GL_MAX_VERTEX_SHADER_LOCALS_EXT 0x87C9
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CA
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT 0x87CB
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87CC
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT 0x87CD
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT 0x87CE
#define GL_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CF
#define GL_VERTEX_SHADER_VARIANTS_EXT 0x87D0
#define GL_VERTEX_SHADER_INVARIANTS_EXT 0x87D1
#define GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87D2
#define GL_VERTEX_SHADER_LOCALS_EXT 0x87D3
#define GL_VERTEX_SHADER_OPTIMIZED_EXT 0x87D4
#define GL_X_EXT 0x87D5
#define GL_Y_EXT 0x87D6
#define GL_Z_EXT 0x87D7
#define GL_W_EXT 0x87D8
#define GL_NEGATIVE_X_EXT 0x87D9
#define GL_NEGATIVE_Y_EXT 0x87DA
#define GL_NEGATIVE_Z_EXT 0x87DB
#define GL_NEGATIVE_W_EXT 0x87DC
#define GL_ZERO_EXT 0x87DD
#define GL_ONE_EXT 0x87DE
#define GL_NEGATIVE_ONE_EXT 0x87DF
#define GL_NORMALIZED_RANGE_EXT 0x87E0
#define GL_FULL_RANGE_EXT 0x87E1
#define GL_CURRENT_VERTEX_EXT 0x87E2
#define GL_MVP_MATRIX_EXT 0x87E3
#define GL_VARIANT_VALUE_EXT 0x87E4
#define GL_VARIANT_DATATYPE_EXT 0x87E5
#define GL_VARIANT_ARRAY_STRIDE_EXT 0x87E6
#define GL_VARIANT_ARRAY_TYPE_EXT 0x87E7
#define GL_VARIANT_ARRAY_EXT 0x87E8
#define GL_VARIANT_ARRAY_POINTER_EXT 0x87E9
#define GL_INVARIANT_VALUE_EXT 0x87EA
#define GL_INVARIANT_DATATYPE_EXT 0x87EB
#define GL_LOCAL_CONSTANT_VALUE_EXT 0x87EC
#define GL_LOCAL_CONSTANT_DATATYPE_EXT 0x87ED
#define GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD 0x87EE
#define GL_PN_TRIANGLES_ATI 0x87F0
#define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F1
#define GL_PN_TRIANGLES_POINT_MODE_ATI 0x87F2
#define GL_PN_TRIANGLES_NORMAL_MODE_ATI 0x87F3
#define GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F4
#define GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI 0x87F5
#define GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI 0x87F6
#define GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI 0x87F7
#define GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI 0x87F8
#define GL_3DC_X_AMD 0x87F9
#define GL_3DC_XY_AMD 0x87FA
#define GL_VBO_FREE_MEMORY_ATI 0x87FB
#define GL_TEXTURE_FREE_MEMORY_ATI 0x87FC
#define GL_RENDERBUFFER_FREE_MEMORY_ATI 0x87FD
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_NUM_PROGRAM_BINARY_FORMATS_OES 0x87FE
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_PROGRAM_BINARY_FORMATS_OES 0x87FF
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_FUNC_ATI 0x8800
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_FAIL_ATI 0x8801
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI 0x8803
#define GL_FRAGMENT_PROGRAM_ARB 0x8804
#define GL_PROGRAM_ALU_INSTRUCTIONS_ARB 0x8805
#define GL_PROGRAM_TEX_INSTRUCTIONS_ARB 0x8806
#define GL_PROGRAM_TEX_INDIRECTIONS_ARB 0x8807
#define GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x8808
#define GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x8809
#define GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x880A
#define GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB 0x880B
#define GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB 0x880C
#define GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB 0x880D
#define GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x880E
#define GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x880F
#define GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x8810
#define GL_RGBA32F 0x8814
#define GL_RGBA32F_ARB 0x8814
#define GL_RGBA32F_EXT 0x8814
#define GL_RGBA_FLOAT32_APPLE 0x8814
#define GL_RGBA_FLOAT32_ATI 0x8814
#define GL_RGB32F 0x8815
#define GL_RGB32F_ARB 0x8815
#define GL_RGB32F_EXT 0x8815
#define GL_RGB_FLOAT32_APPLE 0x8815
#define GL_RGB_FLOAT32_ATI 0x8815
#define GL_ALPHA32F_ARB 0x8816
#define GL_ALPHA32F_EXT 0x8816
#define GL_ALPHA_FLOAT32_APPLE 0x8816
#define GL_ALPHA_FLOAT32_ATI 0x8816
#define GL_INTENSITY32F_ARB 0x8817
#define GL_INTENSITY_FLOAT32_APPLE 0x8817
#define GL_INTENSITY_FLOAT32_ATI 0x8817
#define GL_LUMINANCE32F_ARB 0x8818
#define GL_LUMINANCE32F_EXT 0x8818
#define GL_LUMINANCE_FLOAT32_APPLE 0x8818
#define GL_LUMINANCE_FLOAT32_ATI 0x8818
#define GL_LUMINANCE_ALPHA32F_ARB 0x8819
#define GL_LUMINANCE_ALPHA32F_EXT 0x8819
#define GL_LUMINANCE_ALPHA_FLOAT32_APPLE 0x8819
#define GL_LUMINANCE_ALPHA_FLOAT32_ATI 0x8819
#define GL_RGBA16F 0x881A
#define GL_RGBA16F_ARB 0x881A
#define GL_RGBA16F_EXT 0x881A
#define GL_RGBA_FLOAT16_APPLE 0x881A
#define GL_RGBA_FLOAT16_ATI 0x881A
#define GL_RGB16F 0x881B
#define GL_RGB16F_ARB 0x881B
#define GL_RGB16F_EXT 0x881B
#define GL_RGB_FLOAT16_APPLE 0x881B
#define GL_RGB_FLOAT16_ATI 0x881B
#define GL_ALPHA16F_ARB 0x881C
#define GL_ALPHA16F_EXT 0x881C
#define GL_ALPHA_FLOAT16_APPLE 0x881C
#define GL_ALPHA_FLOAT16_ATI 0x881C
#define GL_INTENSITY16F_ARB 0x881D
#define GL_INTENSITY_FLOAT16_APPLE 0x881D
#define GL_INTENSITY_FLOAT16_ATI 0x881D
#define GL_LUMINANCE16F_ARB 0x881E
#define GL_LUMINANCE16F_EXT 0x881E
#define GL_LUMINANCE_FLOAT16_APPLE 0x881E
#define GL_LUMINANCE_FLOAT16_ATI 0x881E
#define GL_LUMINANCE_ALPHA16F_ARB 0x881F
#define GL_LUMINANCE_ALPHA16F_EXT 0x881F
#define GL_LUMINANCE_ALPHA_FLOAT16_APPLE 0x881F
#define GL_LUMINANCE_ALPHA_FLOAT16_ATI 0x881F
#define GL_RGBA_FLOAT_MODE_ARB 0x8820
#define GL_RGBA_FLOAT_MODE_ATI 0x8820
#define GL_WRITEONLY_RENDERING_QCOM 0x8823
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_MAX_DRAW_BUFFERS_ARB 0x8824
#define GL_MAX_DRAW_BUFFERS_ATI 0x8824
#define GL_MAX_DRAW_BUFFERS_EXT 0x8824
#define GL_MAX_DRAW_BUFFERS_NV 0x8824
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER0_ARB 0x8825
#define GL_DRAW_BUFFER0_ATI 0x8825
#define GL_DRAW_BUFFER0_EXT 0x8825
#define GL_DRAW_BUFFER0_NV 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER1_ARB 0x8826
#define GL_DRAW_BUFFER1_ATI 0x8826
#define GL_DRAW_BUFFER1_EXT 0x8826
#define GL_DRAW_BUFFER1_NV 0x8826
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER2_ARB 0x8827
#define GL_DRAW_BUFFER2_ATI 0x8827
#define GL_DRAW_BUFFER2_EXT 0x8827
#define GL_DRAW_BUFFER2_NV 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER3_ARB 0x8828
#define GL_DRAW_BUFFER3_ATI 0x8828
#define GL_DRAW_BUFFER3_EXT 0x8828
#define GL_DRAW_BUFFER3_NV 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER4_ARB 0x8829
#define GL_DRAW_BUFFER4_ATI 0x8829
#define GL_DRAW_BUFFER4_EXT 0x8829
#define GL_DRAW_BUFFER4_NV 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER5_ARB 0x882A
#define GL_DRAW_BUFFER5_ATI 0x882A
#define GL_DRAW_BUFFER5_EXT 0x882A
#define GL_DRAW_BUFFER5_NV 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER6_ARB 0x882B
#define GL_DRAW_BUFFER6_ATI 0x882B
#define GL_DRAW_BUFFER6_EXT 0x882B
#define GL_DRAW_BUFFER6_NV 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER7_ARB 0x882C
#define GL_DRAW_BUFFER7_ATI 0x882C
#define GL_DRAW_BUFFER7_EXT 0x882C
#define GL_DRAW_BUFFER7_NV 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER8_ARB 0x882D
#define GL_DRAW_BUFFER8_ATI 0x882D
#define GL_DRAW_BUFFER8_EXT 0x882D
#define GL_DRAW_BUFFER8_NV 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_BUFFER9_ARB 0x882E
#define GL_DRAW_BUFFER9_ATI 0x882E
#define GL_DRAW_BUFFER9_EXT 0x882E
#define GL_DRAW_BUFFER9_NV 0x882E
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER10_ARB 0x882F
#define GL_DRAW_BUFFER10_ATI 0x882F
#define GL_DRAW_BUFFER10_EXT 0x882F
#define GL_DRAW_BUFFER10_NV 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER11_ARB 0x8830
#define GL_DRAW_BUFFER11_ATI 0x8830
#define GL_DRAW_BUFFER11_EXT 0x8830
#define GL_DRAW_BUFFER11_NV 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER12_ARB 0x8831
#define GL_DRAW_BUFFER12_ATI 0x8831
#define GL_DRAW_BUFFER12_EXT 0x8831
#define GL_DRAW_BUFFER12_NV 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER13_ARB 0x8832
#define GL_DRAW_BUFFER13_ATI 0x8832
#define GL_DRAW_BUFFER13_EXT 0x8832
#define GL_DRAW_BUFFER13_NV 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER14_ARB 0x8833
#define GL_DRAW_BUFFER14_ATI 0x8833
#define GL_DRAW_BUFFER14_EXT 0x8833
#define GL_DRAW_BUFFER14_NV 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_DRAW_BUFFER15_ARB 0x8834
#define GL_DRAW_BUFFER15_ATI 0x8834
#define GL_DRAW_BUFFER15_EXT 0x8834
#define GL_DRAW_BUFFER15_NV 0x8834
#define GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI 0x8835
#define GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI 0x8837
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_BLEND_EQUATION_ALPHA_EXT 0x883D
#define GL_BLEND_EQUATION_ALPHA_OES 0x883D
#define GL_SUBSAMPLE_DISTANCE_AMD 0x883F
#define GL_MATRIX_PALETTE_ARB 0x8840
#define GL_MATRIX_PALETTE_OES 0x8840
#define GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB 0x8841
#define GL_MAX_PALETTE_MATRICES_ARB 0x8842
#define GL_MAX_PALETTE_MATRICES_OES 0x8842
#define GL_CURRENT_PALETTE_MATRIX_ARB 0x8843
#define GL_CURRENT_PALETTE_MATRIX_OES 0x8843
#define GL_MATRIX_INDEX_ARRAY_ARB 0x8844
#define GL_MATRIX_INDEX_ARRAY_OES 0x8844
#define GL_CURRENT_MATRIX_INDEX_ARB 0x8845
#define GL_MATRIX_INDEX_ARRAY_SIZE_ARB 0x8846
#define GL_MATRIX_INDEX_ARRAY_SIZE_OES 0x8846
#define GL_MATRIX_INDEX_ARRAY_TYPE_ARB 0x8847
#define GL_MATRIX_INDEX_ARRAY_TYPE_OES 0x8847
#define GL_MATRIX_INDEX_ARRAY_STRIDE_ARB 0x8848
#define GL_MATRIX_INDEX_ARRAY_STRIDE_OES 0x8848
#define GL_MATRIX_INDEX_ARRAY_POINTER_ARB 0x8849
#define GL_MATRIX_INDEX_ARRAY_POINTER_OES 0x8849
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_DEPTH_SIZE_ARB 0x884A
#define GL_DEPTH_TEXTURE_MODE 0x884B
#define GL_DEPTH_TEXTURE_MODE_ARB 0x884B
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPARE_MODE_ARB 0x884C
#define GL_TEXTURE_COMPARE_MODE_EXT 0x884C
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_TEXTURE_COMPARE_FUNC_ARB 0x884D
#define GL_TEXTURE_COMPARE_FUNC_EXT 0x884D
#define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_COMPARE_REF_TO_TEXTURE_EXT 0x884E
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#define GL_COMPARE_R_TO_TEXTURE_ARB 0x884E
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV 0x8850
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV 0x8851
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8852
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV 0x8853
#define GL_OFFSET_HILO_TEXTURE_2D_NV 0x8854
#define GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV 0x8855
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV 0x8856
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8857
#define GL_DEPENDENT_HILO_TEXTURE_2D_NV 0x8858
#define GL_DEPENDENT_RGB_TEXTURE_3D_NV 0x8859
#define GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV 0x885A
#define GL_DOT_PRODUCT_PASS_THROUGH_NV 0x885B
#define GL_DOT_PRODUCT_TEXTURE_1D_NV 0x885C
#define GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV 0x885D
#define GL_HILO8_NV 0x885E
#define GL_SIGNED_HILO8_NV 0x885F
#define GL_FORCE_BLUE_TO_ONE_NV 0x8860
#define GL_POINT_SPRITE 0x8861
#define GL_POINT_SPRITE_ARB 0x8861
#define GL_POINT_SPRITE_NV 0x8861
#define GL_POINT_SPRITE_OES 0x8861
#define GL_COORD_REPLACE 0x8862
#define GL_COORD_REPLACE_ARB 0x8862
#define GL_COORD_REPLACE_NV 0x8862
#define GL_COORD_REPLACE_OES 0x8862
#define GL_POINT_SPRITE_R_MODE_NV 0x8863
#define GL_PIXEL_COUNTER_BITS_NV 0x8864
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_QUERY_COUNTER_BITS_ARB 0x8864
#define GL_QUERY_COUNTER_BITS_EXT 0x8864
#define GL_CURRENT_OCCLUSION_QUERY_ID_NV 0x8865
#define GL_CURRENT_QUERY 0x8865
#define GL_CURRENT_QUERY_ARB 0x8865
#define GL_CURRENT_QUERY_EXT 0x8865
#define GL_PIXEL_COUNT_NV 0x8866
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_ARB 0x8866
#define GL_QUERY_RESULT_EXT 0x8866
#define GL_PIXEL_COUNT_AVAILABLE_NV 0x8867
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_QUERY_RESULT_AVAILABLE_ARB 0x8867
#define GL_QUERY_RESULT_AVAILABLE_EXT 0x8867
#define GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV 0x8868
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_MAX_VERTEX_ATTRIBS_ARB 0x8869
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT 0x886C
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES 0x886C
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT 0x886D
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES 0x886D
#define GL_DEPTH_STENCIL_TO_RGBA_NV 0x886E
#define GL_DEPTH_STENCIL_TO_BGRA_NV 0x886F
#define GL_FRAGMENT_PROGRAM_NV 0x8870
#define GL_MAX_TEXTURE_COORDS 0x8871
#define GL_MAX_TEXTURE_COORDS_ARB 0x8871
#define GL_MAX_TEXTURE_COORDS_NV 0x8871
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_MAX_TEXTURE_IMAGE_UNITS_ARB 0x8872
#define GL_MAX_TEXTURE_IMAGE_UNITS_NV 0x8872
#define GL_FRAGMENT_PROGRAM_BINDING_NV 0x8873
#define GL_PROGRAM_ERROR_STRING_ARB 0x8874
#define GL_PROGRAM_ERROR_STRING_NV 0x8874
#define GL_PROGRAM_FORMAT_ASCII_ARB 0x8875
#define GL_PROGRAM_FORMAT_ARB 0x8876
#define GL_WRITE_PIXEL_DATA_RANGE_NV 0x8878
#define GL_READ_PIXEL_DATA_RANGE_NV 0x8879
#define GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV 0x887A
#define GL_READ_PIXEL_DATA_RANGE_LENGTH_NV 0x887B
#define GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV 0x887C
#define GL_READ_PIXEL_DATA_RANGE_POINTER_NV 0x887D
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_GEOMETRY_SHADER_INVOCATIONS_EXT 0x887F
#define GL_GEOMETRY_SHADER_INVOCATIONS_OES 0x887F
#define GL_FLOAT_R_NV 0x8880
#define GL_FLOAT_RG_NV 0x8881
#define GL_FLOAT_RGB_NV 0x8882
#define GL_FLOAT_RGBA_NV 0x8883
#define GL_FLOAT_R16_NV 0x8884
#define GL_FLOAT_R32_NV 0x8885
#define GL_FLOAT_RG16_NV 0x8886
#define GL_FLOAT_RG32_NV 0x8887
#define GL_FLOAT_RGB16_NV 0x8888
#define GL_FLOAT_RGB32_NV 0x8889
#define GL_FLOAT_RGBA16_NV 0x888A
#define GL_FLOAT_RGBA32_NV 0x888B
#define GL_TEXTURE_FLOAT_COMPONENTS_NV 0x888C
#define GL_FLOAT_CLEAR_COLOR_VALUE_NV 0x888D
#define GL_FLOAT_RGBA_MODE_NV 0x888E
#define GL_TEXTURE_UNSIGNED_REMAP_MODE_NV 0x888F
#define GL_DEPTH_BOUNDS_TEST_EXT 0x8890
#define GL_DEPTH_BOUNDS_EXT 0x8891
#define GL_ARRAY_BUFFER 0x8892
#define GL_ARRAY_BUFFER_ARB 0x8892
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ELEMENT_ARRAY_BUFFER_ARB 0x8893
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ARRAY_BUFFER_BINDING_ARB 0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
#define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
#define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
#define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898
#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
#define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_OES 0x889E
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
#define GL_PROGRAM_INSTRUCTIONS_ARB 0x88A0
#define GL_MAX_PROGRAM_INSTRUCTIONS_ARB 0x88A1
#define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2
#define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3
#define GL_PROGRAM_TEMPORARIES_ARB 0x88A4
#define GL_MAX_PROGRAM_TEMPORARIES_ARB 0x88A5
#define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6
#define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7
#define GL_PROGRAM_PARAMETERS_ARB 0x88A8
#define GL_MAX_PROGRAM_PARAMETERS_ARB 0x88A9
#define GL_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AA
#define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB
#define GL_PROGRAM_ATTRIBS_ARB 0x88AC
#define GL_MAX_PROGRAM_ATTRIBS_ARB 0x88AD
#define GL_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AE
#define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF
#define GL_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B0
#define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B1
#define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B2
#define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3
#define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4
#define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5
#define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6
#define GL_TRANSPOSE_CURRENT_MATRIX_ARB 0x88B7
#define GL_READ_ONLY 0x88B8
#define GL_READ_ONLY_ARB 0x88B8
#define GL_WRITE_ONLY 0x88B9
#define GL_WRITE_ONLY_ARB 0x88B9
#define GL_WRITE_ONLY_OES 0x88B9
#define GL_READ_WRITE 0x88BA
#define GL_READ_WRITE_ARB 0x88BA
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_ACCESS_ARB 0x88BB
#define GL_BUFFER_ACCESS_OES 0x88BB
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAPPED_ARB 0x88BC
#define GL_BUFFER_MAPPED_OES 0x88BC
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_BUFFER_MAP_POINTER_ARB 0x88BD
#define GL_BUFFER_MAP_POINTER_OES 0x88BD
#define GL_WRITE_DISCARD_NV 0x88BE
#define GL_TIME_ELAPSED 0x88BF
#define GL_TIME_ELAPSED_EXT 0x88BF
#define GL_MATRIX0_ARB 0x88C0
#define GL_MATRIX1_ARB 0x88C1
#define GL_MATRIX2_ARB 0x88C2
#define GL_MATRIX3_ARB 0x88C3
#define GL_MATRIX4_ARB 0x88C4
#define GL_MATRIX5_ARB 0x88C5
#define GL_MATRIX6_ARB 0x88C6
#define GL_MATRIX7_ARB 0x88C7
#define GL_MATRIX8_ARB 0x88C8
#define GL_MATRIX9_ARB 0x88C9
#define GL_MATRIX10_ARB 0x88CA
#define GL_MATRIX11_ARB 0x88CB
#define GL_MATRIX12_ARB 0x88CC
#define GL_MATRIX13_ARB 0x88CD
#define GL_MATRIX14_ARB 0x88CE
#define GL_MATRIX15_ARB 0x88CF
#define GL_MATRIX16_ARB 0x88D0
#define GL_MATRIX17_ARB 0x88D1
#define GL_MATRIX18_ARB 0x88D2
#define GL_MATRIX19_ARB 0x88D3
#define GL_MATRIX20_ARB 0x88D4
#define GL_MATRIX21_ARB 0x88D5
#define GL_MATRIX22_ARB 0x88D6
#define GL_MATRIX23_ARB 0x88D7
#define GL_MATRIX24_ARB 0x88D8
#define GL_MATRIX25_ARB 0x88D9
#define GL_MATRIX26_ARB 0x88DA
#define GL_MATRIX27_ARB 0x88DB
#define GL_MATRIX28_ARB 0x88DC
#define GL_MATRIX29_ARB 0x88DD
#define GL_MATRIX30_ARB 0x88DE
#define GL_MATRIX31_ARB 0x88DF
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_DRAW_ARB 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_STREAM_READ_ARB 0x88E1
#define GL_STREAM_COPY 0x88E2
#define GL_STREAM_COPY_ARB 0x88E2
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_DRAW_ARB 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STATIC_READ_ARB 0x88E5
#define GL_STATIC_COPY 0x88E6
#define GL_STATIC_COPY_ARB 0x88E6
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_DRAW_ARB 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_DYNAMIC_READ_ARB 0x88E9
#define GL_DYNAMIC_COPY 0x88EA
#define GL_DYNAMIC_COPY_ARB 0x88EA
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_PACK_BUFFER_ARB 0x88EB
#define GL_PIXEL_PACK_BUFFER_EXT 0x88EB
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_ARB 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_EXT 0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_PACK_BUFFER_BINDING_ARB 0x88ED
#define GL_PIXEL_PACK_BUFFER_BINDING_EXT 0x88ED
#define GL_ETC1_SRGB8_NV 0x88EE
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB 0x88EF
#define GL_PIXEL_UNPACK_BUFFER_BINDING_EXT 0x88EF
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_DEPTH24_STENCIL8_EXT 0x88F0
#define GL_DEPTH24_STENCIL8_OES 0x88F0
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_STENCIL_SIZE_EXT 0x88F1
#define GL_STENCIL_TAG_BITS_EXT 0x88F2
#define GL_STENCIL_CLEAR_TAG_VALUE_EXT 0x88F3
#define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0x88F4
#define GL_MAX_PROGRAM_CALL_DEPTH_NV 0x88F5
#define GL_MAX_PROGRAM_IF_DEPTH_NV 0x88F6
#define GL_MAX_PROGRAM_LOOP_DEPTH_NV 0x88F7
#define GL_MAX_PROGRAM_LOOP_COUNT_NV 0x88F8
#define GL_SRC1_COLOR 0x88F9
#define GL_SRC1_COLOR_EXT 0x88F9
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_ONE_MINUS_SRC1_COLOR_EXT 0x88FA
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_ONE_MINUS_SRC1_ALPHA_EXT 0x88FB
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT 0x88FC
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV 0x88FE
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT 0x88FF
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_MIN_PROGRAM_TEXEL_OFFSET_EXT 0x8904
#define GL_MIN_PROGRAM_TEXEL_OFFSET_NV 0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_MAX_PROGRAM_TEXEL_OFFSET_EXT 0x8905
#define GL_MAX_PROGRAM_TEXEL_OFFSET_NV 0x8905
#define GL_PROGRAM_ATTRIB_COMPONENTS_NV 0x8906
#define GL_PROGRAM_RESULT_COMPONENTS_NV 0x8907
#define GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV 0x8908
#define GL_MAX_PROGRAM_RESULT_COMPONENTS_NV 0x8909
#define GL_CG_VERTEX_SHADER_EXT 0x890E
#define GL_CG_FRAGMENT_SHADER_EXT 0x890F
#define GL_STENCIL_TEST_TWO_SIDE_EXT 0x8910
#define GL_ACTIVE_STENCIL_FACE_EXT 0x8911
#define GL_MIRROR_CLAMP_TO_BORDER_EXT 0x8912
#define GL_SAMPLES_PASSED 0x8914
#define GL_SAMPLES_PASSED_ARB 0x8914
#define GL_GEOMETRY_LINKED_VERTICES_OUT_EXT 0x8916
#define GL_GEOMETRY_LINKED_VERTICES_OUT_OES 0x8916
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_LINKED_INPUT_TYPE_EXT 0x8917
#define GL_GEOMETRY_LINKED_INPUT_TYPE_OES 0x8917
#define GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT 0x8918
#define GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES 0x8918
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_SAMPLER_BINDING 0x8919
#define GL_CLAMP_VERTEX_COLOR 0x891A
#define GL_CLAMP_VERTEX_COLOR_ARB 0x891A
#define GL_CLAMP_FRAGMENT_COLOR 0x891B
#define GL_CLAMP_FRAGMENT_COLOR_ARB 0x891B
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_CLAMP_READ_COLOR_ARB 0x891C
#define GL_FIXED_ONLY 0x891D
#define GL_FIXED_ONLY_ARB 0x891D
#define GL_TESS_CONTROL_PROGRAM_NV 0x891E
#define GL_TESS_EVALUATION_PROGRAM_NV 0x891F
#define GL_FRAGMENT_SHADER_ATI 0x8920
#define GL_REG_0_ATI 0x8921
#define GL_REG_1_ATI 0x8922
#define GL_REG_2_ATI 0x8923
#define GL_REG_3_ATI 0x8924
#define GL_REG_4_ATI 0x8925
#define GL_REG_5_ATI 0x8926
#define GL_REG_6_ATI 0x8927
#define GL_REG_7_ATI 0x8928
#define GL_REG_8_ATI 0x8929
#define GL_REG_9_ATI 0x892A
#define GL_REG_10_ATI 0x892B
#define GL_REG_11_ATI 0x892C
#define GL_REG_12_ATI 0x892D
#define GL_REG_13_ATI 0x892E
#define GL_REG_14_ATI 0x892F
#define GL_REG_15_ATI 0x8930
#define GL_REG_16_ATI 0x8931
#define GL_REG_17_ATI 0x8932
#define GL_REG_18_ATI 0x8933
#define GL_REG_19_ATI 0x8934
#define GL_REG_20_ATI 0x8935
#define GL_REG_21_ATI 0x8936
#define GL_REG_22_ATI 0x8937
#define GL_REG_23_ATI 0x8938
#define GL_REG_24_ATI 0x8939
#define GL_REG_25_ATI 0x893A
#define GL_REG_26_ATI 0x893B
#define GL_REG_27_ATI 0x893C
#define GL_REG_28_ATI 0x893D
#define GL_REG_29_ATI 0x893E
#define GL_REG_30_ATI 0x893F
#define GL_REG_31_ATI 0x8940
#define GL_CON_0_ATI 0x8941
#define GL_CON_1_ATI 0x8942
#define GL_CON_2_ATI 0x8943
#define GL_CON_3_ATI 0x8944
#define GL_CON_4_ATI 0x8945
#define GL_CON_5_ATI 0x8946
#define GL_CON_6_ATI 0x8947
#define GL_CON_7_ATI 0x8948
#define GL_CON_8_ATI 0x8949
#define GL_CON_9_ATI 0x894A
#define GL_CON_10_ATI 0x894B
#define GL_CON_11_ATI 0x894C
#define GL_CON_12_ATI 0x894D
#define GL_CON_13_ATI 0x894E
#define GL_CON_14_ATI 0x894F
#define GL_CON_15_ATI 0x8950
#define GL_CON_16_ATI 0x8951
#define GL_CON_17_ATI 0x8952
#define GL_CON_18_ATI 0x8953
#define GL_CON_19_ATI 0x8954
#define GL_CON_20_ATI 0x8955
#define GL_CON_21_ATI 0x8956
#define GL_CON_22_ATI 0x8957
#define GL_CON_23_ATI 0x8958
#define GL_CON_24_ATI 0x8959
#define GL_CON_25_ATI 0x895A
#define GL_CON_26_ATI 0x895B
#define GL_CON_27_ATI 0x895C
#define GL_CON_28_ATI 0x895D
#define GL_CON_29_ATI 0x895E
#define GL_CON_30_ATI 0x895F
#define GL_CON_31_ATI 0x8960
#define GL_MOV_ATI 0x8961
#define GL_ADD_ATI 0x8963
#define GL_MUL_ATI 0x8964
#define GL_SUB_ATI 0x8965
#define GL_DOT3_ATI 0x8966
#define GL_DOT4_ATI 0x8967
#define GL_MAD_ATI 0x8968
#define GL_LERP_ATI 0x8969
#define GL_CND_ATI 0x896A
#define GL_CND0_ATI 0x896B
#define GL_DOT2_ADD_ATI 0x896C
#define GL_SECONDARY_INTERPOLATOR_ATI 0x896D
#define GL_NUM_FRAGMENT_REGISTERS_ATI 0x896E
#define GL_NUM_FRAGMENT_CONSTANTS_ATI 0x896F
#define GL_NUM_PASSES_ATI 0x8970
#define GL_NUM_INSTRUCTIONS_PER_PASS_ATI 0x8971
#define GL_NUM_INSTRUCTIONS_TOTAL_ATI 0x8972
#define GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI 0x8973
#define GL_NUM_LOOPBACK_COMPONENTS_ATI 0x8974
#define GL_COLOR_ALPHA_PAIRING_ATI 0x8975
#define GL_SWIZZLE_STR_ATI 0x8976
#define GL_SWIZZLE_STQ_ATI 0x8977
#define GL_SWIZZLE_STR_DR_ATI 0x8978
#define GL_SWIZZLE_STQ_DQ_ATI 0x8979
#define GL_SWIZZLE_STRQ_ATI 0x897A
#define GL_SWIZZLE_STRQ_DQ_ATI 0x897B
#define GL_INTERLACE_OML 0x8980
#define GL_INTERLACE_READ_OML 0x8981
#define GL_FORMAT_SUBSAMPLE_24_24_OML 0x8982
#define GL_FORMAT_SUBSAMPLE_244_244_OML 0x8983
#define GL_PACK_RESAMPLE_OML 0x8984
#define GL_UNPACK_RESAMPLE_OML 0x8985
#define GL_RESAMPLE_REPLICATE_OML 0x8986
#define GL_RESAMPLE_ZERO_FILL_OML 0x8987
#define GL_RESAMPLE_AVERAGE_OML 0x8988
#define GL_RESAMPLE_DECIMATE_OML 0x8989
#define GL_POINT_SIZE_ARRAY_TYPE_OES 0x898A
#define GL_POINT_SIZE_ARRAY_STRIDE_OES 0x898B
#define GL_POINT_SIZE_ARRAY_POINTER_OES 0x898C
#define GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES 0x898D
#define GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES 0x898E
#define GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES 0x898F
#define GL_VERTEX_ATTRIB_MAP1_APPLE 0x8A00
#define GL_VERTEX_ATTRIB_MAP2_APPLE 0x8A01
#define GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE 0x8A02
#define GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE 0x8A03
#define GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE 0x8A04
#define GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE 0x8A05
#define GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE 0x8A06
#define GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE 0x8A07
#define GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE 0x8A08
#define GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE 0x8A09
#define GL_DRAW_PIXELS_APPLE 0x8A0A
#define GL_FENCE_APPLE 0x8A0B
#define GL_ELEMENT_ARRAY_APPLE 0x8A0C
#define GL_ELEMENT_ARRAY_TYPE_APPLE 0x8A0D
#define GL_ELEMENT_ARRAY_POINTER_APPLE 0x8A0E
#define GL_COLOR_FLOAT_APPLE 0x8A0F
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_BUFFER_SERIALIZED_MODIFY_APPLE 0x8A12
#define GL_BUFFER_FLUSHING_UNMAP_APPLE 0x8A13
#define GL_AUX_DEPTH_STENCIL_APPLE 0x8A14
#define GL_PACK_ROW_BYTES_APPLE 0x8A15
#define GL_UNPACK_ROW_BYTES_APPLE 0x8A16
#define GL_RELEASED_APPLE 0x8A19
#define GL_VOLATILE_APPLE 0x8A1A
#define GL_RETAINED_APPLE 0x8A1B
#define GL_UNDEFINED_APPLE 0x8A1C
#define GL_PURGEABLE_APPLE 0x8A1D
#define GL_RGB_422_APPLE 0x8A1F
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT 0x8A2C
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES 0x8A2C
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8A32
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES 0x8A32
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_TEXTURE_SRGB_DECODE_EXT 0x8A48
#define GL_DECODE_EXT 0x8A49
#define GL_SKIP_DECODE_EXT 0x8A4A
#define GL_PROGRAM_PIPELINE_OBJECT_EXT 0x8A4F
#define GL_RGB_RAW_422_APPLE 0x8A51
#define GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT 0x8A52
#define GL_SYNC_OBJECT_APPLE 0x8A53
#define GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT 0x8A54
#define GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT 0x8A55
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT 0x8A56
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT 0x8A57
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_FRAGMENT_SHADER_ARB 0x8B30
#define GL_VERTEX_SHADER 0x8B31
#define GL_VERTEX_SHADER_ARB 0x8B31
#define GL_PROGRAM_OBJECT_ARB 0x8B40
#define GL_PROGRAM_OBJECT_EXT 0x8B40
#define GL_SHADER_OBJECT_ARB 0x8B48
#define GL_SHADER_OBJECT_EXT 0x8B48
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB 0x8B49
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_MAX_VARYING_COMPONENTS_EXT 0x8B4B
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VARYING_FLOATS_ARB 0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D
#define GL_OBJECT_TYPE_ARB 0x8B4E
#define GL_OBJECT_SUBTYPE_ARB 0x8B4F
#define GL_SHADER_TYPE 0x8B4F
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC2_ARB 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC3_ARB 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_FLOAT_VEC4_ARB 0x8B52
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC2_ARB 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC3_ARB 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_INT_VEC4_ARB 0x8B55
#define GL_BOOL 0x8B56
#define GL_BOOL_ARB 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC2_ARB 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC3_ARB 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_BOOL_VEC4_ARB 0x8B59
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT2_ARB 0x8B5A
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT3_ARB 0x8B5B
#define GL_FLOAT_MAT4 0x8B5C
#define GL_FLOAT_MAT4_ARB 0x8B5C
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_1D_ARB 0x8B5D
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_2D_ARB 0x8B5E
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_3D_ARB 0x8B5F
#define GL_SAMPLER_3D_OES 0x8B5F
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_CUBE_ARB 0x8B60
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_1D_SHADOW_ARB 0x8B61
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_SAMPLER_2D_SHADOW_ARB 0x8B62
#define GL_SAMPLER_2D_SHADOW_EXT 0x8B62
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_SAMPLER_2D_RECT_ARB 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_SAMPLER_2D_RECT_SHADOW_ARB 0x8B64
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x3_NV 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT2x4_NV 0x8B66
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x2_NV 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT3x4_NV 0x8B68
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x2_NV 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_FLOAT_MAT4x3_NV 0x8B6A
#define GL_DELETE_STATUS 0x8B80
#define GL_OBJECT_DELETE_STATUS_ARB 0x8B80
#define GL_COMPILE_STATUS 0x8B81
#define GL_OBJECT_COMPILE_STATUS_ARB 0x8B81
#define GL_LINK_STATUS 0x8B82
#define GL_OBJECT_LINK_STATUS_ARB 0x8B82
#define GL_OBJECT_VALIDATE_STATUS_ARB 0x8B83
#define GL_VALIDATE_STATUS 0x8B83
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_OBJECT_INFO_LOG_LENGTH_ARB 0x8B84
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_OBJECT_ATTACHED_OBJECTS_ARB 0x8B85
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_OBJECT_ACTIVE_UNIFORMS_ARB 0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87
#define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB 0x8B8B
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES 0x8B8B
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_SHADING_LANGUAGE_VERSION_ARB 0x8B8C
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_PALETTE4_RGB8_OES 0x8B90
#define GL_PALETTE4_RGBA8_OES 0x8B91
#define GL_PALETTE4_R5_G6_B5_OES 0x8B92
#define GL_PALETTE4_RGBA4_OES 0x8B93
#define GL_PALETTE4_RGB5_A1_OES 0x8B94
#define GL_PALETTE8_RGB8_OES 0x8B95
#define GL_PALETTE8_RGBA8_OES 0x8B96
#define GL_PALETTE8_R5_G6_B5_OES 0x8B97
#define GL_PALETTE8_RGBA4_OES 0x8B98
#define GL_PALETTE8_RGB5_A1_OES 0x8B99
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES 0x8B9B
#define GL_POINT_SIZE_ARRAY_OES 0x8B9C
#define GL_TEXTURE_CROP_RECT_OES 0x8B9D
#define GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES 0x8B9E
#define GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES 0x8B9F
#define GL_FRAGMENT_PROGRAM_POSITION_MESA 0x8BB0
#define GL_FRAGMENT_PROGRAM_CALLBACK_MESA 0x8BB1
#define GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA 0x8BB2
#define GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA 0x8BB3
#define GL_VERTEX_PROGRAM_POSITION_MESA 0x8BB4
#define GL_VERTEX_PROGRAM_CALLBACK_MESA 0x8BB5
#define GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA 0x8BB6
#define GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA 0x8BB7
#define GL_COUNTER_TYPE_AMD 0x8BC0
#define GL_COUNTER_RANGE_AMD 0x8BC1
#define GL_UNSIGNED_INT64_AMD 0x8BC2
#define GL_PERCENTAGE_AMD 0x8BC3
#define GL_PERFMON_RESULT_AVAILABLE_AMD 0x8BC4
#define GL_PERFMON_RESULT_SIZE_AMD 0x8BC5
#define GL_PERFMON_RESULT_AMD 0x8BC6
#define GL_TEXTURE_WIDTH_QCOM 0x8BD2
#define GL_TEXTURE_HEIGHT_QCOM 0x8BD3
#define GL_TEXTURE_DEPTH_QCOM 0x8BD4
#define GL_TEXTURE_INTERNAL_FORMAT_QCOM 0x8BD5
#define GL_TEXTURE_FORMAT_QCOM 0x8BD6
#define GL_TEXTURE_TYPE_QCOM 0x8BD7
#define GL_TEXTURE_IMAGE_VALID_QCOM 0x8BD8
#define GL_TEXTURE_NUM_LEVELS_QCOM 0x8BD9
#define GL_TEXTURE_TARGET_QCOM 0x8BDA
#define GL_TEXTURE_OBJECT_VALID_QCOM 0x8BDB
#define GL_STATE_RESTORE 0x8BDC
#define GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT 0x8BE7
#define GL_TEXTURE_PROTECTED_EXT 0x8BFA
#define GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG 0x8C00
#define GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG 0x8C01
#define GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG 0x8C02
#define GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG 0x8C03
#define GL_MODULATE_COLOR_IMG 0x8C04
#define GL_RECIP_ADD_SIGNED_ALPHA_IMG 0x8C05
#define GL_TEXTURE_ALPHA_MODULATE_IMG 0x8C06
#define GL_FACTOR_ALPHA_MODULATE_IMG 0x8C07
#define GL_FRAGMENT_ALPHA_MODULATE_IMG 0x8C08
#define GL_ADD_BLEND_IMG 0x8C09
#define GL_SGX_BINARY_IMG 0x8C0A
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_RED_TYPE_ARB 0x8C10
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_GREEN_TYPE_ARB 0x8C11
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_BLUE_TYPE_ARB 0x8C12
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_ALPHA_TYPE_ARB 0x8C13
#define GL_TEXTURE_LUMINANCE_TYPE 0x8C14
#define GL_TEXTURE_LUMINANCE_TYPE_ARB 0x8C14
#define GL_TEXTURE_INTENSITY_TYPE 0x8C15
#define GL_TEXTURE_INTENSITY_TYPE_ARB 0x8C15
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_TEXTURE_DEPTH_TYPE_ARB 0x8C16
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_UNSIGNED_NORMALIZED_ARB 0x8C17
#define GL_UNSIGNED_NORMALIZED_EXT 0x8C17
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_TEXTURE_1D_ARRAY_EXT 0x8C18
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_PROXY_TEXTURE_1D_ARRAY_EXT 0x8C19
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_TEXTURE_2D_ARRAY_EXT 0x8C1A
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_PROXY_TEXTURE_2D_ARRAY_EXT 0x8C1B
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_1D_ARRAY_EXT 0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_TEXTURE_BINDING_2D_ARRAY_EXT 0x8C1D
#define GL_GEOMETRY_PROGRAM_NV 0x8C26
#define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0x8C27
#define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES 0x8C29
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_TEXTURE_BUFFER_ARB 0x8C2A
#define GL_TEXTURE_BUFFER_BINDING 0x8C2A
#define GL_TEXTURE_BUFFER_BINDING_EXT 0x8C2A
#define GL_TEXTURE_BUFFER_BINDING_OES 0x8C2A
#define GL_TEXTURE_BUFFER_EXT 0x8C2A
#define GL_TEXTURE_BUFFER_OES 0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_ARB 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_EXT 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_OES 0x8C2B
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_ARB 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_EXT 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_OES 0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES 0x8C2D
#define GL_TEXTURE_BUFFER_FORMAT_ARB 0x8C2E
#define GL_TEXTURE_BUFFER_FORMAT_EXT 0x8C2E
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_ANY_SAMPLES_PASSED_EXT 0x8C2F
#define GL_SAMPLE_SHADING 0x8C36
#define GL_SAMPLE_SHADING_ARB 0x8C36
#define GL_SAMPLE_SHADING_OES 0x8C36
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_MIN_SAMPLE_SHADING_VALUE_ARB 0x8C37
#define GL_MIN_SAMPLE_SHADING_VALUE_OES 0x8C37
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_R11F_G11F_B10F_APPLE 0x8C3A
#define GL_R11F_G11F_B10F_EXT 0x8C3A
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE 0x8C3B
#define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT 0x8C3B
#define GL_RGBA_SIGNED_COMPONENTS_EXT 0x8C3C
#define GL_RGB9_E5 0x8C3D
#define GL_RGB9_E5_APPLE 0x8C3D
#define GL_RGB9_E5_EXT 0x8C3D
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_UNSIGNED_INT_5_9_9_9_REV_APPLE 0x8C3E
#define GL_UNSIGNED_INT_5_9_9_9_REV_EXT 0x8C3E
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TEXTURE_SHARED_SIZE_EXT 0x8C3F
#define GL_SRGB 0x8C40
#define GL_SRGB_EXT 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB8_EXT 0x8C41
#define GL_SRGB8_NV 0x8C41
#define GL_SRGB_ALPHA 0x8C42
#define GL_SRGB_ALPHA_EXT 0x8C42
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_SRGB8_ALPHA8_EXT 0x8C43
#define GL_SLUMINANCE_ALPHA 0x8C44
#define GL_SLUMINANCE_ALPHA_EXT 0x8C44
#define GL_SLUMINANCE_ALPHA_NV 0x8C44
#define GL_SLUMINANCE8_ALPHA8 0x8C45
#define GL_SLUMINANCE8_ALPHA8_EXT 0x8C45
#define GL_SLUMINANCE8_ALPHA8_NV 0x8C45
#define GL_SLUMINANCE 0x8C46
#define GL_SLUMINANCE_EXT 0x8C46
#define GL_SLUMINANCE_NV 0x8C46
#define GL_SLUMINANCE8 0x8C47
#define GL_SLUMINANCE8_EXT 0x8C47
#define GL_SLUMINANCE8_NV 0x8C47
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB_EXT 0x8C48
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_COMPRESSED_SRGB_ALPHA_EXT 0x8C49
#define GL_COMPRESSED_SLUMINANCE 0x8C4A
#define GL_COMPRESSED_SLUMINANCE_EXT 0x8C4A
#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
#define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT 0x8C4B
#define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT 0x8C4C
#define GL_COMPRESSED_SRGB_S3TC_DXT1_NV 0x8C4C
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0x8C4D
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV 0x8C4D
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0x8C4E
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV 0x8C4E
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0x8C4F
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV 0x8C4F
#define GL_COMPRESSED_LUMINANCE_LATC1_EXT 0x8C70
#define GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT 0x8C71
#define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT 0x8C72
#define GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT 0x8C73
#define GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV 0x8C74
#define GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV 0x8C75
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 0x8C76
#define GL_BACK_PRIMARY_COLOR_NV 0x8C77
#define GL_BACK_SECONDARY_COLOR_NV 0x8C78
#define GL_TEXTURE_COORD_NV 0x8C79
#define GL_CLIP_DISTANCE_NV 0x8C7A
#define GL_VERTEX_ID_NV 0x8C7B
#define GL_PRIMITIVE_ID_NV 0x8C7C
#define GL_GENERIC_ATTRIB_NV 0x8C7D
#define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV 0x8C7E
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV 0x8C7F
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 0x8C80
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0x8C80
#define GL_ACTIVE_VARYINGS_NV 0x8C81
#define GL_ACTIVE_VARYING_MAX_LENGTH_NV 0x8C82
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYINGS_NV 0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV 0x8C85
#define GL_TRANSFORM_FEEDBACK_RECORD_NV 0x8C86
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_PRIMITIVES_GENERATED_EXT 0x8C87
#define GL_PRIMITIVES_GENERATED_NV 0x8C87
#define GL_PRIMITIVES_GENERATED_OES 0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 0x8C88
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0x8C88
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_RASTERIZER_DISCARD_EXT 0x8C89
#define GL_RASTERIZER_DISCARD_NV 0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0x8C8B
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_INTERLEAVED_ATTRIBS_EXT 0x8C8C
#define GL_INTERLEAVED_ATTRIBS_NV 0x8C8C
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_SEPARATE_ATTRIBS_EXT 0x8C8D
#define GL_SEPARATE_ATTRIBS_NV 0x8C8D
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_EXT 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_NV 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV 0x8C8F
#define GL_ATC_RGB_AMD 0x8C92
#define GL_ATC_RGBA_EXPLICIT_ALPHA_AMD 0x8C93
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_LOWER_LEFT 0x8CA1
#define GL_UPPER_LEFT 0x8CA2
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_ANGLE 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_APPLE 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_NV 0x8CA6
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_FRAMEBUFFER_BINDING_ANGLE 0x8CA6
#define GL_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_FRAMEBUFFER_BINDING_OES 0x8CA6
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_RENDERBUFFER_BINDING_ANGLE 0x8CA7
#define GL_RENDERBUFFER_BINDING_EXT 0x8CA7
#define GL_RENDERBUFFER_BINDING_OES 0x8CA7
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_READ_FRAMEBUFFER_ANGLE 0x8CA8
#define GL_READ_FRAMEBUFFER_APPLE 0x8CA8
#define GL_READ_FRAMEBUFFER_EXT 0x8CA8
#define GL_READ_FRAMEBUFFER_NV 0x8CA8
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_DRAW_FRAMEBUFFER_ANGLE 0x8CA9
#define GL_DRAW_FRAMEBUFFER_APPLE 0x8CA9
#define GL_DRAW_FRAMEBUFFER_EXT 0x8CA9
#define GL_DRAW_FRAMEBUFFER_NV 0x8CA9
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_ANGLE 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_APPLE 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_EXT 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_NV 0x8CAA
#define GL_RENDERBUFFER_COVERAGE_SAMPLES_NV 0x8CAB
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_ANGLE 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_APPLE 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_EXT 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_NV 0x8CAB
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_COMPLETE_EXT 0x8CD5
#define GL_FRAMEBUFFER_COMPLETE_OES 0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES 0x8CDA
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_FRAMEBUFFER_UNSUPPORTED_EXT 0x8CDD
#define GL_FRAMEBUFFER_UNSUPPORTED_OES 0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_MAX_COLOR_ATTACHMENTS_EXT 0x8CDF
#define GL_MAX_COLOR_ATTACHMENTS_NV 0x8CDF
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT0_EXT 0x8CE0
#define GL_COLOR_ATTACHMENT0_NV 0x8CE0
#define GL_COLOR_ATTACHMENT0_OES 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT1_EXT 0x8CE1
#define GL_COLOR_ATTACHMENT1_NV 0x8CE1
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT2_EXT 0x8CE2
#define GL_COLOR_ATTACHMENT2_NV 0x8CE2
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT3_EXT 0x8CE3
#define GL_COLOR_ATTACHMENT3_NV 0x8CE3
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT4_EXT 0x8CE4
#define GL_COLOR_ATTACHMENT4_NV 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT5_EXT 0x8CE5
#define GL_COLOR_ATTACHMENT5_NV 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT6_EXT 0x8CE6
#define GL_COLOR_ATTACHMENT6_NV 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT7_EXT 0x8CE7
#define GL_COLOR_ATTACHMENT7_NV 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT8_EXT 0x8CE8
#define GL_COLOR_ATTACHMENT8_NV 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT9_EXT 0x8CE9
#define GL_COLOR_ATTACHMENT9_NV 0x8CE9
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT10_EXT 0x8CEA
#define GL_COLOR_ATTACHMENT10_NV 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT11_EXT 0x8CEB
#define GL_COLOR_ATTACHMENT11_NV 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT12_EXT 0x8CEC
#define GL_COLOR_ATTACHMENT12_NV 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT13_EXT 0x8CED
#define GL_COLOR_ATTACHMENT13_NV 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT14_EXT 0x8CEE
#define GL_COLOR_ATTACHMENT14_NV 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT15_EXT 0x8CEF
#define GL_COLOR_ATTACHMENT15_NV 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_DEPTH_ATTACHMENT_EXT 0x8D00
#define GL_DEPTH_ATTACHMENT_OES 0x8D00
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_STENCIL_ATTACHMENT_EXT 0x8D20
#define GL_STENCIL_ATTACHMENT_OES 0x8D20
#define GL_FRAMEBUFFER 0x8D40
#define GL_FRAMEBUFFER_EXT 0x8D40
#define GL_FRAMEBUFFER_OES 0x8D40
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_EXT 0x8D41
#define GL_RENDERBUFFER_OES 0x8D41
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER_WIDTH_EXT 0x8D42
#define GL_RENDERBUFFER_WIDTH_OES 0x8D42
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_HEIGHT_EXT 0x8D43
#define GL_RENDERBUFFER_HEIGHT_OES 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44
#define GL_RENDERBUFFER_INTERNAL_FORMAT_OES 0x8D44
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX1_EXT 0x8D46
#define GL_STENCIL_INDEX1_OES 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX4_EXT 0x8D47
#define GL_STENCIL_INDEX4_OES 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_INDEX8_EXT 0x8D48
#define GL_STENCIL_INDEX8_OES 0x8D48
#define GL_STENCIL_INDEX16 0x8D49
#define GL_STENCIL_INDEX16_EXT 0x8D49
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_RED_SIZE_EXT 0x8D50
#define GL_RENDERBUFFER_RED_SIZE_OES 0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_GREEN_SIZE_EXT 0x8D51
#define GL_RENDERBUFFER_GREEN_SIZE_OES 0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_BLUE_SIZE_EXT 0x8D52
#define GL_RENDERBUFFER_BLUE_SIZE_OES 0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_ALPHA_SIZE_EXT 0x8D53
#define GL_RENDERBUFFER_ALPHA_SIZE_OES 0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_DEPTH_SIZE_EXT 0x8D54
#define GL_RENDERBUFFER_DEPTH_SIZE_OES 0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_RENDERBUFFER_STENCIL_SIZE_EXT 0x8D55
#define GL_RENDERBUFFER_STENCIL_SIZE_OES 0x8D55
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV 0x8D56
#define GL_MAX_SAMPLES 0x8D57
#define GL_MAX_SAMPLES_ANGLE 0x8D57
#define GL_MAX_SAMPLES_APPLE 0x8D57
#define GL_MAX_SAMPLES_EXT 0x8D57
#define GL_MAX_SAMPLES_NV 0x8D57
#define GL_TEXTURE_GEN_STR_OES 0x8D60
#define GL_HALF_FLOAT_OES 0x8D61
#define GL_RGB565 0x8D62
#define GL_RGB565_OES 0x8D62
#define GL_ETC1_RGB8_OES 0x8D64
#define GL_TEXTURE_EXTERNAL_OES 0x8D65
#define GL_SAMPLER_EXTERNAL_OES 0x8D66
#define GL_TEXTURE_BINDING_EXTERNAL_OES 0x8D67
#define GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES 0x8D68
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT 0x8D6A
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT 0x8D6C
#define GL_RGBA32UI 0x8D70
#define GL_RGBA32UI_EXT 0x8D70
#define GL_RGB32UI 0x8D71
#define GL_RGB32UI_EXT 0x8D71
#define GL_ALPHA32UI_EXT 0x8D72
#define GL_INTENSITY32UI_EXT 0x8D73
#define GL_LUMINANCE32UI_EXT 0x8D74
#define GL_LUMINANCE_ALPHA32UI_EXT 0x8D75
#define GL_RGBA16UI 0x8D76
#define GL_RGBA16UI_EXT 0x8D76
#define GL_RGB16UI 0x8D77
#define GL_RGB16UI_EXT 0x8D77
#define GL_ALPHA16UI_EXT 0x8D78
#define GL_INTENSITY16UI_EXT 0x8D79
#define GL_LUMINANCE16UI_EXT 0x8D7A
#define GL_LUMINANCE_ALPHA16UI_EXT 0x8D7B
#define GL_RGBA8UI 0x8D7C
#define GL_RGBA8UI_EXT 0x8D7C
#define GL_RGB8UI 0x8D7D
#define GL_RGB8UI_EXT 0x8D7D
#define GL_ALPHA8UI_EXT 0x8D7E
#define GL_INTENSITY8UI_EXT 0x8D7F
#define GL_LUMINANCE8UI_EXT 0x8D80
#define GL_LUMINANCE_ALPHA8UI_EXT 0x8D81
#define GL_RGBA32I 0x8D82
#define GL_RGBA32I_EXT 0x8D82
#define GL_RGB32I 0x8D83
#define GL_RGB32I_EXT 0x8D83
#define GL_ALPHA32I_EXT 0x8D84
#define GL_INTENSITY32I_EXT 0x8D85
#define GL_LUMINANCE32I_EXT 0x8D86
#define GL_LUMINANCE_ALPHA32I_EXT 0x8D87
#define GL_RGBA16I 0x8D88
#define GL_RGBA16I_EXT 0x8D88
#define GL_RGB16I 0x8D89
#define GL_RGB16I_EXT 0x8D89
#define GL_ALPHA16I_EXT 0x8D8A
#define GL_INTENSITY16I_EXT 0x8D8B
#define GL_LUMINANCE16I_EXT 0x8D8C
#define GL_LUMINANCE_ALPHA16I_EXT 0x8D8D
#define GL_RGBA8I 0x8D8E
#define GL_RGBA8I_EXT 0x8D8E
#define GL_RGB8I 0x8D8F
#define GL_RGB8I_EXT 0x8D8F
#define GL_ALPHA8I_EXT 0x8D90
#define GL_INTENSITY8I_EXT 0x8D91
#define GL_LUMINANCE8I_EXT 0x8D92
#define GL_LUMINANCE_ALPHA8I_EXT 0x8D93
#define GL_RED_INTEGER 0x8D94
#define GL_RED_INTEGER_EXT 0x8D94
#define GL_GREEN_INTEGER 0x8D95
#define GL_GREEN_INTEGER_EXT 0x8D95
#define GL_BLUE_INTEGER 0x8D96
#define GL_BLUE_INTEGER_EXT 0x8D96
#define GL_ALPHA_INTEGER 0x8D97
#define GL_ALPHA_INTEGER_EXT 0x8D97
#define GL_RGB_INTEGER 0x8D98
#define GL_RGB_INTEGER_EXT 0x8D98
#define GL_RGBA_INTEGER 0x8D99
#define GL_RGBA_INTEGER_EXT 0x8D99
#define GL_BGR_INTEGER 0x8D9A
#define GL_BGR_INTEGER_EXT 0x8D9A
#define GL_BGRA_INTEGER 0x8D9B
#define GL_BGRA_INTEGER_EXT 0x8D9B
#define GL_LUMINANCE_INTEGER_EXT 0x8D9C
#define GL_LUMINANCE_ALPHA_INTEGER_EXT 0x8D9D
#define GL_RGBA_INTEGER_MODE_EXT 0x8D9E
#define GL_INT_2_10_10_10_REV 0x8D9F
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV 0x8DA0
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV 0x8DA1
#define GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV 0x8DA2
#define GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV 0x8DA3
#define GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV 0x8DA4
#define GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV 0x8DA5
#define GL_MAX_PROGRAM_GENERIC_RESULTS_NV 0x8DA6
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES 0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
#define GL_LAYER_NV 0x8DAA
#define GL_DEPTH_COMPONENT32F_NV 0x8DAB
#define GL_DEPTH32F_STENCIL8_NV 0x8DAC
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV 0x8DAD
#define GL_SHADER_INCLUDE_ARB 0x8DAE
#define GL_DEPTH_BUFFER_FLOAT_MODE_NV 0x8DAF
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_FRAMEBUFFER_SRGB_EXT 0x8DB9
#define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x8DBA
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_RED_RGTC1_EXT 0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT 0x8DBC
#define GL_COMPRESSED_RED_GREEN_RGTC2_EXT 0x8DBD
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT 0x8DBE
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_1D_ARRAY_EXT 0x8DC0
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_2D_ARRAY_EXT 0x8DC1
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_SAMPLER_BUFFER_EXT 0x8DC2
#define GL_SAMPLER_BUFFER_OES 0x8DC2
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_1D_ARRAY_SHADOW_EXT 0x8DC3
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_2D_ARRAY_SHADOW_EXT 0x8DC4
#define GL_SAMPLER_2D_ARRAY_SHADOW_NV 0x8DC4
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_SAMPLER_CUBE_SHADOW_EXT 0x8DC5
#define GL_SAMPLER_CUBE_SHADOW_NV 0x8DC5
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC2_EXT 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC3_EXT 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_UNSIGNED_INT_VEC4_EXT 0x8DC8
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_1D_EXT 0x8DC9
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_2D_EXT 0x8DCA
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_3D_EXT 0x8DCB
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INT_SAMPLER_CUBE_EXT 0x8DCC
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_INT_SAMPLER_2D_RECT_EXT 0x8DCD
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_1D_ARRAY_EXT 0x8DCE
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_INT_SAMPLER_2D_ARRAY_EXT 0x8DCF
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_INT_SAMPLER_BUFFER_EXT 0x8DD0
#define GL_INT_SAMPLER_BUFFER_OES 0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_1D_EXT 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_2D_EXT 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_3D_EXT 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_OES 0x8DD8
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_GEOMETRY_SHADER_ARB 0x8DD9
#define GL_GEOMETRY_SHADER_EXT 0x8DD9
#define GL_GEOMETRY_SHADER_OES 0x8DD9
#define GL_GEOMETRY_VERTICES_OUT_ARB 0x8DDA
#define GL_GEOMETRY_VERTICES_OUT_EXT 0x8DDA
#define GL_GEOMETRY_INPUT_TYPE_ARB 0x8DDB
#define GL_GEOMETRY_INPUT_TYPE_EXT 0x8DDB
#define GL_GEOMETRY_OUTPUT_TYPE_ARB 0x8DDC
#define GL_GEOMETRY_OUTPUT_TYPE_EXT 0x8DDC
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0x8DDD
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0x8DDD
#define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0x8DDE
#define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0x8DDE
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES 0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES 0x8DE1
#define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 0x8DE2
#define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 0x8DE3
#define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 0x8DE4
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_NAMED_STRING_LENGTH_ARB 0x8DE9
#define GL_NAMED_STRING_TYPE_ARB 0x8DEA
#define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT 0x8DED
#define GL_UNIFORM_BUFFER_EXT 0x8DEE
#define GL_UNIFORM_BUFFER_BINDING_EXT 0x8DEF
#define GL_LOW_FLOAT 0x8DF0
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_HIGH_FLOAT 0x8DF2
#define GL_LOW_INT 0x8DF3
#define GL_MEDIUM_INT 0x8DF4
#define GL_HIGH_INT 0x8DF5
#define GL_UNSIGNED_INT_10_10_10_2_OES 0x8DF6
#define GL_INT_10_10_10_2_OES 0x8DF7
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_SHADER_COMPILER 0x8DFA
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_RENDERBUFFER_COLOR_SAMPLES_NV 0x8E10
#define GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV 0x8E11
#define GL_MULTISAMPLE_COVERAGE_MODES_NV 0x8E12
#define GL_QUERY_WAIT 0x8E13
#define GL_QUERY_WAIT_NV 0x8E13
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_NO_WAIT_NV 0x8E14
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_BY_REGION_WAIT_NV 0x8E15
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_QUERY_BY_REGION_NO_WAIT_NV 0x8E16
#define GL_QUERY_WAIT_INVERTED 0x8E17
#define GL_QUERY_NO_WAIT_INVERTED 0x8E18
#define GL_QUERY_BY_REGION_WAIT_INVERTED 0x8E19
#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A
#define GL_POLYGON_OFFSET_CLAMP_EXT 0x8E1B
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT 0x8E1E
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT 0x8E1F
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES 0x8E1F
#define GL_COLOR_SAMPLES_NV 0x8E20
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TRANSFORM_FEEDBACK_NV 0x8E22
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV 0x8E23
#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV 0x8E24
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_TRANSFORM_FEEDBACK_BINDING_NV 0x8E25
#define GL_FRAME_NV 0x8E26
#define GL_FIELDS_NV 0x8E27
#define GL_CURRENT_TIME_NV 0x8E28
#define GL_TIMESTAMP 0x8E28
#define GL_TIMESTAMP_EXT 0x8E28
#define GL_NUM_FILL_STREAMS_NV 0x8E29
#define GL_PRESENT_TIME_NV 0x8E2A
#define GL_PRESENT_DURATION_NV 0x8E2B
#define GL_DEPTH_COMPONENT16_NONLINEAR_NV 0x8E2C
#define GL_PROGRAM_MATRIX_EXT 0x8E2D
#define GL_TRANSPOSE_PROGRAM_MATRIX_EXT 0x8E2E
#define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT 0x8E2F
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_SWIZZLE_R_EXT 0x8E42
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_G_EXT 0x8E43
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_B_EXT 0x8E44
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_A_EXT 0x8E45
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_TEXTURE_SWIZZLE_RGBA_EXT 0x8E46
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT 0x8E4C
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_FIRST_VERTEX_CONVENTION_EXT 0x8E4D
#define GL_FIRST_VERTEX_CONVENTION_OES 0x8E4D
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_LAST_VERTEX_CONVENTION_EXT 0x8E4E
#define GL_LAST_VERTEX_CONVENTION_OES 0x8E4E
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_PROVOKING_VERTEX_EXT 0x8E4F
#define GL_SAMPLE_LOCATION_ARB 0x8E50
#define GL_SAMPLE_LOCATION_NV 0x8E50
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SAMPLE_POSITION_NV 0x8E50
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_NV 0x8E51
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_SAMPLE_MASK_VALUE_NV 0x8E52
#define GL_TEXTURE_BINDING_RENDERBUFFER_NV 0x8E53
#define GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV 0x8E54
#define GL_TEXTURE_RENDERBUFFER_NV 0x8E55
#define GL_SAMPLER_RENDERBUFFER_NV 0x8E56
#define GL_INT_SAMPLER_RENDERBUFFER_NV 0x8E57
#define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV 0x8E58
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_MAX_SAMPLE_MASK_WORDS_NV 0x8E59
#define GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES 0x8E5A
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5B
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES 0x8E5B
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5C
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES 0x8E5C
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES 0x8E5D
#define GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV 0x8E5D
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5E
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5F
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5F
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_PATCH_VERTICES 0x8E72
#define GL_PATCH_VERTICES_EXT 0x8E72
#define GL_PATCH_VERTICES_OES 0x8E72
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_PATCH_DEFAULT_INNER_LEVEL_EXT 0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_PATCH_DEFAULT_OUTER_LEVEL_EXT 0x8E74
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_TESS_CONTROL_OUTPUT_VERTICES_EXT 0x8E75
#define GL_TESS_CONTROL_OUTPUT_VERTICES_OES 0x8E75
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_GEN_MODE_EXT 0x8E76
#define GL_TESS_GEN_MODE_OES 0x8E76
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TESS_GEN_SPACING_EXT 0x8E77
#define GL_TESS_GEN_SPACING_OES 0x8E77
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_TESS_GEN_VERTEX_ORDER_EXT 0x8E78
#define GL_TESS_GEN_VERTEX_ORDER_OES 0x8E78
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_TESS_GEN_POINT_MODE_EXT 0x8E79
#define GL_TESS_GEN_POINT_MODE_OES 0x8E79
#define GL_ISOLINES 0x8E7A
#define GL_ISOLINES_EXT 0x8E7A
#define GL_ISOLINES_OES 0x8E7A
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRACTIONAL_ODD_EXT 0x8E7B
#define GL_FRACTIONAL_ODD_OES 0x8E7B
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_FRACTIONAL_EVEN_EXT 0x8E7C
#define GL_FRACTIONAL_EVEN_OES 0x8E7C
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_MAX_PATCH_VERTICES_EXT 0x8E7D
#define GL_MAX_PATCH_VERTICES_OES 0x8E7D
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_MAX_TESS_GEN_LEVEL_EXT 0x8E7E
#define GL_MAX_TESS_GEN_LEVEL_OES 0x8E7E
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT 0x8E7F
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES 0x8E7F
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT 0x8E80
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES 0x8E80
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT 0x8E81
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES 0x8E81
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT 0x8E82
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES 0x8E82
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT 0x8E83
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES 0x8E83
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TESS_PATCH_COMPONENTS_EXT 0x8E84
#define GL_MAX_TESS_PATCH_COMPONENTS_OES 0x8E84
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT 0x8E85
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES 0x8E85
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT 0x8E86
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES 0x8E86
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TESS_EVALUATION_SHADER_EXT 0x8E87
#define GL_TESS_EVALUATION_SHADER_OES 0x8E87
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_TESS_CONTROL_SHADER_EXT 0x8E88
#define GL_TESS_CONTROL_SHADER_OES 0x8E88
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT 0x8E89
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES 0x8E89
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT 0x8E8A
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES 0x8E8A
#define GL_COMPRESSED_RGBA_BPTC_UNORM 0x8E8C
#define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB 0x8E8C
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB 0x8E8D
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB 0x8E8F
#define GL_COVERAGE_COMPONENT_NV 0x8ED0
#define GL_COVERAGE_COMPONENT4_NV 0x8ED1
#define GL_COVERAGE_ATTACHMENT_NV 0x8ED2
#define GL_COVERAGE_BUFFERS_NV 0x8ED3
#define GL_COVERAGE_SAMPLES_NV 0x8ED4
#define GL_COVERAGE_ALL_FRAGMENTS_NV 0x8ED5
#define GL_COVERAGE_EDGE_FRAGMENTS_NV 0x8ED6
#define GL_COVERAGE_AUTOMATIC_NV 0x8ED7
#define GL_INCLUSIVE_EXT 0x8F10
#define GL_EXCLUSIVE_EXT 0x8F11
#define GL_WINDOW_RECTANGLE_EXT 0x8F12
#define GL_WINDOW_RECTANGLE_MODE_EXT 0x8F13
#define GL_MAX_WINDOW_RECTANGLES_EXT 0x8F14
#define GL_NUM_WINDOW_RECTANGLES_EXT 0x8F15
#define GL_BUFFER_GPU_ADDRESS_NV 0x8F1D
#define GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV 0x8F1E
#define GL_ELEMENT_ARRAY_UNIFIED_NV 0x8F1F
#define GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV 0x8F20
#define GL_VERTEX_ARRAY_ADDRESS_NV 0x8F21
#define GL_NORMAL_ARRAY_ADDRESS_NV 0x8F22
#define GL_COLOR_ARRAY_ADDRESS_NV 0x8F23
#define GL_INDEX_ARRAY_ADDRESS_NV 0x8F24
#define GL_TEXTURE_COORD_ARRAY_ADDRESS_NV 0x8F25
#define GL_EDGE_FLAG_ARRAY_ADDRESS_NV 0x8F26
#define GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV 0x8F27
#define GL_FOG_COORD_ARRAY_ADDRESS_NV 0x8F28
#define GL_ELEMENT_ARRAY_ADDRESS_NV 0x8F29
#define GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV 0x8F2A
#define GL_VERTEX_ARRAY_LENGTH_NV 0x8F2B
#define GL_NORMAL_ARRAY_LENGTH_NV 0x8F2C
#define GL_COLOR_ARRAY_LENGTH_NV 0x8F2D
#define GL_INDEX_ARRAY_LENGTH_NV 0x8F2E
#define GL_TEXTURE_COORD_ARRAY_LENGTH_NV 0x8F2F
#define GL_EDGE_FLAG_ARRAY_LENGTH_NV 0x8F30
#define GL_SECONDARY_COLOR_ARRAY_LENGTH_NV 0x8F31
#define GL_FOG_COORD_ARRAY_LENGTH_NV 0x8F32
#define GL_ELEMENT_ARRAY_LENGTH_NV 0x8F33
#define GL_GPU_ADDRESS_NV 0x8F34
#define GL_MAX_SHADER_BUFFER_ADDRESS_NV 0x8F35
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_READ_BUFFER_BINDING 0x8F36
#define GL_COPY_READ_BUFFER_NV 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
#define GL_COPY_WRITE_BUFFER_NV 0x8F37
#define GL_MAX_IMAGE_UNITS 0x8F38
#define GL_MAX_IMAGE_UNITS_EXT 0x8F38
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT 0x8F39
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_IMAGE_BINDING_NAME 0x8F3A
#define GL_IMAGE_BINDING_NAME_EXT 0x8F3A
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#define GL_IMAGE_BINDING_LEVEL_EXT 0x8F3B
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#define GL_IMAGE_BINDING_LAYERED_EXT 0x8F3C
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#define GL_IMAGE_BINDING_LAYER_EXT 0x8F3D
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#define GL_IMAGE_BINDING_ACCESS_EXT 0x8F3E
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_DRAW_INDIRECT_UNIFIED_NV 0x8F40
#define GL_DRAW_INDIRECT_ADDRESS_NV 0x8F41
#define GL_DRAW_INDIRECT_LENGTH_NV 0x8F42
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV 0x8F44
#define GL_MAX_PROGRAM_SUBROUTINE_NUM_NV 0x8F45
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT2_EXT 0x8F46
#define GL_DOUBLE_MAT3 0x8F47
#define GL_DOUBLE_MAT3_EXT 0x8F47
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT4_EXT 0x8F48
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_DOUBLE_MAT2x3_EXT 0x8F49
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_DOUBLE_MAT2x4_EXT 0x8F4A
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_DOUBLE_MAT3x2_EXT 0x8F4B
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_DOUBLE_MAT3x4_EXT 0x8F4C
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x2_EXT 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_DOUBLE_MAT4x3_EXT 0x8F4E
#define GL_VERTEX_BINDING_BUFFER 0x8F4F
#define GL_MALI_SHADER_BINARY_ARM 0x8F60
#define GL_MALI_PROGRAM_BINARY_ARM 0x8F61
#define GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT 0x8F63
#define GL_SHADER_PIXEL_LOCAL_STORAGE_EXT 0x8F64
#define GL_FETCH_PER_SAMPLE_ARM 0x8F65
#define GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM 0x8F66
#define GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT 0x8F67
#define GL_TEXTURE_ASTC_DECODE_PRECISION_EXT 0x8F69
#define GL_RED_SNORM 0x8F90
#define GL_RG_SNORM 0x8F91
#define GL_RGB_SNORM 0x8F92
#define GL_RGBA_SNORM 0x8F93
#define GL_R8_SNORM 0x8F94
#define GL_RG8_SNORM 0x8F95
#define GL_RGB8_SNORM 0x8F96
#define GL_RGBA8_SNORM 0x8F97
#define GL_R16_SNORM 0x8F98
#define GL_R16_SNORM_EXT 0x8F98
#define GL_RG16_SNORM 0x8F99
#define GL_RG16_SNORM_EXT 0x8F99
#define GL_RGB16_SNORM 0x8F9A
#define GL_RGB16_SNORM_EXT 0x8F9A
#define GL_RGBA16_SNORM 0x8F9B
#define GL_RGBA16_SNORM_EXT 0x8F9B
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB 0x8F9F
#define GL_PERFMON_GLOBAL_MODE_QCOM 0x8FA0
#define GL_BINNING_CONTROL_HINT_QCOM 0x8FB0
#define GL_CPU_OPTIMIZED_QCOM 0x8FB1
#define GL_GPU_OPTIMIZED_QCOM 0x8FB2
#define GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM 0x8FB3
#define GL_GPU_DISJOINT_EXT 0x8FBB
#define GL_SR8_EXT 0x8FBD
#define GL_SRG8_EXT 0x8FBE
#define GL_SHADER_BINARY_VIV 0x8FC4
#define GL_INT8_NV 0x8FE0
#define GL_INT8_VEC2_NV 0x8FE1
#define GL_INT8_VEC3_NV 0x8FE2
#define GL_INT8_VEC4_NV 0x8FE3
#define GL_INT16_NV 0x8FE4
#define GL_INT16_VEC2_NV 0x8FE5
#define GL_INT16_VEC3_NV 0x8FE6
#define GL_INT16_VEC4_NV 0x8FE7
#define GL_INT64_VEC2_ARB 0x8FE9
#define GL_INT64_VEC2_NV 0x8FE9
#define GL_INT64_VEC3_ARB 0x8FEA
#define GL_INT64_VEC3_NV 0x8FEA
#define GL_INT64_VEC4_ARB 0x8FEB
#define GL_INT64_VEC4_NV 0x8FEB
#define GL_UNSIGNED_INT8_NV 0x8FEC
#define GL_UNSIGNED_INT8_VEC2_NV 0x8FED
#define GL_UNSIGNED_INT8_VEC3_NV 0x8FEE
#define GL_UNSIGNED_INT8_VEC4_NV 0x8FEF
#define GL_UNSIGNED_INT16_NV 0x8FF0
#define GL_UNSIGNED_INT16_VEC2_NV 0x8FF1
#define GL_UNSIGNED_INT16_VEC3_NV 0x8FF2
#define GL_UNSIGNED_INT16_VEC4_NV 0x8FF3
#define GL_UNSIGNED_INT64_VEC2_ARB 0x8FF5
#define GL_UNSIGNED_INT64_VEC2_NV 0x8FF5
#define GL_UNSIGNED_INT64_VEC3_ARB 0x8FF6
#define GL_UNSIGNED_INT64_VEC3_NV 0x8FF6
#define GL_UNSIGNED_INT64_VEC4_ARB 0x8FF7
#define GL_UNSIGNED_INT64_VEC4_NV 0x8FF7
#define GL_FLOAT16_NV 0x8FF8
#define GL_FLOAT16_VEC2_NV 0x8FF9
#define GL_FLOAT16_VEC3_NV 0x8FFA
#define GL_FLOAT16_VEC4_NV 0x8FFB
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DOUBLE_VEC2_EXT 0x8FFC
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_DOUBLE_VEC3_EXT 0x8FFD
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_DOUBLE_VEC4_EXT 0x8FFE
#define GL_SAMPLER_BUFFER_AMD 0x9001
#define GL_INT_SAMPLER_BUFFER_AMD 0x9002
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD 0x9003
#define GL_TESSELLATION_MODE_AMD 0x9004
#define GL_TESSELLATION_FACTOR_AMD 0x9005
#define GL_DISCRETE_AMD 0x9006
#define GL_CONTINUOUS_AMD 0x9007
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_TEXTURE_CUBE_MAP_ARRAY_ARB 0x9009
#define GL_TEXTURE_CUBE_MAP_ARRAY_EXT 0x9009
#define GL_TEXTURE_CUBE_MAP_ARRAY_OES 0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB 0x900A
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT 0x900A
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES 0x900A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB 0x900B
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_EXT 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_OES 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB 0x900D
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT 0x900D
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES 0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900E
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT 0x900E
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES 0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900F
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT 0x900F
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES 0x900F
#define GL_ALPHA_SNORM 0x9010
#define GL_LUMINANCE_SNORM 0x9011
#define GL_LUMINANCE_ALPHA_SNORM 0x9012
#define GL_INTENSITY_SNORM 0x9013
#define GL_ALPHA8_SNORM 0x9014
#define GL_LUMINANCE8_SNORM 0x9015
#define GL_LUMINANCE8_ALPHA8_SNORM 0x9016
#define GL_INTENSITY8_SNORM 0x9017
#define GL_ALPHA16_SNORM 0x9018
#define GL_LUMINANCE16_SNORM 0x9019
#define GL_LUMINANCE16_ALPHA16_SNORM 0x901A
#define GL_INTENSITY16_SNORM 0x901B
#define GL_FACTOR_MIN_AMD 0x901C
#define GL_FACTOR_MAX_AMD 0x901D
#define GL_DEPTH_CLAMP_NEAR_AMD 0x901E
#define GL_DEPTH_CLAMP_FAR_AMD 0x901F
#define GL_VIDEO_BUFFER_NV 0x9020
#define GL_VIDEO_BUFFER_BINDING_NV 0x9021
#define GL_FIELD_UPPER_NV 0x9022
#define GL_FIELD_LOWER_NV 0x9023
#define GL_NUM_VIDEO_CAPTURE_STREAMS_NV 0x9024
#define GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV 0x9025
#define GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV 0x9026
#define GL_LAST_VIDEO_CAPTURE_STATUS_NV 0x9027
#define GL_VIDEO_BUFFER_PITCH_NV 0x9028
#define GL_VIDEO_COLOR_CONVERSION_MATRIX_NV 0x9029
#define GL_VIDEO_COLOR_CONVERSION_MAX_NV 0x902A
#define GL_VIDEO_COLOR_CONVERSION_MIN_NV 0x902B
#define GL_VIDEO_COLOR_CONVERSION_OFFSET_NV 0x902C
#define GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV 0x902D
#define GL_PARTIAL_SUCCESS_NV 0x902E
#define GL_SUCCESS_NV 0x902F
#define GL_FAILURE_NV 0x9030
#define GL_YCBYCR8_422_NV 0x9031
#define GL_YCBAYCR8A_4224_NV 0x9032
#define GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV 0x9033
#define GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV 0x9034
#define GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV 0x9035
#define GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV 0x9036
#define GL_Z4Y12Z4CB12Z4CR12_444_NV 0x9037
#define GL_VIDEO_CAPTURE_FRAME_WIDTH_NV 0x9038
#define GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV 0x9039
#define GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV 0x903A
#define GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV 0x903B
#define GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV 0x903C
#define GL_TEXTURE_COVERAGE_SAMPLES_NV 0x9045
#define GL_TEXTURE_COLOR_SAMPLES_NV 0x9046
#define GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX 0x9047
#define GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX 0x9048
#define GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX 0x9049
#define GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX 0x904A
#define GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX 0x904B
#define GL_IMAGE_1D 0x904C
#define GL_IMAGE_1D_EXT 0x904C
#define GL_IMAGE_2D 0x904D
#define GL_IMAGE_2D_EXT 0x904D
#define GL_IMAGE_3D 0x904E
#define GL_IMAGE_3D_EXT 0x904E
#define GL_IMAGE_2D_RECT 0x904F
#define GL_IMAGE_2D_RECT_EXT 0x904F
#define GL_IMAGE_CUBE 0x9050
#define GL_IMAGE_CUBE_EXT 0x9050
#define GL_IMAGE_BUFFER 0x9051
#define GL_IMAGE_BUFFER_EXT 0x9051
#define GL_IMAGE_BUFFER_OES 0x9051
#define GL_IMAGE_1D_ARRAY 0x9052
#define GL_IMAGE_1D_ARRAY_EXT 0x9052
#define GL_IMAGE_2D_ARRAY 0x9053
#define GL_IMAGE_2D_ARRAY_EXT 0x9053
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#define GL_IMAGE_CUBE_MAP_ARRAY_EXT 0x9054
#define GL_IMAGE_CUBE_MAP_ARRAY_OES 0x9054
#define GL_IMAGE_2D_MULTISAMPLE 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_EXT 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9056
#define GL_INT_IMAGE_1D 0x9057
#define GL_INT_IMAGE_1D_EXT 0x9057
#define GL_INT_IMAGE_2D 0x9058
#define GL_INT_IMAGE_2D_EXT 0x9058
#define GL_INT_IMAGE_3D 0x9059
#define GL_INT_IMAGE_3D_EXT 0x9059
#define GL_INT_IMAGE_2D_RECT 0x905A
#define GL_INT_IMAGE_2D_RECT_EXT 0x905A
#define GL_INT_IMAGE_CUBE 0x905B
#define GL_INT_IMAGE_CUBE_EXT 0x905B
#define GL_INT_IMAGE_BUFFER 0x905C
#define GL_INT_IMAGE_BUFFER_EXT 0x905C
#define GL_INT_IMAGE_BUFFER_OES 0x905C
#define GL_INT_IMAGE_1D_ARRAY 0x905D
#define GL_INT_IMAGE_1D_ARRAY_EXT 0x905D
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#define GL_INT_IMAGE_2D_ARRAY_EXT 0x905E
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#define GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x905F
#define GL_INT_IMAGE_CUBE_MAP_ARRAY_OES 0x905F
#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_EXT 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9061
#define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#define GL_UNSIGNED_INT_IMAGE_1D_EXT 0x9062
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#define GL_UNSIGNED_INT_IMAGE_2D_EXT 0x9063
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#define GL_UNSIGNED_INT_IMAGE_3D_EXT 0x9064
#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#define GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT 0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#define GL_UNSIGNED_INT_IMAGE_CUBE_EXT 0x9066
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT 0x9067
#define GL_UNSIGNED_INT_IMAGE_BUFFER_OES 0x9067
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT 0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT 0x9069
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x906A
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES 0x906A
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x906C
#define GL_MAX_IMAGE_SAMPLES 0x906D
#define GL_MAX_IMAGE_SAMPLES_EXT 0x906D
#define GL_IMAGE_BINDING_FORMAT 0x906E
#define GL_IMAGE_BINDING_FORMAT_EXT 0x906E
#define GL_RGB10_A2UI 0x906F
#define GL_PATH_FORMAT_SVG_NV 0x9070
#define GL_PATH_FORMAT_PS_NV 0x9071
#define GL_STANDARD_FONT_NAME_NV 0x9072
#define GL_SYSTEM_FONT_NAME_NV 0x9073
#define GL_FILE_NAME_NV 0x9074
#define GL_PATH_STROKE_WIDTH_NV 0x9075
#define GL_PATH_END_CAPS_NV 0x9076
#define GL_PATH_INITIAL_END_CAP_NV 0x9077
#define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#define GL_PATH_JOIN_STYLE_NV 0x9079
#define GL_PATH_MITER_LIMIT_NV 0x907A
#define GL_PATH_DASH_CAPS_NV 0x907B
#define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#define GL_PATH_DASH_OFFSET_NV 0x907E
#define GL_PATH_CLIENT_LENGTH_NV 0x907F
#define GL_PATH_FILL_MODE_NV 0x9080
#define GL_PATH_FILL_MASK_NV 0x9081
#define GL_PATH_FILL_COVER_MODE_NV 0x9082
#define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#define GL_PATH_STROKE_MASK_NV 0x9084
#define GL_COUNT_UP_NV 0x9088
#define GL_COUNT_DOWN_NV 0x9089
#define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#define GL_CONVEX_HULL_NV 0x908B
#define GL_BOUNDING_BOX_NV 0x908D
#define GL_TRANSLATE_X_NV 0x908E
#define GL_TRANSLATE_Y_NV 0x908F
#define GL_TRANSLATE_2D_NV 0x9090
#define GL_TRANSLATE_3D_NV 0x9091
#define GL_AFFINE_2D_NV 0x9092
#define GL_AFFINE_3D_NV 0x9094
#define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#define GL_UTF8_NV 0x909A
#define GL_UTF16_NV 0x909B
#define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#define GL_PATH_COMMAND_COUNT_NV 0x909D
#define GL_PATH_COORD_COUNT_NV 0x909E
#define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#define GL_SQUARE_NV 0x90A3
#define GL_ROUND_NV 0x90A4
#define GL_TRIANGULAR_NV 0x90A5
#define GL_BEVEL_NV 0x90A6
#define GL_MITER_REVERT_NV 0x90A7
#define GL_MITER_TRUNCATE_NV 0x90A8
#define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#define GL_USE_MISSING_GLYPH_NV 0x90AA
#define GL_PATH_ERROR_POSITION_NV 0x90AB
#define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#define GL_ADJACENT_PAIRS_NV 0x90AE
#define GL_FIRST_TO_REST_NV 0x90AF
#define GL_PATH_GEN_MODE_NV 0x90B0
#define GL_PATH_GEN_COEFF_NV 0x90B1
#define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#define GL_MOVE_TO_RESETS_NV 0x90B5
#define GL_MOVE_TO_CONTINUES_NV 0x90B6
#define GL_PATH_STENCIL_FUNC_NV 0x90B7
#define GL_PATH_STENCIL_REF_NV 0x90B8
#define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#define GL_SCALED_RESOLVE_FASTEST_EXT 0x90BA
#define GL_SCALED_RESOLVE_NICEST_EXT 0x90BB
#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
#define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT 0x90CB
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES 0x90CB
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT 0x90CC
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES 0x90CC
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT 0x90CD
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES 0x90CD
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#define GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV 0x90D0
#define GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV 0x90D1
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT 0x90D7
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES 0x90D7
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT 0x90D8
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES 0x90D8
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT 0x90D9
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES 0x90D9
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_SYNC_X11_FENCE_EXT 0x90E1
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#define GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB 0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_COLOR_ATTACHMENT_EXT 0x90F0
#define GL_MULTIVIEW_EXT 0x90F1
#define GL_MAX_MULTIVIEW_BUFFERS_EXT 0x90F2
#define GL_CONTEXT_ROBUST_ACCESS 0x90F3
#define GL_CONTEXT_ROBUST_ACCESS_EXT 0x90F3
#define GL_CONTEXT_ROBUST_ACCESS_KHR 0x90F3
#define GL_COMPUTE_PROGRAM_NV 0x90FB
#define GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV 0x90FC
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES 0x9102
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES 0x9105
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910B
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910C
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910D
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_MAX_SERVER_WAIT_TIMEOUT_APPLE 0x9111
#define GL_OBJECT_TYPE 0x9112
#define GL_OBJECT_TYPE_APPLE 0x9112
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_CONDITION_APPLE 0x9113
#define GL_SYNC_STATUS 0x9114
#define GL_SYNC_STATUS_APPLE 0x9114
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FLAGS_APPLE 0x9115
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_FENCE_APPLE 0x9116
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE 0x9117
#define GL_UNSIGNALED 0x9118
#define GL_UNSIGNALED_APPLE 0x9118
#define GL_SIGNALED 0x9119
#define GL_SIGNALED_APPLE 0x9119
#define GL_ALREADY_SIGNALED 0x911A
#define GL_ALREADY_SIGNALED_APPLE 0x911A
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_TIMEOUT_EXPIRED_APPLE 0x911B
#define GL_CONDITION_SATISFIED 0x911C
#define GL_CONDITION_SATISFIED_APPLE 0x911C
#define GL_WAIT_FAILED 0x911D
#define GL_WAIT_FAILED_APPLE 0x911D
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT 0x9123
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT 0x9124
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES 0x9124
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#define GL_TEXTURE_IMMUTABLE_FORMAT_EXT 0x912F
#define GL_SGX_PROGRAM_BINARY_IMG 0x9130
#define GL_RENDERBUFFER_SAMPLES_IMG 0x9133
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG 0x9134
#define GL_MAX_SAMPLES_IMG 0x9135
#define GL_TEXTURE_SAMPLES_IMG 0x9136
#define GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG 0x9137
#define GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG 0x9138
#define GL_CUBIC_IMG 0x9139
#define GL_CUBIC_MIPMAP_NEAREST_IMG 0x913A
#define GL_CUBIC_MIPMAP_LINEAR_IMG 0x913B
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG 0x913C
#define GL_NUM_DOWNSAMPLE_SCALES_IMG 0x913D
#define GL_DOWNSAMPLE_SCALES_IMG 0x913E
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG 0x913F
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#define GL_MAX_DEBUG_MESSAGE_LENGTH_AMD 0x9143
#define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB 0x9143
#define GL_MAX_DEBUG_MESSAGE_LENGTH_KHR 0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#define GL_MAX_DEBUG_LOGGED_MESSAGES_AMD 0x9144
#define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB 0x9144
#define GL_MAX_DEBUG_LOGGED_MESSAGES_KHR 0x9144
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#define GL_DEBUG_LOGGED_MESSAGES_AMD 0x9145
#define GL_DEBUG_LOGGED_MESSAGES_ARB 0x9145
#define GL_DEBUG_LOGGED_MESSAGES_KHR 0x9145
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#define GL_DEBUG_SEVERITY_HIGH_AMD 0x9146
#define GL_DEBUG_SEVERITY_HIGH_ARB 0x9146
#define GL_DEBUG_SEVERITY_HIGH_KHR 0x9146
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#define GL_DEBUG_SEVERITY_MEDIUM_AMD 0x9147
#define GL_DEBUG_SEVERITY_MEDIUM_ARB 0x9147
#define GL_DEBUG_SEVERITY_MEDIUM_KHR 0x9147
#define GL_DEBUG_SEVERITY_LOW 0x9148
#define GL_DEBUG_SEVERITY_LOW_AMD 0x9148
#define GL_DEBUG_SEVERITY_LOW_ARB 0x9148
#define GL_DEBUG_SEVERITY_LOW_KHR 0x9148
#define GL_DEBUG_CATEGORY_API_ERROR_AMD 0x9149
#define GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD 0x914A
#define GL_DEBUG_CATEGORY_DEPRECATION_AMD 0x914B
#define GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD 0x914C
#define GL_DEBUG_CATEGORY_PERFORMANCE_AMD 0x914D
#define GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD 0x914E
#define GL_DEBUG_CATEGORY_APPLICATION_AMD 0x914F
#define GL_DEBUG_CATEGORY_OTHER_AMD 0x9150
#define GL_BUFFER_OBJECT_EXT 0x9151
#define GL_DATA_BUFFER_AMD 0x9151
#define GL_PERFORMANCE_MONITOR_AMD 0x9152
#define GL_QUERY_OBJECT_AMD 0x9153
#define GL_QUERY_OBJECT_EXT 0x9153
#define GL_VERTEX_ARRAY_OBJECT_AMD 0x9154
#define GL_VERTEX_ARRAY_OBJECT_EXT 0x9154
#define GL_SAMPLER_OBJECT_AMD 0x9155
#define GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD 0x9160
#define GL_QUERY_BUFFER 0x9192
#define GL_QUERY_BUFFER_AMD 0x9192
#define GL_QUERY_BUFFER_BINDING 0x9193
#define GL_QUERY_BUFFER_BINDING_AMD 0x9193
#define GL_QUERY_RESULT_NO_WAIT 0x9194
#define GL_QUERY_RESULT_NO_WAIT_AMD 0x9194
#define GL_VIRTUAL_PAGE_SIZE_X_AMD 0x9195
#define GL_VIRTUAL_PAGE_SIZE_X_ARB 0x9195
#define GL_VIRTUAL_PAGE_SIZE_X_EXT 0x9195
#define GL_VIRTUAL_PAGE_SIZE_Y_AMD 0x9196
#define GL_VIRTUAL_PAGE_SIZE_Y_ARB 0x9196
#define GL_VIRTUAL_PAGE_SIZE_Y_EXT 0x9196
#define GL_VIRTUAL_PAGE_SIZE_Z_AMD 0x9197
#define GL_VIRTUAL_PAGE_SIZE_Z_ARB 0x9197
#define GL_VIRTUAL_PAGE_SIZE_Z_EXT 0x9197
#define GL_MAX_SPARSE_TEXTURE_SIZE_AMD 0x9198
#define GL_MAX_SPARSE_TEXTURE_SIZE_ARB 0x9198
#define GL_MAX_SPARSE_TEXTURE_SIZE_EXT 0x9198
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD 0x9199
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB 0x9199
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT 0x9199
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS 0x919A
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB 0x919A
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT 0x919A
#define GL_MIN_SPARSE_LEVEL_AMD 0x919B
#define GL_MIN_LOD_WARNING_AMD 0x919C
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#define GL_TEXTURE_BUFFER_OFFSET_EXT 0x919D
#define GL_TEXTURE_BUFFER_OFFSET_OES 0x919D
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#define GL_TEXTURE_BUFFER_SIZE_EXT 0x919E
#define GL_TEXTURE_BUFFER_SIZE_OES 0x919E
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT 0x919F
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES 0x919F
#define GL_STREAM_RASTERIZATION_AMD 0x91A0
#define GL_VERTEX_ELEMENT_SWIZZLE_AMD 0x91A4
#define GL_VERTEX_ID_SWIZZLE_AMD 0x91A5
#define GL_TEXTURE_SPARSE_ARB 0x91A6
#define GL_TEXTURE_SPARSE_EXT 0x91A6
#define GL_VIRTUAL_PAGE_SIZE_INDEX_ARB 0x91A7
#define GL_VIRTUAL_PAGE_SIZE_INDEX_EXT 0x91A7
#define GL_NUM_VIRTUAL_PAGE_SIZES_ARB 0x91A8
#define GL_NUM_VIRTUAL_PAGE_SIZES_EXT 0x91A8
#define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB 0x91A9
#define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT 0x91A9
#define GL_NUM_SPARSE_LEVELS_ARB 0x91AA
#define GL_NUM_SPARSE_LEVELS_EXT 0x91AA
#define GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD 0x91AE
#define GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD 0x91AF
#define GL_MAX_SHADER_COMPILER_THREADS_ARB 0x91B0
#define GL_COMPLETION_STATUS_ARB 0x91B1
#define GL_COMPUTE_SHADER 0x91B9
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#define GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB 0x91BF
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#define GL_FLOAT16_MAT2_AMD 0x91C5
#define GL_FLOAT16_MAT3_AMD 0x91C6
#define GL_FLOAT16_MAT4_AMD 0x91C7
#define GL_FLOAT16_MAT2x3_AMD 0x91C8
#define GL_FLOAT16_MAT2x4_AMD 0x91C9
#define GL_FLOAT16_MAT3x2_AMD 0x91CA
#define GL_FLOAT16_MAT3x4_AMD 0x91CB
#define GL_FLOAT16_MAT4x2_AMD 0x91CC
#define GL_FLOAT16_MAT4x3_AMD 0x91CD
#define GL_UNPACK_FLIP_Y_WEBGL 0x9240
#define GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL 0x9241
#define GL_CONTEXT_LOST_WEBGL 0x9242
#define GL_UNPACK_COLORSPACE_CONVERSION_WEBGL 0x9243
#define GL_BROWSER_DEFAULT_WEBGL 0x9244
#define GL_SHADER_BINARY_DMP 0x9250
#define GL_SMAPHS30_PROGRAM_BINARY_DMP 0x9251
#define GL_SMAPHS_PROGRAM_BINARY_DMP 0x9252
#define GL_DMP_PROGRAM_BINARY_DMP 0x9253
#define GL_GCCSO_SHADER_BINARY_FJ 0x9260
#define GL_COMPRESSED_R11_EAC 0x9270
#define GL_COMPRESSED_R11_EAC_OES 0x9270
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#define GL_COMPRESSED_SIGNED_R11_EAC_OES 0x9271
#define GL_COMPRESSED_RG11_EAC 0x9272
#define GL_COMPRESSED_RG11_EAC_OES 0x9272
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#define GL_COMPRESSED_SIGNED_RG11_EAC_OES 0x9273
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#define GL_COMPRESSED_RGB8_ETC2_OES 0x9274
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#define GL_COMPRESSED_SRGB8_ETC2_OES 0x9275
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES 0x9276
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES 0x9277
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#define GL_COMPRESSED_RGBA8_ETC2_EAC_OES 0x9278
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES 0x9279
#define GL_BLEND_PREMULTIPLIED_SRC_NV 0x9280
#define GL_BLEND_OVERLAP_NV 0x9281
#define GL_UNCORRELATED_NV 0x9282
#define GL_DISJOINT_NV 0x9283
#define GL_CONJOINT_NV 0x9284
#define GL_BLEND_ADVANCED_COHERENT_KHR 0x9285
#define GL_BLEND_ADVANCED_COHERENT_NV 0x9285
#define GL_SRC_NV 0x9286
#define GL_DST_NV 0x9287
#define GL_SRC_OVER_NV 0x9288
#define GL_DST_OVER_NV 0x9289
#define GL_SRC_IN_NV 0x928A
#define GL_DST_IN_NV 0x928B
#define GL_SRC_OUT_NV 0x928C
#define GL_DST_OUT_NV 0x928D
#define GL_SRC_ATOP_NV 0x928E
#define GL_DST_ATOP_NV 0x928F
#define GL_PLUS_NV 0x9291
#define GL_PLUS_DARKER_NV 0x9292
#define GL_MULTIPLY 0x9294
#define GL_MULTIPLY_KHR 0x9294
#define GL_MULTIPLY_NV 0x9294
#define GL_SCREEN 0x9295
#define GL_SCREEN_KHR 0x9295
#define GL_SCREEN_NV 0x9295
#define GL_OVERLAY 0x9296
#define GL_OVERLAY_KHR 0x9296
#define GL_OVERLAY_NV 0x9296
#define GL_DARKEN 0x9297
#define GL_DARKEN_KHR 0x9297
#define GL_DARKEN_NV 0x9297
#define GL_LIGHTEN 0x9298
#define GL_LIGHTEN_KHR 0x9298
#define GL_LIGHTEN_NV 0x9298
#define GL_COLORDODGE 0x9299
#define GL_COLORDODGE_KHR 0x9299
#define GL_COLORDODGE_NV 0x9299
#define GL_COLORBURN 0x929A
#define GL_COLORBURN_KHR 0x929A
#define GL_COLORBURN_NV 0x929A
#define GL_HARDLIGHT 0x929B
#define GL_HARDLIGHT_KHR 0x929B
#define GL_HARDLIGHT_NV 0x929B
#define GL_SOFTLIGHT 0x929C
#define GL_SOFTLIGHT_KHR 0x929C
#define GL_SOFTLIGHT_NV 0x929C
#define GL_DIFFERENCE 0x929E
#define GL_DIFFERENCE_KHR 0x929E
#define GL_DIFFERENCE_NV 0x929E
#define GL_MINUS_NV 0x929F
#define GL_EXCLUSION 0x92A0
#define GL_EXCLUSION_KHR 0x92A0
#define GL_EXCLUSION_NV 0x92A0
#define GL_CONTRAST_NV 0x92A1
#define GL_INVERT_RGB_NV 0x92A3
#define GL_LINEARDODGE_NV 0x92A4
#define GL_LINEARBURN_NV 0x92A5
#define GL_VIVIDLIGHT_NV 0x92A6
#define GL_LINEARLIGHT_NV 0x92A7
#define GL_PINLIGHT_NV 0x92A8
#define GL_HARDMIX_NV 0x92A9
#define GL_HSL_HUE 0x92AD
#define GL_HSL_HUE_KHR 0x92AD
#define GL_HSL_HUE_NV 0x92AD
#define GL_HSL_SATURATION 0x92AE
#define GL_HSL_SATURATION_KHR 0x92AE
#define GL_HSL_SATURATION_NV 0x92AE
#define GL_HSL_COLOR 0x92AF
#define GL_HSL_COLOR_KHR 0x92AF
#define GL_HSL_COLOR_NV 0x92AF
#define GL_HSL_LUMINOSITY 0x92B0
#define GL_HSL_LUMINOSITY_KHR 0x92B0
#define GL_HSL_LUMINOSITY_NV 0x92B0
#define GL_PLUS_CLAMPED_NV 0x92B1
#define GL_PLUS_CLAMPED_ALPHA_NV 0x92B2
#define GL_MINUS_CLAMPED_NV 0x92B3
#define GL_INVERT_OVG_NV 0x92B4
#define GL_MAX_LGPU_GPUS_NVX 0x92BA
#define GL_MULTICAST_GPUS_NV 0x92BA
#define GL_PURGED_CONTEXT_RESET_NV 0x92BB
#define GL_PRIMITIVE_BOUNDING_BOX 0x92BE
#define GL_PRIMITIVE_BOUNDING_BOX_ARB 0x92BE
#define GL_PRIMITIVE_BOUNDING_BOX_EXT 0x92BE
#define GL_PRIMITIVE_BOUNDING_BOX_OES 0x92BE
#define GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV 0x92BF
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT 0x92CD
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES 0x92CD
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT 0x92CE
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES 0x92CE
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT 0x92CF
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES 0x92CF
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT 0x92D3
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES 0x92D3
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT 0x92D4
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES 0x92D4
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT 0x92D5
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES 0x92D5
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_FRAGMENT_COVERAGE_TO_COLOR_NV 0x92DD
#define GL_FRAGMENT_COVERAGE_COLOR_NV 0x92DE
#define GL_DEBUG_OUTPUT 0x92E0
#define GL_DEBUG_OUTPUT_KHR 0x92E0
#define GL_UNIFORM 0x92E1
#define GL_UNIFORM_BLOCK 0x92E2
#define GL_PROGRAM_INPUT 0x92E3
#define GL_PROGRAM_OUTPUT 0x92E4
#define GL_BUFFER_VARIABLE 0x92E5
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#define GL_IS_PER_PATCH 0x92E7
#define GL_IS_PER_PATCH_EXT 0x92E7
#define GL_IS_PER_PATCH_OES 0x92E7
#define GL_VERTEX_SUBROUTINE 0x92E8
#define GL_TESS_CONTROL_SUBROUTINE 0x92E9
#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
#define GL_GEOMETRY_SUBROUTINE 0x92EB
#define GL_FRAGMENT_SUBROUTINE 0x92EC
#define GL_COMPUTE_SUBROUTINE 0x92ED
#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#define GL_ACTIVE_RESOURCES 0x92F5
#define GL_MAX_NAME_LENGTH 0x92F6
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#define GL_NAME_LENGTH 0x92F9
#define GL_TYPE 0x92FA
#define GL_ARRAY_SIZE 0x92FB
#define GL_OFFSET 0x92FC
#define GL_BLOCK_INDEX 0x92FD
#define GL_ARRAY_STRIDE 0x92FE
#define GL_MATRIX_STRIDE 0x92FF
#define GL_IS_ROW_MAJOR 0x9300
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#define GL_BUFFER_BINDING 0x9302
#define GL_BUFFER_DATA_SIZE 0x9303
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#define GL_ACTIVE_VARIABLES 0x9305
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT 0x9307
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT 0x9308
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES 0x9308
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#define GL_REFERENCED_BY_GEOMETRY_SHADER_EXT 0x9309
#define GL_REFERENCED_BY_GEOMETRY_SHADER_OES 0x9309
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#define GL_LOCATION 0x930E
#define GL_LOCATION_INDEX 0x930F
#define GL_LOCATION_INDEX_EXT 0x930F
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#define GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT 0x9312
#define GL_FRAMEBUFFER_DEFAULT_LAYERS_OES 0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#define GL_MAX_FRAMEBUFFER_LAYERS_EXT 0x9317
#define GL_MAX_FRAMEBUFFER_LAYERS_OES 0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#define GL_RASTER_MULTISAMPLE_EXT 0x9327
#define GL_RASTER_SAMPLES_EXT 0x9328
#define GL_MAX_RASTER_SAMPLES_EXT 0x9329
#define GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT 0x932A
#define GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT 0x932B
#define GL_EFFECTIVE_RASTER_SAMPLES_EXT 0x932C
#define GL_DEPTH_SAMPLES_NV 0x932D
#define GL_STENCIL_SAMPLES_NV 0x932E
#define GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV 0x932F
#define GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV 0x9330
#define GL_COVERAGE_MODULATION_TABLE_NV 0x9331
#define GL_COVERAGE_MODULATION_NV 0x9332
#define GL_COVERAGE_MODULATION_TABLE_SIZE_NV 0x9333
#define GL_WARP_SIZE_NV 0x9339
#define GL_WARPS_PER_SM_NV 0x933A
#define GL_SM_COUNT_NV 0x933B
#define GL_FILL_RECTANGLE_NV 0x933C
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB 0x933D
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV 0x933D
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB 0x933E
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV 0x933E
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB 0x933F
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV 0x933F
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB 0x9340
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV 0x9340
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB 0x9341
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9341
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB 0x9342
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV 0x9342
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB 0x9343
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV 0x9343
#define GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB 0x9344
#define GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB 0x9345
#define GL_CONSERVATIVE_RASTERIZATION_NV 0x9346
#define GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV 0x9347
#define GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV 0x9348
#define GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV 0x9349
#define GL_LOCATION_COMPONENT 0x934A
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C
#define GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV 0x934D
#define GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV 0x934E
#define GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV 0x934F
#define GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV 0x9350
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV 0x9351
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV 0x9352
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV 0x9353
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV 0x9354
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV 0x9355
#define GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV 0x9356
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV 0x9357
#define GL_VIEWPORT_SWIZZLE_X_NV 0x9358
#define GL_VIEWPORT_SWIZZLE_Y_NV 0x9359
#define GL_VIEWPORT_SWIZZLE_Z_NV 0x935A
#define GL_VIEWPORT_SWIZZLE_W_NV 0x935B
#define GL_CLIP_ORIGIN 0x935C
#define GL_CLIP_DEPTH_MODE 0x935D
#define GL_NEGATIVE_ONE_TO_ONE 0x935E
#define GL_ZERO_TO_ONE 0x935F
#define GL_CLEAR_TEXTURE 0x9365
#define GL_TEXTURE_REDUCTION_MODE_ARB 0x9366
#define GL_WEIGHTED_AVERAGE_ARB 0x9367
#define GL_FONT_GLYPHS_AVAILABLE_NV 0x9368
#define GL_FONT_TARGET_UNAVAILABLE_NV 0x9369
#define GL_FONT_UNAVAILABLE_NV 0x936A
#define GL_FONT_UNINTELLIGIBLE_NV 0x936B
#define GL_STANDARD_FONT_FORMAT_NV 0x936C
#define GL_FRAGMENT_INPUT_NV 0x936D
#define GL_UNIFORM_BUFFER_UNIFIED_NV 0x936E
#define GL_UNIFORM_BUFFER_ADDRESS_NV 0x936F
#define GL_UNIFORM_BUFFER_LENGTH_NV 0x9370
#define GL_MULTISAMPLES_NV 0x9371
#define GL_SUPERSAMPLE_SCALE_X_NV 0x9372
#define GL_SUPERSAMPLE_SCALE_Y_NV 0x9373
#define GL_CONFORMANT_NV 0x9374
#define GL_CONSERVATIVE_RASTER_DILATE_NV 0x9379
#define GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV 0x937A
#define GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV 0x937B
#define GL_VIEWPORT_POSITION_W_SCALE_NV 0x937C
#define GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV 0x937D
#define GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV 0x937E
#define GL_NUM_SAMPLE_COUNTS 0x9380
#define GL_MULTISAMPLE_LINE_WIDTH_RANGE 0x9381
#define GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB 0x9381
#define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY 0x9382
#define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB 0x9382
#define GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE 0x93A0
#define GL_BGRA8_EXT 0x93A1
#define GL_TEXTURE_USAGE_ANGLE 0x93A2
#define GL_FRAMEBUFFER_ATTACHMENT_ANGLE 0x93A3
#define GL_PACK_REVERSE_ROW_ORDER_ANGLE 0x93A4
#define GL_PROGRAM_BINARY_ANGLE 0x93A6
#define GL_COMPRESSED_RGBA_ASTC_4x4 0x93B0
#define GL_COMPRESSED_RGBA_ASTC_4x4_KHR 0x93B0
#define GL_COMPRESSED_RGBA_ASTC_5x4 0x93B1
#define GL_COMPRESSED_RGBA_ASTC_5x4_KHR 0x93B1
#define GL_COMPRESSED_RGBA_ASTC_5x5 0x93B2
#define GL_COMPRESSED_RGBA_ASTC_5x5_KHR 0x93B2
#define GL_COMPRESSED_RGBA_ASTC_6x5 0x93B3
#define GL_COMPRESSED_RGBA_ASTC_6x5_KHR 0x93B3
#define GL_COMPRESSED_RGBA_ASTC_6x6 0x93B4
#define GL_COMPRESSED_RGBA_ASTC_6x6_KHR 0x93B4
#define GL_COMPRESSED_RGBA_ASTC_8x5 0x93B5
#define GL_COMPRESSED_RGBA_ASTC_8x5_KHR 0x93B5
#define GL_COMPRESSED_RGBA_ASTC_8x6 0x93B6
#define GL_COMPRESSED_RGBA_ASTC_8x6_KHR 0x93B6
#define GL_COMPRESSED_RGBA_ASTC_8x8 0x93B7
#define GL_COMPRESSED_RGBA_ASTC_8x8_KHR 0x93B7
#define GL_COMPRESSED_RGBA_ASTC_10x5 0x93B8
#define GL_COMPRESSED_RGBA_ASTC_10x5_KHR 0x93B8
#define GL_COMPRESSED_RGBA_ASTC_10x6 0x93B9
#define GL_COMPRESSED_RGBA_ASTC_10x6_KHR 0x93B9
#define GL_COMPRESSED_RGBA_ASTC_10x8 0x93BA
#define GL_COMPRESSED_RGBA_ASTC_10x8_KHR 0x93BA
#define GL_COMPRESSED_RGBA_ASTC_10x10 0x93BB
#define GL_COMPRESSED_RGBA_ASTC_10x10_KHR 0x93BB
#define GL_COMPRESSED_RGBA_ASTC_12x10 0x93BC
#define GL_COMPRESSED_RGBA_ASTC_12x10_KHR 0x93BC
#define GL_COMPRESSED_RGBA_ASTC_12x12 0x93BD
#define GL_COMPRESSED_RGBA_ASTC_12x12_KHR 0x93BD
#define GL_COMPRESSED_RGBA_ASTC_3x3x3_OES 0x93C0
#define GL_COMPRESSED_RGBA_ASTC_4x3x3_OES 0x93C1
#define GL_COMPRESSED_RGBA_ASTC_4x4x3_OES 0x93C2
#define GL_COMPRESSED_RGBA_ASTC_4x4x4_OES 0x93C3
#define GL_COMPRESSED_RGBA_ASTC_5x4x4_OES 0x93C4
#define GL_COMPRESSED_RGBA_ASTC_5x5x4_OES 0x93C5
#define GL_COMPRESSED_RGBA_ASTC_5x5x5_OES 0x93C6
#define GL_COMPRESSED_RGBA_ASTC_6x5x5_OES 0x93C7
#define GL_COMPRESSED_RGBA_ASTC_6x6x5_OES 0x93C8
#define GL_COMPRESSED_RGBA_ASTC_6x6x6_OES 0x93C9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 0x93D0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR 0x93D0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 0x93D1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR 0x93D1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 0x93D2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR 0x93D2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 0x93D3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR 0x93D3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 0x93D4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR 0x93D4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 0x93D5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR 0x93D5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 0x93D6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR 0x93D6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 0x93D7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR 0x93D7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 0x93D8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR 0x93D8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 0x93D9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR 0x93D9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 0x93DA
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR 0x93DA
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 0x93DB
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR 0x93DB
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 0x93DC
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR 0x93DC
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 0x93DD
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR 0x93DD
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES 0x93E0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES 0x93E1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES 0x93E2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES 0x93E3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES 0x93E4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES 0x93E5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES 0x93E6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES 0x93E7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES 0x93E8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES 0x93E9
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG 0x93F0
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG 0x93F1
#define GL_PERFQUERY_COUNTER_EVENT_INTEL 0x94F0
#define GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL 0x94F1
#define GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL 0x94F2
#define GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL 0x94F3
#define GL_PERFQUERY_COUNTER_RAW_INTEL 0x94F4
#define GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL 0x94F5
#define GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL 0x94F8
#define GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL 0x94F9
#define GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL 0x94FA
#define GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL 0x94FB
#define GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL 0x94FC
#define GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL 0x94FD
#define GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL 0x94FE
#define GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL 0x94FF
#define GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL 0x9500
#define GL_PER_GPU_STORAGE_NV 0x9548
#define GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9549
#define GL_CONSERVATIVE_RASTER_MODE_NV 0x954D
#define GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV 0x954E
#define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV 0x954F
#define GL_SHADER_BINARY_FORMAT_SPIR_V_ARB 0x9551
#define GL_SPIR_V_BINARY_ARB 0x9552
#define GL_RENDER_GPU_MASK_NV 0x9558
#define GL_TEXTURE_TILING_EXT 0x9580
#define GL_DEDICATED_MEMORY_OBJECT_EXT 0x9581
#define GL_NUM_TILING_TYPES_EXT 0x9582
#define GL_TILING_TYPES_EXT 0x9583
#define GL_OPTIMAL_TILING_EXT 0x9584
#define GL_LINEAR_TILING_EXT 0x9585
#define GL_HANDLE_TYPE_OPAQUE_FD_EXT 0x9586
#define GL_HANDLE_TYPE_OPAQUE_WIN32_EXT 0x9587
#define GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT 0x9588
#define GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT 0x9589
#define GL_HANDLE_TYPE_D3D12_RESOURCE_EXT 0x958A
#define GL_HANDLE_TYPE_D3D11_IMAGE_EXT 0x958B
#define GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT 0x958C
#define GL_LAYOUT_GENERAL_EXT 0x958D
#define GL_LAYOUT_COLOR_ATTACHMENT_EXT 0x958E
#define GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT 0x958F
#define GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT 0x9590
#define GL_LAYOUT_SHADER_READ_ONLY_EXT 0x9591
#define GL_LAYOUT_TRANSFER_SRC_EXT 0x9592
#define GL_LAYOUT_TRANSFER_DST_EXT 0x9593
#define GL_HANDLE_TYPE_D3D12_FENCE_EXT 0x9594
#define GL_D3D12_FENCE_VALUE_EXT 0x9595
#define GL_NUM_DEVICE_UUIDS_EXT 0x9596
#define GL_DEVICE_UUID_EXT 0x9597
#define GL_DRIVER_UUID_EXT 0x9598
#define GL_DEVICE_LUID_EXT 0x9599
#define GL_DEVICE_NODE_MASK_EXT 0x959A
#define GL_PROTECTED_MEMORY_OBJECT_EXT 0x959B
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR 0x9630
#define GL_MAX_VIEWS_OVR 0x9631
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR 0x9632
#define GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR 0x9633
#define GL_GS_SHADER_BINARY_MTK 0x9640
#define GL_GS_PROGRAM_BINARY_MTK 0x9641
#define GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT 0x9650
#define GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT 0x9651
#define GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT 0x9652
#define GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM 0x96A2
#define GL_SHARED_EDGE_NV 0xC0
#define GL_ROUNDED_RECT_NV 0xE8
#define GL_RELATIVE_ROUNDED_RECT_NV 0xE9
#define GL_ROUNDED_RECT2_NV 0xEA
#define GL_RELATIVE_ROUNDED_RECT2_NV 0xEB
#define GL_ROUNDED_RECT4_NV 0xEC
#define GL_RELATIVE_ROUNDED_RECT4_NV 0xED
#define GL_ROUNDED_RECT8_NV 0xEE
#define GL_RELATIVE_ROUNDED_RECT8_NV 0xEF
#define GL_RESTART_PATH_NV 0xF0
#define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#define GL_RECT_NV 0xF6
#define GL_RELATIVE_RECT_NV 0xF7
#define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#define GL_ARC_TO_NV 0xFE
#define GL_RELATIVE_ARC_TO_NV 0xFF
#define GL_TRACE_ALL_BITS_MESA 0xFFFF
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#define GL_ALL_BARRIER_BITS_EXT 0xFFFFFFFF
#define GL_ALL_PIXELS_AMD 0xFFFFFFFF
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_ALL_SHADER_BITS_EXT 0xFFFFFFFF
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_QUERY_ALL_EVENT_BITS_AMD 0xFFFFFFFF
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFFull
#define GL_TIMEOUT_IGNORED_APPLE 0xFFFFFFFFFFFFFFFFull
#define GL_INVALID_INDEX 0xFFFFFFFFu
#define GL_LAYOUT_LINEAR_INTEL 1
#define GL_ONE 1
#define GL_TRUE 1
#define GL_VERSION_ES_CL_1_0 1
#define GL_VERSION_ES_CL_1_1 1
#define GL_VERSION_ES_CM_1_1 1
#define GL_CULL_VERTEX_IBM 103050
#define GL_ALL_STATIC_DATA_IBM 103060
#define GL_STATIC_VERTEX_ARRAY_IBM 103061
#define GL_VERTEX_ARRAY_LIST_IBM 103070
#define GL_NORMAL_ARRAY_LIST_IBM 103071
#define GL_COLOR_ARRAY_LIST_IBM 103072
#define GL_INDEX_ARRAY_LIST_IBM 103073
#define GL_TEXTURE_COORD_ARRAY_LIST_IBM 103074
#define GL_EDGE_FLAG_ARRAY_LIST_IBM 103075
#define GL_FOG_COORDINATE_ARRAY_LIST_IBM 103076
#define GL_SECONDARY_COLOR_ARRAY_LIST_IBM 103077
#define GL_VERTEX_ARRAY_LIST_STRIDE_IBM 103080
#define GL_NORMAL_ARRAY_LIST_STRIDE_IBM 103081
#define GL_COLOR_ARRAY_LIST_STRIDE_IBM 103082
#define GL_INDEX_ARRAY_LIST_STRIDE_IBM 103083
#define GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM 103084
#define GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM 103085
#define GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM 103086
#define GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM 103087
#define GL_UUID_SIZE_EXT 16
#define GL_LAYOUT_LINEAR_CPU_CACHED_INTEL 2
#define GL_LUID_SIZE_EXT 8

/* Version IDs */
#undef GL_VERSION_1_0
#define GL_VERSION_1_0 1
#undef GL_VERSION_1_1
#define GL_VERSION_1_1 2
#undef GL_VERSION_1_2
#define GL_VERSION_1_2 3
#undef GL_VERSION_1_3
#define GL_VERSION_1_3 4
#undef GL_VERSION_1_4
#define GL_VERSION_1_4 5
#undef GL_VERSION_1_5
#define GL_VERSION_1_5 6
#undef GL_VERSION_2_0
#define GL_VERSION_2_0 7
#undef GL_VERSION_2_1
#define GL_VERSION_2_1 8
#undef GL_VERSION_3_0
#define GL_VERSION_3_0 9
#undef GL_VERSION_3_1
#define GL_VERSION_3_1 10
#undef GL_VERSION_3_2
#define GL_VERSION_3_2 11
#undef GL_VERSION_3_3
#define GL_VERSION_3_3 12
#undef GL_VERSION_4_0
#define GL_VERSION_4_0 13
#undef GL_VERSION_4_1
#define GL_VERSION_4_1 14
#undef GL_VERSION_4_2
#define GL_VERSION_4_2 15
#undef GL_VERSION_4_3
#define GL_VERSION_4_3 16
#undef GL_VERSION_4_4
#define GL_VERSION_4_4 17
#undef GL_VERSION_4_5
#define GL_VERSION_4_5 18
#undef GL_VERSION_ES_CM_1_0
#define GL_VERSION_ES_CM_1_0 19
#undef GL_ES_VERSION_2_0
#define GL_ES_VERSION_2_0 20
#undef GL_ES_VERSION_3_0
#define GL_ES_VERSION_3_0 21
#undef GL_ES_VERSION_3_1
#define GL_ES_VERSION_3_1 22
#undef GL_ES_VERSION_3_2
#define GL_ES_VERSION_3_2 23
#undef GL_SC_VERSION_2_0
#define GL_SC_VERSION_2_0 24

/* Extension IDs */
#undef GL_3DFX_multisample
#define GL_3DFX_multisample 25
#undef GL_3DFX_tbuffer
#define GL_3DFX_tbuffer 26
#undef GL_3DFX_texture_compression_FXT1
#define GL_3DFX_texture_compression_FXT1 27
#undef GL_AMD_blend_minmax_factor
#define GL_AMD_blend_minmax_factor 28
#undef GL_AMD_compressed_3DC_texture
#define GL_AMD_compressed_3DC_texture 29
#undef GL_AMD_compressed_ATC_texture
#define GL_AMD_compressed_ATC_texture 30
#undef GL_AMD_conservative_depth
#define GL_AMD_conservative_depth 31
#undef GL_AMD_debug_output
#define GL_AMD_debug_output 32
#undef GL_AMD_depth_clamp_separate
#define GL_AMD_depth_clamp_separate 33
#undef GL_AMD_draw_buffers_blend
#define GL_AMD_draw_buffers_blend 34
#undef GL_AMD_framebuffer_sample_positions
#define GL_AMD_framebuffer_sample_positions 35
#undef GL_AMD_gcn_shader
#define GL_AMD_gcn_shader 36
#undef GL_AMD_gpu_shader_half_float
#define GL_AMD_gpu_shader_half_float 37
#undef GL_AMD_gpu_shader_int16
#define GL_AMD_gpu_shader_int16 38
#undef GL_AMD_gpu_shader_int64
#define GL_AMD_gpu_shader_int64 39
#undef GL_AMD_interleaved_elements
#define GL_AMD_interleaved_elements 40
#undef GL_AMD_multi_draw_indirect
#define GL_AMD_multi_draw_indirect 41
#undef GL_AMD_name_gen_delete
#define GL_AMD_name_gen_delete 42
#undef GL_AMD_occlusion_query_event
#define GL_AMD_occlusion_query_event 43
#undef GL_AMD_performance_monitor
#define GL_AMD_performance_monitor 44
#undef GL_AMD_pinned_memory
#define GL_AMD_pinned_memory 45
#undef GL_AMD_program_binary_Z400
#define GL_AMD_program_binary_Z400 46
#undef GL_AMD_query_buffer_object
#define GL_AMD_query_buffer_object 47
#undef GL_AMD_sample_positions
#define GL_AMD_sample_positions 48
#undef GL_AMD_seamless_cubemap_per_texture
#define GL_AMD_seamless_cubemap_per_texture 49
#undef GL_AMD_shader_atomic_counter_ops
#define GL_AMD_shader_atomic_counter_ops 50
#undef GL_AMD_shader_ballot
#define GL_AMD_shader_ballot 51
#undef GL_AMD_shader_stencil_export
#define GL_AMD_shader_stencil_export 52
#undef GL_AMD_shader_trinary_minmax
#define GL_AMD_shader_trinary_minmax 53
#undef GL_AMD_shader_explicit_vertex_parameter
#define GL_AMD_shader_explicit_vertex_parameter 54
#undef GL_AMD_sparse_texture
#define GL_AMD_sparse_texture 55
#undef GL_AMD_stencil_operation_extended
#define GL_AMD_stencil_operation_extended 56
#undef GL_AMD_texture_gather_bias_lod
#define GL_AMD_texture_gather_bias_lod 57
#undef GL_AMD_texture_texture4
#define GL_AMD_texture_texture4 58
#undef GL_AMD_transform_feedback3_lines_triangles
#define GL_AMD_transform_feedback3_lines_triangles 59
#undef GL_AMD_transform_feedback4
#define GL_AMD_transform_feedback4 60
#undef GL_AMD_vertex_shader_layer
#define GL_AMD_vertex_shader_layer 61
#undef GL_AMD_vertex_shader_tessellator
#define GL_AMD_vertex_shader_tessellator 62
#undef GL_AMD_vertex_shader_viewport_index
#define GL_AMD_vertex_shader_viewport_index 63
#undef GL_ANDROID_extension_pack_es31a
#define GL_ANDROID_extension_pack_es31a 64
#undef GL_ANGLE_depth_texture
#define GL_ANGLE_depth_texture 65
#undef GL_ANGLE_framebuffer_blit
#define GL_ANGLE_framebuffer_blit 66
#undef GL_ANGLE_framebuffer_multisample
#define GL_ANGLE_framebuffer_multisample 67
#undef GL_ANGLE_instanced_arrays
#define GL_ANGLE_instanced_arrays 68
#undef GL_ANGLE_pack_reverse_row_order
#define GL_ANGLE_pack_reverse_row_order 69
#undef GL_ANGLE_program_binary
#define GL_ANGLE_program_binary 70
#undef GL_ANGLE_texture_compression_dxt3
#define GL_ANGLE_texture_compression_dxt3 71
#undef GL_ANGLE_texture_compression_dxt5
#define GL_ANGLE_texture_compression_dxt5 72
#undef GL_ANGLE_texture_usage
#define GL_ANGLE_texture_usage 73
#undef GL_ANGLE_translated_shader_source
#define GL_ANGLE_translated_shader_source 74
#undef GL_APPLE_aux_depth_stencil
#define GL_APPLE_aux_depth_stencil 75
#undef GL_APPLE_client_storage
#define GL_APPLE_client_storage 76
#undef GL_APPLE_clip_distance
#define GL_APPLE_clip_distance 77
#undef GL_APPLE_color_buffer_packed_float
#define GL_APPLE_color_buffer_packed_float 78
#undef GL_APPLE_copy_texture_levels
#define GL_APPLE_copy_texture_levels 79
#undef GL_APPLE_element_array
#define GL_APPLE_element_array 80
#undef GL_APPLE_fence
#define GL_APPLE_fence 81
#undef GL_APPLE_float_pixels
#define GL_APPLE_float_pixels 82
#undef GL_APPLE_flush_buffer_range
#define GL_APPLE_flush_buffer_range 83
#undef GL_APPLE_framebuffer_multisample
#define GL_APPLE_framebuffer_multisample 84
#undef GL_APPLE_object_purgeable
#define GL_APPLE_object_purgeable 85
#undef GL_APPLE_rgb_422
#define GL_APPLE_rgb_422 86
#undef GL_APPLE_row_bytes
#define GL_APPLE_row_bytes 87
#undef GL_APPLE_specular_vector
#define GL_APPLE_specular_vector 88
#undef GL_APPLE_sync
#define GL_APPLE_sync 89
#undef GL_APPLE_texture_2D_limited_npot
#define GL_APPLE_texture_2D_limited_npot 90
#undef GL_APPLE_texture_format_BGRA8888
#define GL_APPLE_texture_format_BGRA8888 91
#undef GL_APPLE_texture_max_level
#define GL_APPLE_texture_max_level 92
#undef GL_APPLE_texture_packed_float
#define GL_APPLE_texture_packed_float 93
#undef GL_APPLE_texture_range
#define GL_APPLE_texture_range 94
#undef GL_APPLE_transform_hint
#define GL_APPLE_transform_hint 95
#undef GL_APPLE_vertex_array_object
#define GL_APPLE_vertex_array_object 96
#undef GL_APPLE_vertex_array_range
#define GL_APPLE_vertex_array_range 97
#undef GL_APPLE_vertex_program_evaluators
#define GL_APPLE_vertex_program_evaluators 98
#undef GL_APPLE_ycbcr_422
#define GL_APPLE_ycbcr_422 99
#undef GL_ARB_ES2_compatibility
#define GL_ARB_ES2_compatibility 100
#undef GL_ARB_ES3_1_compatibility
#define GL_ARB_ES3_1_compatibility 101
#undef GL_ARB_ES3_2_compatibility
#define GL_ARB_ES3_2_compatibility 102
#undef GL_ARB_ES3_compatibility
#define GL_ARB_ES3_compatibility 103
#undef GL_ARB_arrays_of_arrays
#define GL_ARB_arrays_of_arrays 104
#undef GL_ARB_base_instance
#define GL_ARB_base_instance 105
#undef GL_ARB_bindless_texture
#define GL_ARB_bindless_texture 106
#undef GL_ARB_blend_func_extended
#define GL_ARB_blend_func_extended 107
#undef GL_ARB_buffer_storage
#define GL_ARB_buffer_storage 108
#undef GL_ARB_cl_event
#define GL_ARB_cl_event 109
#undef GL_ARB_clear_buffer_object
#define GL_ARB_clear_buffer_object 110
#undef GL_ARB_clear_texture
#define GL_ARB_clear_texture 111
#undef GL_ARB_clip_control
#define GL_ARB_clip_control 112
#undef GL_ARB_color_buffer_float
#define GL_ARB_color_buffer_float 113
#undef GL_ARB_compatibility
#define GL_ARB_compatibility 114
#undef GL_ARB_compressed_texture_pixel_storage
#define GL_ARB_compressed_texture_pixel_storage 115
#undef GL_ARB_compute_shader
#define GL_ARB_compute_shader 116
#undef GL_ARB_compute_variable_group_size
#define GL_ARB_compute_variable_group_size 117
#undef GL_ARB_conditional_render_inverted
#define GL_ARB_conditional_render_inverted 118
#undef GL_ARB_conservative_depth
#define GL_ARB_conservative_depth 119
#undef GL_ARB_copy_buffer
#define GL_ARB_copy_buffer 120
#undef GL_ARB_copy_image
#define GL_ARB_copy_image 121
#undef GL_ARB_cull_distance
#define GL_ARB_cull_distance 122
#undef GL_ARB_debug_output
#define GL_ARB_debug_output 123
#undef GL_ARB_depth_buffer_float
#define GL_ARB_depth_buffer_float 124
#undef GL_ARB_depth_clamp
#define GL_ARB_depth_clamp 125
#undef GL_ARB_depth_texture
#define GL_ARB_depth_texture 126
#undef GL_ARB_derivative_control
#define GL_ARB_derivative_control 127
#undef GL_ARB_direct_state_access
#define GL_ARB_direct_state_access 128
#undef GL_ARB_draw_buffers
#define GL_ARB_draw_buffers 129
#undef GL_ARB_draw_buffers_blend
#define GL_ARB_draw_buffers_blend 130
#undef GL_ARB_draw_elements_base_vertex
#define GL_ARB_draw_elements_base_vertex 131
#undef GL_ARB_draw_indirect
#define GL_ARB_draw_indirect 132
#undef GL_ARB_draw_instanced
#define GL_ARB_draw_instanced 133
#undef GL_ARB_enhanced_layouts
#define GL_ARB_enhanced_layouts 134
#undef GL_ARB_explicit_attrib_location
#define GL_ARB_explicit_attrib_location 135
#undef GL_ARB_explicit_uniform_location
#define GL_ARB_explicit_uniform_location 136
#undef GL_ARB_fragment_coord_conventions
#define GL_ARB_fragment_coord_conventions 137
#undef GL_ARB_fragment_layer_viewport
#define GL_ARB_fragment_layer_viewport 138
#undef GL_ARB_fragment_program
#define GL_ARB_fragment_program 139
#undef GL_ARB_fragment_program_shadow
#define GL_ARB_fragment_program_shadow 140
#undef GL_ARB_fragment_shader
#define GL_ARB_fragment_shader 141
#undef GL_ARB_fragment_shader_interlock
#define GL_ARB_fragment_shader_interlock 142
#undef GL_ARB_framebuffer_no_attachments
#define GL_ARB_framebuffer_no_attachments 143
#undef GL_ARB_framebuffer_object
#define GL_ARB_framebuffer_object 144
#undef GL_ARB_framebuffer_sRGB
#define GL_ARB_framebuffer_sRGB 145
#undef GL_ARB_geometry_shader4
#define GL_ARB_geometry_shader4 146
#undef GL_ARB_get_program_binary
#define GL_ARB_get_program_binary 147
#undef GL_ARB_get_texture_sub_image
#define GL_ARB_get_texture_sub_image 148
#undef GL_ARB_gpu_shader5
#define GL_ARB_gpu_shader5 149
#undef GL_ARB_gpu_shader_fp64
#define GL_ARB_gpu_shader_fp64 150
#undef GL_ARB_gpu_shader_int64
#define GL_ARB_gpu_shader_int64 151
#undef GL_ARB_half_float_pixel
#define GL_ARB_half_float_pixel 152
#undef GL_ARB_half_float_vertex
#define GL_ARB_half_float_vertex 153
#undef GL_ARB_imaging
#define GL_ARB_imaging 154
#undef GL_ARB_indirect_parameters
#define GL_ARB_indirect_parameters 155
#undef GL_ARB_instanced_arrays
#define GL_ARB_instanced_arrays 156
#undef GL_ARB_internalformat_query
#define GL_ARB_internalformat_query 157
#undef GL_ARB_internalformat_query2
#define GL_ARB_internalformat_query2 158
#undef GL_ARB_invalidate_subdata
#define GL_ARB_invalidate_subdata 159
#undef GL_ARB_map_buffer_alignment
#define GL_ARB_map_buffer_alignment 160
#undef GL_ARB_map_buffer_range
#define GL_ARB_map_buffer_range 161
#undef GL_ARB_matrix_palette
#define GL_ARB_matrix_palette 162
#undef GL_ARB_multi_bind
#define GL_ARB_multi_bind 163
#undef GL_ARB_multi_draw_indirect
#define GL_ARB_multi_draw_indirect 164
#undef GL_ARB_multisample
#define GL_ARB_multisample 165
#undef GL_ARB_multitexture
#define GL_ARB_multitexture 166
#undef GL_ARB_occlusion_query
#define GL_ARB_occlusion_query 167
#undef GL_ARB_occlusion_query2
#define GL_ARB_occlusion_query2 168
#undef GL_ARB_parallel_shader_compile
#define GL_ARB_parallel_shader_compile 169
#undef GL_ARB_pipeline_statistics_query
#define GL_ARB_pipeline_statistics_query 170
#undef GL_ARB_pixel_buffer_object
#define GL_ARB_pixel_buffer_object 171
#undef GL_ARB_point_parameters
#define GL_ARB_point_parameters 172
#undef GL_ARB_point_sprite
#define GL_ARB_point_sprite 173
#undef GL_ARB_post_depth_coverage
#define GL_ARB_post_depth_coverage 174
#undef GL_ARB_program_interface_query
#define GL_ARB_program_interface_query 175
#undef GL_ARB_provoking_vertex
#define GL_ARB_provoking_vertex 176
#undef GL_ARB_query_buffer_object
#define GL_ARB_query_buffer_object 177
#undef GL_ARB_robust_buffer_access_behavior
#define GL_ARB_robust_buffer_access_behavior 178
#undef GL_ARB_robustness
#define GL_ARB_robustness 179
#undef GL_ARB_robustness_isolation
#define GL_ARB_robustness_isolation 180
#undef GL_ARB_sample_locations
#define GL_ARB_sample_locations 181
#undef GL_ARB_sample_shading
#define GL_ARB_sample_shading 182
#undef GL_ARB_sampler_objects
#define GL_ARB_sampler_objects 183
#undef GL_ARB_seamless_cube_map
#define GL_ARB_seamless_cube_map 184
#undef GL_ARB_seamless_cubemap_per_texture
#define GL_ARB_seamless_cubemap_per_texture 185
#undef GL_ARB_separate_shader_objects
#define GL_ARB_separate_shader_objects 186
#undef GL_ARB_shader_atomic_counter_ops
#define GL_ARB_shader_atomic_counter_ops 187
#undef GL_ARB_shader_atomic_counters
#define GL_ARB_shader_atomic_counters 188
#undef GL_ARB_shader_ballot
#define GL_ARB_shader_ballot 189
#undef GL_ARB_shader_bit_encoding
#define GL_ARB_shader_bit_encoding 190
#undef GL_ARB_shader_clock
#define GL_ARB_shader_clock 191
#undef GL_ARB_shader_draw_parameters
#define GL_ARB_shader_draw_parameters 192
#undef GL_ARB_shader_group_vote
#define GL_ARB_shader_group_vote 193
#undef GL_ARB_shader_image_load_store
#define GL_ARB_shader_image_load_store 194
#undef GL_ARB_shader_image_size
#define GL_ARB_shader_image_size 195
#undef GL_ARB_shader_objects
#define GL_ARB_shader_objects 196
#undef GL_ARB_shader_precision
#define GL_ARB_shader_precision 197
#undef GL_ARB_shader_stencil_export
#define GL_ARB_shader_stencil_export 198
#undef GL_ARB_shader_storage_buffer_object
#define GL_ARB_shader_storage_buffer_object 199
#undef GL_ARB_shader_subroutine
#define GL_ARB_shader_subroutine 200
#undef GL_ARB_shader_texture_image_samples
#define GL_ARB_shader_texture_image_samples 201
#undef GL_ARB_shader_texture_lod
#define GL_ARB_shader_texture_lod 202
#undef GL_ARB_shader_viewport_layer_array
#define GL_ARB_shader_viewport_layer_array 203
#undef GL_ARB_shading_language_100
#define GL_ARB_shading_language_100 204
#undef GL_ARB_shading_language_420pack
#define GL_ARB_shading_language_420pack 205
#undef GL_ARB_shading_language_include
#define GL_ARB_shading_language_include 206
#undef GL_ARB_shading_language_packing
#define GL_ARB_shading_language_packing 207
#undef GL_ARB_shadow
#define GL_ARB_shadow 208
#undef GL_ARB_shadow_ambient
#define GL_ARB_shadow_ambient 209
#undef GL_ARB_sparse_buffer
#define GL_ARB_sparse_buffer 210
#undef GL_ARB_sparse_texture
#define GL_ARB_sparse_texture 211
#undef GL_ARB_sparse_texture2
#define GL_ARB_sparse_texture2 212
#undef GL_ARB_sparse_texture_clamp
#define GL_ARB_sparse_texture_clamp 213
#undef GL_ARB_gl_spirv
#define GL_ARB_gl_spirv 214
#undef GL_ARB_stencil_texturing
#define GL_ARB_stencil_texturing 215
#undef GL_ARB_sync
#define GL_ARB_sync 216
#undef GL_ARB_tessellation_shader
#define GL_ARB_tessellation_shader 217
#undef GL_ARB_texture_barrier
#define GL_ARB_texture_barrier 218
#undef GL_ARB_texture_border_clamp
#define GL_ARB_texture_border_clamp 219
#undef GL_ARB_texture_buffer_object
#define GL_ARB_texture_buffer_object 220
#undef GL_ARB_texture_buffer_object_rgb32
#define GL_ARB_texture_buffer_object_rgb32 221
#undef GL_ARB_texture_buffer_range
#define GL_ARB_texture_buffer_range 222
#undef GL_ARB_texture_compression
#define GL_ARB_texture_compression 223
#undef GL_ARB_texture_compression_bptc
#define GL_ARB_texture_compression_bptc 224
#undef GL_ARB_texture_compression_rgtc
#define GL_ARB_texture_compression_rgtc 225
#undef GL_ARB_texture_cube_map
#define GL_ARB_texture_cube_map 226
#undef GL_ARB_texture_cube_map_array
#define GL_ARB_texture_cube_map_array 227
#undef GL_ARB_texture_env_add
#define GL_ARB_texture_env_add 228
#undef GL_ARB_texture_env_combine
#define GL_ARB_texture_env_combine 229
#undef GL_ARB_texture_env_crossbar
#define GL_ARB_texture_env_crossbar 230
#undef GL_ARB_texture_env_dot3
#define GL_ARB_texture_env_dot3 231
#undef GL_ARB_texture_filter_minmax
#define GL_ARB_texture_filter_minmax 232
#undef GL_ARB_texture_float
#define GL_ARB_texture_float 233
#undef GL_ARB_texture_gather
#define GL_ARB_texture_gather 234
#undef GL_ARB_texture_mirror_clamp_to_edge
#define GL_ARB_texture_mirror_clamp_to_edge 235
#undef GL_ARB_texture_mirrored_repeat
#define GL_ARB_texture_mirrored_repeat 236
#undef GL_ARB_texture_multisample
#define GL_ARB_texture_multisample 237
#undef GL_ARB_texture_non_power_of_two
#define GL_ARB_texture_non_power_of_two 238
#undef GL_ARB_texture_query_levels
#define GL_ARB_texture_query_levels 239
#undef GL_ARB_texture_query_lod
#define GL_ARB_texture_query_lod 240
#undef GL_ARB_texture_rectangle
#define GL_ARB_texture_rectangle 241
#undef GL_ARB_texture_rg
#define GL_ARB_texture_rg 242
#undef GL_ARB_texture_rgb10_a2ui
#define GL_ARB_texture_rgb10_a2ui 243
#undef GL_ARB_texture_stencil8
#define GL_ARB_texture_stencil8 244
#undef GL_ARB_texture_storage
#define GL_ARB_texture_storage 245
#undef GL_ARB_texture_storage_multisample
#define GL_ARB_texture_storage_multisample 246
#undef GL_ARB_texture_swizzle
#define GL_ARB_texture_swizzle 247
#undef GL_ARB_texture_view
#define GL_ARB_texture_view 248
#undef GL_ARB_timer_query
#define GL_ARB_timer_query 249
#undef GL_ARB_transform_feedback2
#define GL_ARB_transform_feedback2 250
#undef GL_ARB_transform_feedback3
#define GL_ARB_transform_feedback3 251
#undef GL_ARB_transform_feedback_instanced
#define GL_ARB_transform_feedback_instanced 252
#undef GL_ARB_transform_feedback_overflow_query
#define GL_ARB_transform_feedback_overflow_query 253
#undef GL_ARB_transpose_matrix
#define GL_ARB_transpose_matrix 254
#undef GL_ARB_uniform_buffer_object
#define GL_ARB_uniform_buffer_object 255
#undef GL_ARB_vertex_array_bgra
#define GL_ARB_vertex_array_bgra 256
#undef GL_ARB_vertex_array_object
#define GL_ARB_vertex_array_object 257
#undef GL_ARB_vertex_attrib_64bit
#define GL_ARB_vertex_attrib_64bit 258
#undef GL_ARB_vertex_attrib_binding
#define GL_ARB_vertex_attrib_binding 259
#undef GL_ARB_vertex_blend
#define GL_ARB_vertex_blend 260
#undef GL_ARB_vertex_buffer_object
#define GL_ARB_vertex_buffer_object 261
#undef GL_ARB_vertex_program
#define GL_ARB_vertex_program 262
#undef GL_ARB_vertex_shader
#define GL_ARB_vertex_shader 263
#undef GL_ARB_vertex_type_10f_11f_11f_rev
#define GL_ARB_vertex_type_10f_11f_11f_rev 264
#undef GL_ARB_vertex_type_2_10_10_10_rev
#define GL_ARB_vertex_type_2_10_10_10_rev 265
#undef GL_ARB_viewport_array
#define GL_ARB_viewport_array 266
#undef GL_ARB_window_pos
#define GL_ARB_window_pos 267
#undef GL_ARM_mali_program_binary
#define GL_ARM_mali_program_binary 268
#undef GL_ARM_mali_shader_binary
#define GL_ARM_mali_shader_binary 269
#undef GL_ARM_rgba8
#define GL_ARM_rgba8 270
#undef GL_ARM_shader_framebuffer_fetch
#define GL_ARM_shader_framebuffer_fetch 271
#undef GL_ARM_shader_framebuffer_fetch_depth_stencil
#define GL_ARM_shader_framebuffer_fetch_depth_stencil 272
#undef GL_ATI_draw_buffers
#define GL_ATI_draw_buffers 273
#undef GL_ATI_element_array
#define GL_ATI_element_array 274
#undef GL_ATI_envmap_bumpmap
#define GL_ATI_envmap_bumpmap 275
#undef GL_ATI_fragment_shader
#define GL_ATI_fragment_shader 276
#undef GL_ATI_map_object_buffer
#define GL_ATI_map_object_buffer 277
#undef GL_ATI_meminfo
#define GL_ATI_meminfo 278
#undef GL_ATI_pixel_format_float
#define GL_ATI_pixel_format_float 279
#undef GL_ATI_pn_triangles
#define GL_ATI_pn_triangles 280
#undef GL_ATI_separate_stencil
#define GL_ATI_separate_stencil 281
#undef GL_ATI_text_fragment_shader
#define GL_ATI_text_fragment_shader 282
#undef GL_ATI_texture_env_combine3
#define GL_ATI_texture_env_combine3 283
#undef GL_ATI_texture_float
#define GL_ATI_texture_float 284
#undef GL_ATI_texture_mirror_once
#define GL_ATI_texture_mirror_once 285
#undef GL_ATI_vertex_array_object
#define GL_ATI_vertex_array_object 286
#undef GL_ATI_vertex_attrib_array_object
#define GL_ATI_vertex_attrib_array_object 287
#undef GL_ATI_vertex_streams
#define GL_ATI_vertex_streams 288
#undef GL_DMP_program_binary
#define GL_DMP_program_binary 289
#undef GL_DMP_shader_binary
#define GL_DMP_shader_binary 290
#undef GL_EXT_422_pixels
#define GL_EXT_422_pixels 291
#undef GL_EXT_EGL_image_array
#define GL_EXT_EGL_image_array 292
#undef GL_EXT_YUV_target
#define GL_EXT_YUV_target 293
#undef GL_EXT_abgr
#define GL_EXT_abgr 294
#undef GL_EXT_base_instance
#define GL_EXT_base_instance 295
#undef GL_EXT_bgra
#define GL_EXT_bgra 296
#undef GL_EXT_bindable_uniform
#define GL_EXT_bindable_uniform 297
#undef GL_EXT_blend_color
#define GL_EXT_blend_color 298
#undef GL_EXT_blend_equation_separate
#define GL_EXT_blend_equation_separate 299
#undef GL_EXT_blend_func_extended
#define GL_EXT_blend_func_extended 300
#undef GL_EXT_blend_func_separate
#define GL_EXT_blend_func_separate 301
#undef GL_EXT_blend_logic_op
#define GL_EXT_blend_logic_op 302
#undef GL_EXT_blend_minmax
#define GL_EXT_blend_minmax 303
#undef GL_EXT_blend_subtract
#define GL_EXT_blend_subtract 304
#undef GL_EXT_buffer_storage
#define GL_EXT_buffer_storage 305
#undef GL_EXT_clear_texture
#define GL_EXT_clear_texture 306
#undef GL_EXT_clip_cull_distance
#define GL_EXT_clip_cull_distance 307
#undef GL_EXT_clip_volume_hint
#define GL_EXT_clip_volume_hint 308
#undef GL_EXT_cmyka
#define GL_EXT_cmyka 309
#undef GL_EXT_color_buffer_float
#define GL_EXT_color_buffer_float 310
#undef GL_EXT_color_buffer_half_float
#define GL_EXT_color_buffer_half_float 311
#undef GL_EXT_color_subtable
#define GL_EXT_color_subtable 312
#undef GL_EXT_compiled_vertex_array
#define GL_EXT_compiled_vertex_array 313
#undef GL_EXT_conservative_depth
#define GL_EXT_conservative_depth 314
#undef GL_EXT_convolution
#define GL_EXT_convolution 315
#undef GL_EXT_coordinate_frame
#define GL_EXT_coordinate_frame 316
#undef GL_EXT_copy_image
#define GL_EXT_copy_image 317
#undef GL_EXT_copy_texture
#define GL_EXT_copy_texture 318
#undef GL_EXT_cull_vertex
#define GL_EXT_cull_vertex 319
#undef GL_EXT_debug_label
#define GL_EXT_debug_label 320
#undef GL_EXT_debug_marker
#define GL_EXT_debug_marker 321
#undef GL_EXT_depth_bounds_test
#define GL_EXT_depth_bounds_test 322
#undef GL_EXT_direct_state_access
#define GL_EXT_direct_state_access 323
#undef GL_EXT_discard_framebuffer
#define GL_EXT_discard_framebuffer 324
#undef GL_EXT_disjoint_timer_query
#define GL_EXT_disjoint_timer_query 325
#undef GL_EXT_draw_buffers
#define GL_EXT_draw_buffers 326
#undef GL_EXT_draw_buffers2
#define GL_EXT_draw_buffers2 327
#undef GL_EXT_draw_buffers_indexed
#define GL_EXT_draw_buffers_indexed 328
#undef GL_EXT_draw_elements_base_vertex
#define GL_EXT_draw_elements_base_vertex 329
#undef GL_EXT_draw_instanced
#define GL_EXT_draw_instanced 330
#undef GL_EXT_draw_range_elements
#define GL_EXT_draw_range_elements 331
#undef GL_EXT_draw_transform_feedback
#define GL_EXT_draw_transform_feedback 332
#undef GL_EXT_external_buffer
#define GL_EXT_external_buffer 333
#undef GL_EXT_float_blend
#define GL_EXT_float_blend 334
#undef GL_EXT_fog_coord
#define GL_EXT_fog_coord 335
#undef GL_EXT_framebuffer_blit
#define GL_EXT_framebuffer_blit 336
#undef GL_EXT_framebuffer_multisample
#define GL_EXT_framebuffer_multisample 337
#undef GL_EXT_framebuffer_multisample_blit_scaled
#define GL_EXT_framebuffer_multisample_blit_scaled 338
#undef GL_EXT_framebuffer_object
#define GL_EXT_framebuffer_object 339
#undef GL_EXT_framebuffer_sRGB
#define GL_EXT_framebuffer_sRGB 340
#undef GL_EXT_geometry_point_size
#define GL_EXT_geometry_point_size 341
#undef GL_EXT_geometry_shader
#define GL_EXT_geometry_shader 342
#undef GL_EXT_geometry_shader4
#define GL_EXT_geometry_shader4 343
#undef GL_EXT_gpu_program_parameters
#define GL_EXT_gpu_program_parameters 344
#undef GL_EXT_gpu_shader4
#define GL_EXT_gpu_shader4 345
#undef GL_EXT_gpu_shader5
#define GL_EXT_gpu_shader5 346
#undef GL_EXT_histogram
#define GL_EXT_histogram 347
#undef GL_EXT_index_array_formats
#define GL_EXT_index_array_formats 348
#undef GL_EXT_index_func
#define GL_EXT_index_func 349
#undef GL_EXT_index_material
#define GL_EXT_index_material 350
#undef GL_EXT_index_texture
#define GL_EXT_index_texture 351
#undef GL_EXT_instanced_arrays
#define GL_EXT_instanced_arrays 352
#undef GL_EXT_light_texture
#define GL_EXT_light_texture 353
#undef GL_EXT_map_buffer_range
#define GL_EXT_map_buffer_range 354
#undef GL_EXT_memory_object
#define GL_EXT_memory_object 355
#undef GL_EXT_memory_object_fd
#define GL_EXT_memory_object_fd 356
#undef GL_EXT_memory_object_win32
#define GL_EXT_memory_object_win32 357
#undef GL_EXT_misc_attribute
#define GL_EXT_misc_attribute 358
#undef GL_EXT_multi_draw_arrays
#define GL_EXT_multi_draw_arrays 359
#undef GL_EXT_multi_draw_indirect
#define GL_EXT_multi_draw_indirect 360
#undef GL_EXT_multisample
#define GL_EXT_multisample 361
#undef GL_EXT_multisampled_compatibility
#define GL_EXT_multisampled_compatibility 362
#undef GL_EXT_multisampled_render_to_texture
#define GL_EXT_multisampled_render_to_texture 363
#undef GL_EXT_multiview_draw_buffers
#define GL_EXT_multiview_draw_buffers 364
#undef GL_EXT_occlusion_query_boolean
#define GL_EXT_occlusion_query_boolean 365
#undef GL_EXT_packed_depth_stencil
#define GL_EXT_packed_depth_stencil 366
#undef GL_EXT_packed_float
#define GL_EXT_packed_float 367
#undef GL_EXT_packed_pixels
#define GL_EXT_packed_pixels 368
#undef GL_EXT_paletted_texture
#define GL_EXT_paletted_texture 369
#undef GL_EXT_pixel_buffer_object
#define GL_EXT_pixel_buffer_object 370
#undef GL_EXT_pixel_transform
#define GL_EXT_pixel_transform 371
#undef GL_EXT_pixel_transform_color_table
#define GL_EXT_pixel_transform_color_table 372
#undef GL_EXT_point_parameters
#define GL_EXT_point_parameters 373
#undef GL_EXT_polygon_offset
#define GL_EXT_polygon_offset 374
#undef GL_EXT_polygon_offset_clamp
#define GL_EXT_polygon_offset_clamp 375
#undef GL_EXT_post_depth_coverage
#define GL_EXT_post_depth_coverage 376
#undef GL_EXT_primitive_bounding_box
#define GL_EXT_primitive_bounding_box 377
#undef GL_EXT_protected_textures
#define GL_EXT_protected_textures 378
#undef GL_EXT_provoking_vertex
#define GL_EXT_provoking_vertex 379
#undef GL_EXT_pvrtc_sRGB
#define GL_EXT_pvrtc_sRGB 380
#undef GL_EXT_raster_multisample
#define GL_EXT_raster_multisample 381
#undef GL_EXT_read_format_bgra
#define GL_EXT_read_format_bgra 382
#undef GL_EXT_render_snorm
#define GL_EXT_render_snorm 383
#undef GL_EXT_rescale_normal
#define GL_EXT_rescale_normal 384
#undef GL_EXT_robustness
#define GL_EXT_robustness 385
#undef GL_EXT_semaphore
#define GL_EXT_semaphore 386
#undef GL_EXT_semaphore_fd
#define GL_EXT_semaphore_fd 387
#undef GL_EXT_semaphore_win32
#define GL_EXT_semaphore_win32 388
#undef GL_EXT_sRGB
#define GL_EXT_sRGB 389
#undef GL_EXT_sRGB_write_control
#define GL_EXT_sRGB_write_control 390
#undef GL_EXT_secondary_color
#define GL_EXT_secondary_color 391
#undef GL_EXT_separate_shader_objects
#define GL_EXT_separate_shader_objects 392
#undef GL_EXT_separate_specular_color
#define GL_EXT_separate_specular_color 393
#undef GL_EXT_shader_framebuffer_fetch
#define GL_EXT_shader_framebuffer_fetch 394
#undef GL_EXT_shader_group_vote
#define GL_EXT_shader_group_vote 395
#undef GL_EXT_shader_image_load_formatted
#define GL_EXT_shader_image_load_formatted 396
#undef GL_EXT_shader_image_load_store
#define GL_EXT_shader_image_load_store 397
#undef GL_EXT_shader_implicit_conversions
#define GL_EXT_shader_implicit_conversions 398
#undef GL_EXT_shader_integer_mix
#define GL_EXT_shader_integer_mix 399
#undef GL_EXT_shader_io_blocks
#define GL_EXT_shader_io_blocks 400
#undef GL_EXT_shader_non_constant_global_initializers
#define GL_EXT_shader_non_constant_global_initializers 401
#undef GL_EXT_shader_pixel_local_storage
#define GL_EXT_shader_pixel_local_storage 402
#undef GL_EXT_shader_pixel_local_storage2
#define GL_EXT_shader_pixel_local_storage2 403
#undef GL_EXT_shader_texture_lod
#define GL_EXT_shader_texture_lod 404
#undef GL_EXT_shadow_funcs
#define GL_EXT_shadow_funcs 405
#undef GL_EXT_shadow_samplers
#define GL_EXT_shadow_samplers 406
#undef GL_EXT_shared_texture_palette
#define GL_EXT_shared_texture_palette 407
#undef GL_EXT_sparse_texture
#define GL_EXT_sparse_texture 408
#undef GL_EXT_sparse_texture2
#define GL_EXT_sparse_texture2 409
#undef GL_EXT_stencil_clear_tag
#define GL_EXT_stencil_clear_tag 410
#undef GL_EXT_stencil_two_side
#define GL_EXT_stencil_two_side 411
#undef GL_EXT_stencil_wrap
#define GL_EXT_stencil_wrap 412
#undef GL_EXT_subtexture
#define GL_EXT_subtexture 413
#undef GL_EXT_tessellation_point_size
#define GL_EXT_tessellation_point_size 414
#undef GL_EXT_tessellation_shader
#define GL_EXT_tessellation_shader 415
#undef GL_EXT_texture
#define GL_EXT_texture 416
#undef GL_EXT_texture3D
#define GL_EXT_texture3D 417
#undef GL_EXT_texture_array
#define GL_EXT_texture_array 418
#undef GL_EXT_texture_border_clamp
#define GL_EXT_texture_border_clamp 419
#undef GL_EXT_texture_buffer
#define GL_EXT_texture_buffer 420
#undef GL_EXT_texture_buffer_object
#define GL_EXT_texture_buffer_object 421
#undef GL_EXT_texture_compression_astc_decode_mode
#define GL_EXT_texture_compression_astc_decode_mode 422
#undef GL_EXT_texture_compression_dxt1
#define GL_EXT_texture_compression_dxt1 423
#undef GL_EXT_texture_compression_latc
#define GL_EXT_texture_compression_latc 424
#undef GL_EXT_texture_compression_rgtc
#define GL_EXT_texture_compression_rgtc 425
#undef GL_EXT_texture_compression_s3tc
#define GL_EXT_texture_compression_s3tc 426
#undef GL_EXT_texture_cube_map
#define GL_EXT_texture_cube_map 427
#undef GL_EXT_texture_cube_map_array
#define GL_EXT_texture_cube_map_array 428
#undef GL_EXT_texture_env_add
#define GL_EXT_texture_env_add 429
#undef GL_EXT_texture_env_combine
#define GL_EXT_texture_env_combine 430
#undef GL_EXT_texture_env_dot3
#define GL_EXT_texture_env_dot3 431
#undef GL_EXT_texture_filter_anisotropic
#define GL_EXT_texture_filter_anisotropic 432
#undef GL_EXT_texture_filter_minmax
#define GL_EXT_texture_filter_minmax 433
#undef GL_EXT_texture_format_BGRA8888
#define GL_EXT_texture_format_BGRA8888 434
#undef GL_EXT_texture_integer
#define GL_EXT_texture_integer 435
#undef GL_EXT_texture_lod_bias
#define GL_EXT_texture_lod_bias 436
#undef GL_EXT_texture_mirror_clamp
#define GL_EXT_texture_mirror_clamp 437
#undef GL_EXT_texture_norm16
#define GL_EXT_texture_norm16 438
#undef GL_EXT_texture_object
#define GL_EXT_texture_object 439
#undef GL_EXT_texture_perturb_normal
#define GL_EXT_texture_perturb_normal 440
#undef GL_EXT_texture_rg
#define GL_EXT_texture_rg 441
#undef GL_EXT_texture_sRGB
#define GL_EXT_texture_sRGB 442
#undef GL_EXT_texture_sRGB_R8
#define GL_EXT_texture_sRGB_R8 443
#undef GL_EXT_texture_sRGB_RG8
#define GL_EXT_texture_sRGB_RG8 444
#undef GL_EXT_texture_sRGB_decode
#define GL_EXT_texture_sRGB_decode 445
#undef GL_EXT_texture_shared_exponent
#define GL_EXT_texture_shared_exponent 446
#undef GL_EXT_texture_snorm
#define GL_EXT_texture_snorm 447
#undef GL_EXT_texture_storage
#define GL_EXT_texture_storage 448
#undef GL_EXT_texture_swizzle
#define GL_EXT_texture_swizzle 449
#undef GL_EXT_texture_type_2_10_10_10_REV
#define GL_EXT_texture_type_2_10_10_10_REV 450
#undef GL_EXT_texture_view
#define GL_EXT_texture_view 451
#undef GL_EXT_timer_query
#define GL_EXT_timer_query 452
#undef GL_EXT_transform_feedback
#define GL_EXT_transform_feedback 453
#undef GL_EXT_unpack_subimage
#define GL_EXT_unpack_subimage 454
#undef GL_EXT_vertex_array
#define GL_EXT_vertex_array 455
#undef GL_EXT_vertex_array_bgra
#define GL_EXT_vertex_array_bgra 456
#undef GL_EXT_vertex_attrib_64bit
#define GL_EXT_vertex_attrib_64bit 457
#undef GL_EXT_vertex_shader
#define GL_EXT_vertex_shader 458
#undef GL_EXT_vertex_weighting
#define GL_EXT_vertex_weighting 459
#undef GL_EXT_win32_keyed_mutex
#define GL_EXT_win32_keyed_mutex 460
#undef GL_EXT_window_rectangles
#define GL_EXT_window_rectangles 461
#undef GL_EXT_x11_sync_object
#define GL_EXT_x11_sync_object 462
#undef GL_FJ_shader_binary_GCCSO
#define GL_FJ_shader_binary_GCCSO 463
#undef GL_GREMEDY_frame_terminator
#define GL_GREMEDY_frame_terminator 464
#undef GL_GREMEDY_string_marker
#define GL_GREMEDY_string_marker 465
#undef GL_HP_convolution_border_modes
#define GL_HP_convolution_border_modes 466
#undef GL_HP_image_transform
#define GL_HP_image_transform 467
#undef GL_HP_occlusion_test
#define GL_HP_occlusion_test 468
#undef GL_HP_texture_lighting
#define GL_HP_texture_lighting 469
#undef GL_IBM_cull_vertex
#define GL_IBM_cull_vertex 470
#undef GL_IBM_multimode_draw_arrays
#define GL_IBM_multimode_draw_arrays 471
#undef GL_IBM_rasterpos_clip
#define GL_IBM_rasterpos_clip 472
#undef GL_IBM_static_data
#define GL_IBM_static_data 473
#undef GL_IBM_texture_mirrored_repeat
#define GL_IBM_texture_mirrored_repeat 474
#undef GL_IBM_vertex_array_lists
#define GL_IBM_vertex_array_lists 475
#undef GL_IMG_bindless_texture
#define GL_IMG_bindless_texture 476
#undef GL_IMG_framebuffer_downsample
#define GL_IMG_framebuffer_downsample 477
#undef GL_IMG_multisampled_render_to_texture
#define GL_IMG_multisampled_render_to_texture 478
#undef GL_IMG_program_binary
#define GL_IMG_program_binary 479
#undef GL_IMG_read_format
#define GL_IMG_read_format 480
#undef GL_IMG_shader_binary
#define GL_IMG_shader_binary 481
#undef GL_IMG_texture_compression_pvrtc
#define GL_IMG_texture_compression_pvrtc 482
#undef GL_IMG_texture_compression_pvrtc2
#define GL_IMG_texture_compression_pvrtc2 483
#undef GL_IMG_texture_env_enhanced_fixed_function
#define GL_IMG_texture_env_enhanced_fixed_function 484
#undef GL_IMG_texture_filter_cubic
#define GL_IMG_texture_filter_cubic 485
#undef GL_IMG_user_clip_plane
#define GL_IMG_user_clip_plane 486
#undef GL_INGR_blend_func_separate
#define GL_INGR_blend_func_separate 487
#undef GL_INGR_color_clamp
#define GL_INGR_color_clamp 488
#undef GL_INGR_interlace_read
#define GL_INGR_interlace_read 489
#undef GL_INTEL_conservative_rasterization
#define GL_INTEL_conservative_rasterization 490
#undef GL_INTEL_fragment_shader_ordering
#define GL_INTEL_fragment_shader_ordering 491
#undef GL_INTEL_framebuffer_CMAA
#define GL_INTEL_framebuffer_CMAA 492
#undef GL_INTEL_map_texture
#define GL_INTEL_map_texture 493
#undef GL_INTEL_parallel_arrays
#define GL_INTEL_parallel_arrays 494
#undef GL_INTEL_performance_query
#define GL_INTEL_performance_query 495
#undef GL_KHR_blend_equation_advanced
#define GL_KHR_blend_equation_advanced 496
#undef GL_KHR_blend_equation_advanced_coherent
#define GL_KHR_blend_equation_advanced_coherent 497
#undef GL_KHR_context_flush_control
#define GL_KHR_context_flush_control 498
#undef GL_KHR_debug
#define GL_KHR_debug 499
#undef GL_KHR_no_error
#define GL_KHR_no_error 500
#undef GL_KHR_robust_buffer_access_behavior
#define GL_KHR_robust_buffer_access_behavior 501
#undef GL_KHR_robustness
#define GL_KHR_robustness 502
#undef GL_KHR_texture_compression_astc_hdr
#define GL_KHR_texture_compression_astc_hdr 503
#undef GL_KHR_texture_compression_astc_ldr
#define GL_KHR_texture_compression_astc_ldr 504
#undef GL_KHR_texture_compression_astc_sliced_3d
#define GL_KHR_texture_compression_astc_sliced_3d 505
#undef GL_MESAX_texture_stack
#define GL_MESAX_texture_stack 506
#undef GL_MESA_pack_invert
#define GL_MESA_pack_invert 507
#undef GL_MESA_resize_buffers
#define GL_MESA_resize_buffers 508
#undef GL_MESA_shader_integer_functions
#define GL_MESA_shader_integer_functions 509
#undef GL_MESA_window_pos
#define GL_MESA_window_pos 510
#undef GL_MESA_ycbcr_texture
#define GL_MESA_ycbcr_texture 511
#undef GL_NVX_blend_equation_advanced_multi_draw_buffers
#define GL_NVX_blend_equation_advanced_multi_draw_buffers 512
#undef GL_NVX_conditional_render
#define GL_NVX_conditional_render 513
#undef GL_NVX_gpu_memory_info
#define GL_NVX_gpu_memory_info 514
#undef GL_NVX_linked_gpu_multicast
#define GL_NVX_linked_gpu_multicast 515
#undef GL_NV_alpha_to_coverage_dither_control
#define GL_NV_alpha_to_coverage_dither_control 516
#undef GL_NV_bindless_multi_draw_indirect
#define GL_NV_bindless_multi_draw_indirect 517
#undef GL_NV_bindless_multi_draw_indirect_count
#define GL_NV_bindless_multi_draw_indirect_count 518
#undef GL_NV_bindless_texture
#define GL_NV_bindless_texture 519
#undef GL_NV_blend_equation_advanced
#define GL_NV_blend_equation_advanced 520
#undef GL_NV_blend_equation_advanced_coherent
#define GL_NV_blend_equation_advanced_coherent 521
#undef GL_NV_blend_square
#define GL_NV_blend_square 522
#undef GL_NV_clip_space_w_scaling
#define GL_NV_clip_space_w_scaling 523
#undef GL_NV_command_list
#define GL_NV_command_list 524
#undef GL_NV_compute_program5
#define GL_NV_compute_program5 525
#undef GL_NV_conditional_render
#define GL_NV_conditional_render 526
#undef GL_NV_conservative_raster
#define GL_NV_conservative_raster 527
#undef GL_NV_conservative_raster_dilate
#define GL_NV_conservative_raster_dilate 528
#undef GL_NV_conservative_raster_pre_snap_triangles
#define GL_NV_conservative_raster_pre_snap_triangles 529
#undef GL_NV_copy_buffer
#define GL_NV_copy_buffer 530
#undef GL_NV_copy_depth_to_color
#define GL_NV_copy_depth_to_color 531
#undef GL_NV_copy_image
#define GL_NV_copy_image 532
#undef GL_NV_coverage_sample
#define GL_NV_coverage_sample 533
#undef GL_NV_deep_texture3D
#define GL_NV_deep_texture3D 534
#undef GL_NV_depth_buffer_float
#define GL_NV_depth_buffer_float 535
#undef GL_NV_depth_clamp
#define GL_NV_depth_clamp 536
#undef GL_NV_depth_nonlinear
#define GL_NV_depth_nonlinear 537
#undef GL_NV_draw_buffers
#define GL_NV_draw_buffers 538
#undef GL_NV_draw_instanced
#define GL_NV_draw_instanced 539
#undef GL_NV_draw_texture
#define GL_NV_draw_texture 540
#undef GL_NV_draw_vulkan_image
#define GL_NV_draw_vulkan_image 541
#undef GL_NV_evaluators
#define GL_NV_evaluators 542
#undef GL_NV_explicit_attrib_location
#define GL_NV_explicit_attrib_location 543
#undef GL_NV_explicit_multisample
#define GL_NV_explicit_multisample 544
#undef GL_NV_fbo_color_attachments
#define GL_NV_fbo_color_attachments 545
#undef GL_NV_fence
#define GL_NV_fence 546
#undef GL_NV_fill_rectangle
#define GL_NV_fill_rectangle 547
#undef GL_NV_float_buffer
#define GL_NV_float_buffer 548
#undef GL_NV_fog_distance
#define GL_NV_fog_distance 549
#undef GL_NV_fragment_coverage_to_color
#define GL_NV_fragment_coverage_to_color 550
#undef GL_NV_fragment_program
#define GL_NV_fragment_program 551
#undef GL_NV_fragment_program2
#define GL_NV_fragment_program2 552
#undef GL_NV_fragment_program4
#define GL_NV_fragment_program4 553
#undef GL_NV_fragment_program_option
#define GL_NV_fragment_program_option 554
#undef GL_NV_fragment_shader_interlock
#define GL_NV_fragment_shader_interlock 555
#undef GL_NV_framebuffer_blit
#define GL_NV_framebuffer_blit 556
#undef GL_NV_framebuffer_mixed_samples
#define GL_NV_framebuffer_mixed_samples 557
#undef GL_NV_framebuffer_multisample
#define GL_NV_framebuffer_multisample 558
#undef GL_NV_framebuffer_multisample_coverage
#define GL_NV_framebuffer_multisample_coverage 559
#undef GL_NV_generate_mipmap_sRGB
#define GL_NV_generate_mipmap_sRGB 560
#undef GL_NV_geometry_program4
#define GL_NV_geometry_program4 561
#undef GL_NV_geometry_shader4
#define GL_NV_geometry_shader4 562
#undef GL_NV_geometry_shader_passthrough
#define GL_NV_geometry_shader_passthrough 563
#undef GL_NV_gpu_program4
#define GL_NV_gpu_program4 564
#undef GL_NV_gpu_program5
#define GL_NV_gpu_program5 565
#undef GL_NV_gpu_program5_mem_extended
#define GL_NV_gpu_program5_mem_extended 566
#undef GL_NV_gpu_shader5
#define GL_NV_gpu_shader5 567
#undef GL_NV_half_float
#define GL_NV_half_float 568
#undef GL_NV_image_formats
#define GL_NV_image_formats 569
#undef GL_NV_instanced_arrays
#define GL_NV_instanced_arrays 570
#undef GL_NV_internalformat_sample_query
#define GL_NV_internalformat_sample_query 571
#undef GL_NV_light_max_exponent
#define GL_NV_light_max_exponent 572
#undef GL_NV_gpu_multicast
#define GL_NV_gpu_multicast 573
#undef GL_NV_multisample_coverage
#define GL_NV_multisample_coverage 574
#undef GL_NV_multisample_filter_hint
#define GL_NV_multisample_filter_hint 575
#undef GL_NV_non_square_matrices
#define GL_NV_non_square_matrices 576
#undef GL_NV_occlusion_query
#define GL_NV_occlusion_query 577
#undef GL_NV_packed_depth_stencil
#define GL_NV_packed_depth_stencil 578
#undef GL_NV_parameter_buffer_object
#define GL_NV_parameter_buffer_object 579
#undef GL_NV_parameter_buffer_object2
#define GL_NV_parameter_buffer_object2 580
#undef GL_NV_path_rendering
#define GL_NV_path_rendering 581
#undef GL_NV_path_rendering_shared_edge
#define GL_NV_path_rendering_shared_edge 582
#undef GL_NV_pixel_data_range
#define GL_NV_pixel_data_range 583
#undef GL_NV_point_sprite
#define GL_NV_point_sprite 584
#undef GL_NV_polygon_mode
#define GL_NV_polygon_mode 585
#undef GL_NV_present_video
#define GL_NV_present_video 586
#undef GL_NV_primitive_restart
#define GL_NV_primitive_restart 587
#undef GL_NV_read_buffer
#define GL_NV_read_buffer 588
#undef GL_NV_read_buffer_front
#define GL_NV_read_buffer_front 589
#undef GL_NV_read_depth
#define GL_NV_read_depth 590
#undef GL_NV_read_depth_stencil
#define GL_NV_read_depth_stencil 591
#undef GL_NV_read_stencil
#define GL_NV_read_stencil 592
#undef GL_NV_register_combiners
#define GL_NV_register_combiners 593
#undef GL_NV_register_combiners2
#define GL_NV_register_combiners2 594
#undef GL_NV_robustness_video_memory_purge
#define GL_NV_robustness_video_memory_purge 595
#undef GL_NV_sRGB_formats
#define GL_NV_sRGB_formats 596
#undef GL_NV_sample_locations
#define GL_NV_sample_locations 597
#undef GL_NV_sample_mask_override_coverage
#define GL_NV_sample_mask_override_coverage 598
#undef GL_NV_shader_atomic_counters
#define GL_NV_shader_atomic_counters 599
#undef GL_NV_shader_atomic_float
#define GL_NV_shader_atomic_float 600
#undef GL_NV_shader_atomic_float64
#define GL_NV_shader_atomic_float64 601
#undef GL_NV_shader_atomic_fp16_vector
#define GL_NV_shader_atomic_fp16_vector 602
#undef GL_NV_shader_atomic_int64
#define GL_NV_shader_atomic_int64 603
#undef GL_NV_shader_buffer_load
#define GL_NV_shader_buffer_load 604
#undef GL_NV_shader_buffer_store
#define GL_NV_shader_buffer_store 605
#undef GL_NV_shader_noperspective_interpolation
#define GL_NV_shader_noperspective_interpolation 606
#undef GL_NV_shader_storage_buffer_object
#define GL_NV_shader_storage_buffer_object 607
#undef GL_NV_shader_thread_group
#define GL_NV_shader_thread_group 608
#undef GL_NV_shader_thread_shuffle
#define GL_NV_shader_thread_shuffle 609
#undef GL_NV_shadow_samplers_array
#define GL_NV_shadow_samplers_array 610
#undef GL_NV_shadow_samplers_cube
#define GL_NV_shadow_samplers_cube 611
#undef GL_NV_stereo_view_rendering
#define GL_NV_stereo_view_rendering 612
#undef GL_NV_tessellation_program5
#define GL_NV_tessellation_program5 613
#undef GL_NV_texgen_emboss
#define GL_NV_texgen_emboss 614
#undef GL_NV_texgen_reflection
#define GL_NV_texgen_reflection 615
#undef GL_NV_texture_barrier
#define GL_NV_texture_barrier 616
#undef GL_NV_texture_border_clamp
#define GL_NV_texture_border_clamp 617
#undef GL_NV_texture_compression_s3tc_update
#define GL_NV_texture_compression_s3tc_update 618
#undef GL_NV_texture_compression_vtc
#define GL_NV_texture_compression_vtc 619
#undef GL_NV_texture_env_combine4
#define GL_NV_texture_env_combine4 620
#undef GL_NV_texture_expand_normal
#define GL_NV_texture_expand_normal 621
#undef GL_NV_texture_multisample
#define GL_NV_texture_multisample 622
#undef GL_NV_texture_npot_2D_mipmap
#define GL_NV_texture_npot_2D_mipmap 623
#undef GL_NV_texture_rectangle
#define GL_NV_texture_rectangle 624
#undef GL_NV_texture_shader
#define GL_NV_texture_shader 625
#undef GL_NV_texture_shader2
#define GL_NV_texture_shader2 626
#undef GL_NV_texture_shader3
#define GL_NV_texture_shader3 627
#undef GL_NV_transform_feedback
#define GL_NV_transform_feedback 628
#undef GL_NV_transform_feedback2
#define GL_NV_transform_feedback2 629
#undef GL_NV_uniform_buffer_unified_memory
#define GL_NV_uniform_buffer_unified_memory 630
#undef GL_NV_vdpau_interop
#define GL_NV_vdpau_interop 631
#undef GL_NV_vertex_array_range
#define GL_NV_vertex_array_range 632
#undef GL_NV_vertex_array_range2
#define GL_NV_vertex_array_range2 633
#undef GL_NV_vertex_attrib_integer_64bit
#define GL_NV_vertex_attrib_integer_64bit 634
#undef GL_NV_vertex_buffer_unified_memory
#define GL_NV_vertex_buffer_unified_memory 635
#undef GL_NV_vertex_program
#define GL_NV_vertex_program 636
#undef GL_NV_vertex_program1_1
#define GL_NV_vertex_program1_1 637
#undef GL_NV_vertex_program2
#define GL_NV_vertex_program2 638
#undef GL_NV_vertex_program2_option
#define GL_NV_vertex_program2_option 639
#undef GL_NV_vertex_program3
#define GL_NV_vertex_program3 640
#undef GL_NV_vertex_program4
#define GL_NV_vertex_program4 641
#undef GL_NV_video_capture
#define GL_NV_video_capture 642
#undef GL_NV_viewport_array
#define GL_NV_viewport_array 643
#undef GL_NV_viewport_array2
#define GL_NV_viewport_array2 644
#undef GL_NV_viewport_swizzle
#define GL_NV_viewport_swizzle 645
#undef GL_OES_EGL_image
#define GL_OES_EGL_image 646
#undef GL_OES_EGL_image_external
#define GL_OES_EGL_image_external 647
#undef GL_OES_EGL_image_external_essl3
#define GL_OES_EGL_image_external_essl3 648
#undef GL_OES_blend_equation_separate
#define GL_OES_blend_equation_separate 649
#undef GL_OES_blend_func_separate
#define GL_OES_blend_func_separate 650
#undef GL_OES_blend_subtract
#define GL_OES_blend_subtract 651
#undef GL_OES_byte_coordinates
#define GL_OES_byte_coordinates 652
#undef GL_OES_compressed_ETC1_RGB8_sub_texture
#define GL_OES_compressed_ETC1_RGB8_sub_texture 653
#undef GL_OES_compressed_ETC1_RGB8_texture
#define GL_OES_compressed_ETC1_RGB8_texture 654
#undef GL_OES_compressed_paletted_texture
#define GL_OES_compressed_paletted_texture 655
#undef GL_OES_copy_image
#define GL_OES_copy_image 656
#undef GL_OES_depth24
#define GL_OES_depth24 657
#undef GL_OES_depth32
#define GL_OES_depth32 658
#undef GL_OES_depth_texture
#define GL_OES_depth_texture 659
#undef GL_OES_draw_buffers_indexed
#define GL_OES_draw_buffers_indexed 660
#undef GL_OES_draw_elements_base_vertex
#define GL_OES_draw_elements_base_vertex 661
#undef GL_OES_draw_texture
#define GL_OES_draw_texture 662
#undef GL_OES_element_index_uint
#define GL_OES_element_index_uint 663
#undef GL_OES_extended_matrix_palette
#define GL_OES_extended_matrix_palette 664
#undef GL_OES_fbo_render_mipmap
#define GL_OES_fbo_render_mipmap 665
#undef GL_OES_fixed_point
#define GL_OES_fixed_point 666
#undef GL_OES_fragment_precision_high
#define GL_OES_fragment_precision_high 667
#undef GL_OES_framebuffer_object
#define GL_OES_framebuffer_object 668
#undef GL_OES_geometry_point_size
#define GL_OES_geometry_point_size 669
#undef GL_OES_geometry_shader
#define GL_OES_geometry_shader 670
#undef GL_OES_get_program_binary
#define GL_OES_get_program_binary 671
#undef GL_OES_gpu_shader5
#define GL_OES_gpu_shader5 672
#undef GL_OES_mapbuffer
#define GL_OES_mapbuffer 673
#undef GL_OES_matrix_get
#define GL_OES_matrix_get 674
#undef GL_OES_matrix_palette
#define GL_OES_matrix_palette 675
#undef GL_OES_packed_depth_stencil
#define GL_OES_packed_depth_stencil 676
#undef GL_OES_point_size_array
#define GL_OES_point_size_array 677
#undef GL_OES_point_sprite
#define GL_OES_point_sprite 678
#undef GL_OES_primitive_bounding_box
#define GL_OES_primitive_bounding_box 679
#undef GL_OES_query_matrix
#define GL_OES_query_matrix 680
#undef GL_OES_read_format
#define GL_OES_read_format 681
#undef GL_OES_required_internalformat
#define GL_OES_required_internalformat 682
#undef GL_OES_rgb8_rgba8
#define GL_OES_rgb8_rgba8 683
#undef GL_OES_sample_shading
#define GL_OES_sample_shading 684
#undef GL_OES_sample_variables
#define GL_OES_sample_variables 685
#undef GL_OES_shader_image_atomic
#define GL_OES_shader_image_atomic 686
#undef GL_OES_shader_io_blocks
#define GL_OES_shader_io_blocks 687
#undef GL_OES_shader_multisample_interpolation
#define GL_OES_shader_multisample_interpolation 688
#undef GL_OES_single_precision
#define GL_OES_single_precision 689
#undef GL_OES_standard_derivatives
#define GL_OES_standard_derivatives 690
#undef GL_OES_stencil1
#define GL_OES_stencil1 691
#undef GL_OES_stencil4
#define GL_OES_stencil4 692
#undef GL_OES_stencil8
#define GL_OES_stencil8 693
#undef GL_OES_stencil_wrap
#define GL_OES_stencil_wrap 694
#undef GL_OES_surfaceless_context
#define GL_OES_surfaceless_context 695
#undef GL_OES_tessellation_point_size
#define GL_OES_tessellation_point_size 696
#undef GL_OES_tessellation_shader
#define GL_OES_tessellation_shader 697
#undef GL_OES_texture_3D
#define GL_OES_texture_3D 698
#undef GL_OES_texture_border_clamp
#define GL_OES_texture_border_clamp 699
#undef GL_OES_texture_buffer
#define GL_OES_texture_buffer 700
#undef GL_OES_texture_compression_astc
#define GL_OES_texture_compression_astc 701
#undef GL_OES_texture_cube_map
#define GL_OES_texture_cube_map 702
#undef GL_OES_texture_cube_map_array
#define GL_OES_texture_cube_map_array 703
#undef GL_OES_texture_env_crossbar
#define GL_OES_texture_env_crossbar 704
#undef GL_OES_texture_float
#define GL_OES_texture_float 705
#undef GL_OES_texture_float_linear
#define GL_OES_texture_float_linear 706
#undef GL_OES_texture_half_float
#define GL_OES_texture_half_float 707
#undef GL_OES_texture_half_float_linear
#define GL_OES_texture_half_float_linear 708
#undef GL_OES_texture_mirrored_repeat
#define GL_OES_texture_mirrored_repeat 709
#undef GL_OES_texture_npot
#define GL_OES_texture_npot 710
#undef GL_OES_texture_stencil8
#define GL_OES_texture_stencil8 711
#undef GL_OES_texture_storage_multisample_2d_array
#define GL_OES_texture_storage_multisample_2d_array 712
#undef GL_OES_texture_view
#define GL_OES_texture_view 713
#undef GL_OES_vertex_array_object
#define GL_OES_vertex_array_object 714
#undef GL_OES_vertex_half_float
#define GL_OES_vertex_half_float 715
#undef GL_OES_vertex_type_10_10_10_2
#define GL_OES_vertex_type_10_10_10_2 716
#undef GL_OES_viewport_array
#define GL_OES_viewport_array 717
#undef GL_OML_interlace
#define GL_OML_interlace 718
#undef GL_OML_resample
#define GL_OML_resample 719
#undef GL_OML_subsample
#define GL_OML_subsample 720
#undef GL_OVR_multiview
#define GL_OVR_multiview 721
#undef GL_OVR_multiview2
#define GL_OVR_multiview2 722
#undef GL_OVR_multiview_multisampled_render_to_texture
#define GL_OVR_multiview_multisampled_render_to_texture 723
#undef GL_PGI_misc_hints
#define GL_PGI_misc_hints 724
#undef GL_PGI_vertex_hints
#define GL_PGI_vertex_hints 725
#undef GL_QCOM_alpha_test
#define GL_QCOM_alpha_test 726
#undef GL_QCOM_binning_control
#define GL_QCOM_binning_control 727
#undef GL_QCOM_driver_control
#define GL_QCOM_driver_control 728
#undef GL_QCOM_extended_get
#define GL_QCOM_extended_get 729
#undef GL_QCOM_extended_get2
#define GL_QCOM_extended_get2 730
#undef GL_QCOM_framebuffer_foveated
#define GL_QCOM_framebuffer_foveated 731
#undef GL_QCOM_perfmon_global_mode
#define GL_QCOM_perfmon_global_mode 732
#undef GL_QCOM_shader_framebuffer_fetch_noncoherent
#define GL_QCOM_shader_framebuffer_fetch_noncoherent 733
#undef GL_QCOM_tiled_rendering
#define GL_QCOM_tiled_rendering 734
#undef GL_QCOM_writeonly_rendering
#define GL_QCOM_writeonly_rendering 735
#undef GL_REND_screen_coordinates
#define GL_REND_screen_coordinates 736
#undef GL_S3_s3tc
#define GL_S3_s3tc 737
#undef GL_SGIS_detail_texture
#define GL_SGIS_detail_texture 738
#undef GL_SGIS_fog_function
#define GL_SGIS_fog_function 739
#undef GL_SGIS_generate_mipmap
#define GL_SGIS_generate_mipmap 740
#undef GL_SGIS_multisample
#define GL_SGIS_multisample 741
#undef GL_SGIS_pixel_texture
#define GL_SGIS_pixel_texture 742
#undef GL_SGIS_point_line_texgen
#define GL_SGIS_point_line_texgen 743
#undef GL_SGIS_point_parameters
#define GL_SGIS_point_parameters 744
#undef GL_SGIS_sharpen_texture
#define GL_SGIS_sharpen_texture 745
#undef GL_SGIS_texture4D
#define GL_SGIS_texture4D 746
#undef GL_SGIS_texture_border_clamp
#define GL_SGIS_texture_border_clamp 747
#undef GL_SGIS_texture_color_mask
#define GL_SGIS_texture_color_mask 748
#undef GL_SGIS_texture_edge_clamp
#define GL_SGIS_texture_edge_clamp 749
#undef GL_SGIS_texture_filter4
#define GL_SGIS_texture_filter4 750
#undef GL_SGIS_texture_lod
#define GL_SGIS_texture_lod 751
#undef GL_SGIS_texture_select
#define GL_SGIS_texture_select 752
#undef GL_SGIX_async
#define GL_SGIX_async 753
#undef GL_SGIX_async_histogram
#define GL_SGIX_async_histogram 754
#undef GL_SGIX_async_pixel
#define GL_SGIX_async_pixel 755
#undef GL_SGIX_blend_alpha_minmax
#define GL_SGIX_blend_alpha_minmax 756
#undef GL_SGIX_calligraphic_fragment
#define GL_SGIX_calligraphic_fragment 757
#undef GL_SGIX_clipmap
#define GL_SGIX_clipmap 758
#undef GL_SGIX_convolution_accuracy
#define GL_SGIX_convolution_accuracy 759
#undef GL_SGIX_depth_pass_instrument
#define GL_SGIX_depth_pass_instrument 760
#undef GL_SGIX_depth_texture
#define GL_SGIX_depth_texture 761
#undef GL_SGIX_flush_raster
#define GL_SGIX_flush_raster 762
#undef GL_SGIX_fog_offset
#define GL_SGIX_fog_offset 763
#undef GL_SGIX_fragment_lighting
#define GL_SGIX_fragment_lighting 764
#undef GL_SGIX_framezoom
#define GL_SGIX_framezoom 765
#undef GL_SGIX_igloo_interface
#define GL_SGIX_igloo_interface 766
#undef GL_SGIX_instruments
#define GL_SGIX_instruments 767
#undef GL_SGIX_interlace
#define GL_SGIX_interlace 768
#undef GL_SGIX_ir_instrument1
#define GL_SGIX_ir_instrument1 769
#undef GL_SGIX_list_priority
#define GL_SGIX_list_priority 770
#undef GL_SGIX_pixel_texture
#define GL_SGIX_pixel_texture 771
#undef GL_SGIX_pixel_tiles
#define GL_SGIX_pixel_tiles 772
#undef GL_SGIX_polynomial_ffd
#define GL_SGIX_polynomial_ffd 773
#undef GL_SGIX_reference_plane
#define GL_SGIX_reference_plane 774
#undef GL_SGIX_resample
#define GL_SGIX_resample 775
#undef GL_SGIX_scalebias_hint
#define GL_SGIX_scalebias_hint 776
#undef GL_SGIX_shadow
#define GL_SGIX_shadow 777
#undef GL_SGIX_shadow_ambient
#define GL_SGIX_shadow_ambient 778
#undef GL_SGIX_sprite
#define GL_SGIX_sprite 779
#undef GL_SGIX_subsample
#define GL_SGIX_subsample 780
#undef GL_SGIX_tag_sample_buffer
#define GL_SGIX_tag_sample_buffer 781
#undef GL_SGIX_texture_add_env
#define GL_SGIX_texture_add_env 782
#undef GL_SGIX_texture_coordinate_clamp
#define GL_SGIX_texture_coordinate_clamp 783
#undef GL_SGIX_texture_lod_bias
#define GL_SGIX_texture_lod_bias 784
#undef GL_SGIX_texture_multi_buffer
#define GL_SGIX_texture_multi_buffer 785
#undef GL_SGIX_texture_scale_bias
#define GL_SGIX_texture_scale_bias 786
#undef GL_SGIX_vertex_preclip
#define GL_SGIX_vertex_preclip 787
#undef GL_SGIX_ycrcb
#define GL_SGIX_ycrcb 788
#undef GL_SGIX_ycrcb_subsample
#define GL_SGIX_ycrcb_subsample 789
#undef GL_SGIX_ycrcba
#define GL_SGIX_ycrcba 790
#undef GL_SGI_color_matrix
#define GL_SGI_color_matrix 791
#undef GL_SGI_color_table
#define GL_SGI_color_table 792
#undef GL_SGI_texture_color_table
#define GL_SGI_texture_color_table 793
#undef GL_SUNX_constant_data
#define GL_SUNX_constant_data 794
#undef GL_SUN_convolution_border_modes
#define GL_SUN_convolution_border_modes 795
#undef GL_SUN_global_alpha
#define GL_SUN_global_alpha 796
#undef GL_SUN_mesh_array
#define GL_SUN_mesh_array 797
#undef GL_SUN_slice_accum
#define GL_SUN_slice_accum 798
#undef GL_SUN_triangle_list
#define GL_SUN_triangle_list 799
#undef GL_SUN_vertex
#define GL_SUN_vertex 800
#undef GL_VIV_shader_binary
#define GL_VIV_shader_binary 801
#undef GL_WIN_phong_shading
#define GL_WIN_phong_shading 802
#undef GL_WIN_specular_fog
#define GL_WIN_specular_fog 803
#undef GL_EXT_Cg_shader
#define GL_EXT_Cg_shader 804
#undef GL_EXTX_framebuffer_mixed_formats
#define GL_EXTX_framebuffer_mixed_formats 805
#undef GL_EXT_texture_compression_dxt1
#define GL_EXT_texture_compression_dxt1 806
#undef GL_EXT_texture_edge_clamp
#define GL_EXT_texture_edge_clamp 807
#undef GL_EXT_texture_storage
#define GL_EXT_texture_storage 808
#undef GL_EXT_import_sync_object
#define GL_EXT_import_sync_object 809
#undef GL_KTX_buffer_region
#define GL_KTX_buffer_region 810
#undef GL_NV_ES1_1_compatibility
#define GL_NV_ES1_1_compatibility 811
#undef GL_EXT_texture_lod
#define GL_EXT_texture_lod 812

#ifdef __cplusplus
extern "C" {
#endif

/*!
 * generic OnutGL Procedure signature
 */
typedef void(KHRONOS_APIENTRY*OnutGLProc)(void);

/*!
 * OnutGetProcAddress signature.
 */
typedef OnutGLProc (*OnutGLGetProcAddressFunc)(const char *);

/*!
 * OnutGetProcAddress function pointer used to wrangle all the GL and
 * GLES functions and extensions. Automatically points the a default
 * implementation, and can be overriden by the user if they need something
 * specific. Make sure that it is set before calling onutGLInit()
 */
extern OnutGLGetProcAddressFunc onutGLGetProcAddress;


/*!
 * User is required to call this function as soon as the GL context has been created.
 * Failing to calling this function will result in a crash.
 *
 * \return returns KHRONOS_TRUE if successful, KHRONOS_FALSE otherwise.
 */
khronos_int8_t onutGLInit(void);

/*!
 * User should call this function as soon as the GL context is destroyed. It is not
 * mandatory, but is highly recommended. User can also opt to create anew GL context
 * and call onutGLInit() instead.
 */
void onutGLShutdown(void);

/*!
 * Utility to check if a specific OpenGL or OpenGL ES function or extension is supported and available.
 *
 * Usage example:
 *
 * \code
 * if(onutGLSupport(GL_VERSION_3_0) || onutGLSupport(GL_ES_VERSION_3_0))
 * {
 *     void *pMapped = glMapBufferRange(target, 0, buffer.size(), GL_MAP_WRITE_BIT | GL_MAP_INVALIDATE_BUFFER_BIT);
 *     std::copy(buffer.begin(), buffer.end(), pMapped);
 *        glUnmapBuffer(target);
 * }
 * else if (onutGLSupport(GL_EXT_map_buffer_range) && onutGLSupport(GL_OES_mapbuffer)
 * {
 *     void *pMapped = glMapBufferRangeEXT(target, 0, buffer.size(), GL_MAP_WRITE_BIT_EXT | GL_MAP_INVALIDATE_BUFFER_BIT_EXT);
 *     std::copy(buffer.begin(), buffer.end(), pMapped);
 *     glUnmapBufferOES(target);
 * }
 * else
 * {
 *     glBufferData(target, buffer.size(), reinterpret_cast<const GLvoid *>(&buffer[0]), usage);
 * }
 * \endcode
 *
 * \return returns KHRONOS_TRUE if successful, KHRONOS_FALSE otherwise.
 */
ONUT_FORCE_INLINE khronos_int8_t onutGLSupport(khronos_usize_t extensionID);

/*!
     Checks if a specific OpenGL or OpenGL ES command triggered an error.

     Usage example:

     \code
         // Only checks if compiled in debug.
         onutGLCheckErrorDebug(glBindBuffer(handle));

         // checks for both debug and release.
         onutGLCheckError(glBufferData(target, bufferSize, (const GLvoid *)pBuffer, GL_STATIC_DRAW));
     \endcode

     \note onutGLCheckErrorDebug is disabled when the application is compiled for a release build.
     \warning calling glGetError can affect your rendering performance. We recommend
     using onutGLCheckErrorDebug instead of onutGLCheckError so that the production
     build won't be impacted. If you want to use onutGLCheckError, make sure it is not called
     during time critical code path.
 */
void _onutGLCheckError(const char* fileName, int lineNumber);
#if !defined(onutGLCheckError)
    #define onutGLCheckError(x) x; _onutGLCheckError(__FILE__, __LINE__)
#endif
#if !defined(onutGLCheckErrorDebug)
    #if !defined(NDEBUG)
        #define onutGLCheckErrorDebug(x) x; _onutGLCheckError(__FILE__, __LINE__)
    #else
        #define onutGLCheckErrorDebug(x) x
    #endif
#endif

/* Type definitions */
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef khronos_uint32_t GLhandleARB;
#endif
typedef khronos_uint32_t GLenum;
typedef khronos_uint8_t GLboolean;
typedef khronos_uint32_t GLbitfield;
typedef void GLvoid;
typedef khronos_int8_t GLbyte;
typedef khronos_int16_t GLshort;
typedef khronos_int32_t GLint;
typedef khronos_int32_t GLclampx;
typedef khronos_uint8_t GLubyte;
typedef khronos_uint16_t GLushort;
typedef khronos_uint32_t GLuint;
typedef khronos_int32_t GLsizei;
typedef khronos_float_t GLfloat;
typedef khronos_float_t GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglClientBufferEXT;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
typedef khronos_uint16_t GLhalfARB;
typedef khronos_uint16_t GLhalf;
typedef khronos_int32_t GLfixed;
typedef khronos_intptr_t GLintptr;
typedef khronos_ssize_t GLsizeiptr;
typedef khronos_int64_t GLint64;
typedef khronos_uint64_t GLuint64;
typedef khronos_intptr_t GLintptrARB;
typedef khronos_intptr_t GLsizeiptrARB;
typedef khronos_int64_t GLint64EXT;
typedef khronos_uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void (KHRONOS_APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (KHRONOS_APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (KHRONOS_APIENTRY *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (KHRONOS_APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef khronos_uint16_t GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
typedef void (KHRONOS_APIENTRY *GLVULKANPROCNV)(void);


typedef struct OnutGLConfig
{
    khronos_int8_t support[813];

    void (KHRONOS_APIENTRY *Accum)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *AccumxOES)(GLenum, GLfixed);
    GLboolean(KHRONOS_APIENTRY *AcquireKeyedMutexWin32EXT)(GLuint, GLuint64, GLuint);
    void (KHRONOS_APIENTRY *ActiveProgramEXT)(GLuint);
    void (KHRONOS_APIENTRY *ActiveShaderProgram)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *ActiveShaderProgramEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *ActiveStencilFaceEXT)(GLenum);
    void (KHRONOS_APIENTRY *ActiveTexture)(GLenum);
    void (KHRONOS_APIENTRY *ActiveTextureARB)(GLenum);
    void (KHRONOS_APIENTRY *ActiveVaryingNV)(GLuint, const GLchar *);
    void (KHRONOS_APIENTRY *AlphaFragmentOp1ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *AlphaFragmentOp2ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *AlphaFragmentOp3ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *AlphaFunc)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *AlphaFuncQCOM)(GLenum, GLclampf);
    void (KHRONOS_APIENTRY *AlphaFuncx)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY *AlphaFuncxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY *AlphaToCoverageDitherControlNV)(GLenum);
    void (KHRONOS_APIENTRY *ApplyFramebufferAttachmentCMAAINTEL)(void);
    void (KHRONOS_APIENTRY *ApplyTextureEXT)(GLenum);
    GLboolean(KHRONOS_APIENTRY *AreProgramsResidentNV)(GLsizei, const GLuint *, GLboolean *);
    GLboolean(KHRONOS_APIENTRY *AreTexturesResident)(GLsizei, const GLuint *, GLboolean *);
    GLboolean(KHRONOS_APIENTRY *AreTexturesResidentEXT)(GLsizei, const GLuint *, GLboolean *);
    void (KHRONOS_APIENTRY *ArrayElement)(GLint);
    void (KHRONOS_APIENTRY *ArrayElementEXT)(GLint);
    void (KHRONOS_APIENTRY *ArrayObjectATI)(GLenum, GLint, GLenum, GLsizei, GLuint, GLuint);
    void (KHRONOS_APIENTRY *AsyncMarkerSGIX)(GLuint);
    void (KHRONOS_APIENTRY *AttachObjectARB)(GLhandleARB, GLhandleARB);
    void (KHRONOS_APIENTRY *AttachShader)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *Begin)(GLenum);
    void (KHRONOS_APIENTRY *BeginConditionalRender)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *BeginConditionalRenderNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *BeginConditionalRenderNVX)(GLuint);
    void (KHRONOS_APIENTRY *BeginFragmentShaderATI)(void);
    void (KHRONOS_APIENTRY *BeginOcclusionQueryNV)(GLuint);
    void (KHRONOS_APIENTRY *BeginPerfMonitorAMD)(GLuint);
    void (KHRONOS_APIENTRY *BeginPerfQueryINTEL)(GLuint);
    void (KHRONOS_APIENTRY *BeginQuery)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BeginQueryARB)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BeginQueryEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BeginQueryIndexed)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY *BeginTransformFeedback)(GLenum);
    void (KHRONOS_APIENTRY *BeginTransformFeedbackEXT)(GLenum);
    void (KHRONOS_APIENTRY *BeginTransformFeedbackNV)(GLenum);
    void (KHRONOS_APIENTRY *BeginVertexShaderEXT)(void);
    void (KHRONOS_APIENTRY *BeginVideoCaptureNV)(GLuint);
    void (KHRONOS_APIENTRY *BindAttribLocation)(GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY *BindAttribLocationARB)(GLhandleARB, GLuint, const GLcharARB *);
    void (KHRONOS_APIENTRY *BindBuffer)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindBufferARB)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindBufferBase)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY *BindBufferBaseEXT)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY *BindBufferBaseNV)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY *BindBufferOffsetEXT)(GLenum, GLuint, GLuint, GLintptr);
    void (KHRONOS_APIENTRY *BindBufferOffsetNV)(GLenum, GLuint, GLuint, GLintptr);
    void (KHRONOS_APIENTRY *BindBufferRange)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *BindBufferRangeEXT)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *BindBufferRangeNV)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *BindBuffersBase)(GLenum, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *BindBuffersRange)(GLenum, GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizeiptr *);
    void (KHRONOS_APIENTRY *BindFragDataLocation)(GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY *BindFragDataLocationEXT)(GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY *BindFragDataLocationIndexed)(GLuint, GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY *BindFragDataLocationIndexedEXT)(GLuint, GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY *BindFragmentShaderATI)(GLuint);
    void (KHRONOS_APIENTRY *BindFramebuffer)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindFramebufferEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindFramebufferOES)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindImageTexture)(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BindImageTextureEXT)(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint);
    void (KHRONOS_APIENTRY *BindImageTextures)(GLuint, GLsizei, const GLuint *);
    GLuint(KHRONOS_APIENTRY *BindLightParameterEXT)(GLenum, GLenum);
    GLuint(KHRONOS_APIENTRY *BindMaterialParameterEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *BindMultiTextureEXT)(GLenum, GLenum, GLuint);
    GLuint(KHRONOS_APIENTRY *BindParameterEXT)(GLenum);
    void (KHRONOS_APIENTRY *BindProgramARB)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindProgramNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindProgramPipeline)(GLuint);
    void (KHRONOS_APIENTRY *BindProgramPipelineEXT)(GLuint);
    void (KHRONOS_APIENTRY *BindRenderbuffer)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindRenderbufferEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindRenderbufferOES)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindSampler)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *BindSamplers)(GLuint, GLsizei, const GLuint *);
    GLuint(KHRONOS_APIENTRY *BindTexGenParameterEXT)(GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BindTexture)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindTextureEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindTextureUnit)(GLuint, GLuint);
    GLuint(KHRONOS_APIENTRY *BindTextureUnitParameterEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *BindTextures)(GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *BindTransformFeedback)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindTransformFeedbackNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindVertexArray)(GLuint);
    void (KHRONOS_APIENTRY *BindVertexArrayAPPLE)(GLuint);
    void (KHRONOS_APIENTRY *BindVertexArrayOES)(GLuint);
    void (KHRONOS_APIENTRY *BindVertexBuffer)(GLuint, GLuint, GLintptr, GLsizei);
    void (KHRONOS_APIENTRY *BindVertexBuffers)(GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizei *);
    void (KHRONOS_APIENTRY *BindVertexShaderEXT)(GLuint);
    void (KHRONOS_APIENTRY *BindVideoCaptureStreamBufferNV)(GLuint, GLuint, GLenum, GLintptrARB);
    void (KHRONOS_APIENTRY *BindVideoCaptureStreamTextureNV)(GLuint, GLuint, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *Binormal3bEXT)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *Binormal3bvEXT)(const GLbyte *);
    void (KHRONOS_APIENTRY *Binormal3dEXT)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Binormal3dvEXT)(const GLdouble *);
    void (KHRONOS_APIENTRY *Binormal3fEXT)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Binormal3fvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY *Binormal3iEXT)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Binormal3ivEXT)(const GLint *);
    void (KHRONOS_APIENTRY *Binormal3sEXT)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *Binormal3svEXT)(const GLshort *);
    void (KHRONOS_APIENTRY *BinormalPointerEXT)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *Bitmap)(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const GLubyte *);
    void (KHRONOS_APIENTRY *BitmapxOES)(GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, const GLubyte *);
    void (KHRONOS_APIENTRY *BlendBarrier)(void);
    void (KHRONOS_APIENTRY *BlendBarrierKHR)(void);
    void (KHRONOS_APIENTRY *BlendBarrierNV)(void);
    void (KHRONOS_APIENTRY *BlendColor)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *BlendColorEXT)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *BlendColorxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *BlendEquation)(GLenum);
    void (KHRONOS_APIENTRY *BlendEquationEXT)(GLenum);
    void (KHRONOS_APIENTRY *BlendEquationIndexedAMD)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationOES)(GLenum);
    void (KHRONOS_APIENTRY *BlendEquationSeparate)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationSeparateEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationSeparateIndexedAMD)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationSeparateOES)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationSeparatei)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationSeparateiARB)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationSeparateiEXT)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationSeparateiOES)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationi)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationiARB)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationiEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationiOES)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *BlendFunc)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFuncIndexedAMD)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFuncSeparate)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFuncSeparateEXT)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFuncSeparateINGR)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFuncSeparateIndexedAMD)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFuncSeparateOES)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFuncSeparatei)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFuncSeparateiARB)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFuncSeparateiEXT)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFuncSeparateiOES)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFunci)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFunciARB)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFunciEXT)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFunciOES)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendParameteriNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY *BlitFramebuffer)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY *BlitFramebufferANGLE)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY *BlitFramebufferEXT)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY *BlitFramebufferNV)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY *BlitNamedFramebuffer)(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY *BufferAddressRangeNV)(GLenum, GLuint, GLuint64EXT, GLsizeiptr);
    void (KHRONOS_APIENTRY *BufferData)(GLenum, GLsizeiptr, const void *, GLenum);
    void (KHRONOS_APIENTRY *BufferDataARB)(GLenum, GLsizeiptrARB, const void *, GLenum);
    void (KHRONOS_APIENTRY *BufferPageCommitmentARB)(GLenum, GLintptr, GLsizeiptr, GLboolean);
    void (KHRONOS_APIENTRY *BufferParameteriAPPLE)(GLenum, GLenum, GLint);
    GLuint(KHRONOS_APIENTRY *BufferRegionEnabled)(void);
    void (KHRONOS_APIENTRY *BufferStorage)(GLenum, GLsizeiptr, const void *, GLbitfield);
    void (KHRONOS_APIENTRY *BufferStorageEXT)(GLenum, GLsizeiptr, const void *, GLbitfield);
    void (KHRONOS_APIENTRY *BufferStorageExternalEXT)(GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield);
    void (KHRONOS_APIENTRY *BufferStorageMemEXT)(GLenum, GLsizeiptr, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *BufferSubData)(GLenum, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY *BufferSubDataARB)(GLenum, GLintptrARB, GLsizeiptrARB, const void *);
    void (KHRONOS_APIENTRY *CallCommandListNV)(GLuint);
    void (KHRONOS_APIENTRY *CallList)(GLuint);
    void (KHRONOS_APIENTRY *CallLists)(GLsizei, GLenum, const void *);
    GLenum(KHRONOS_APIENTRY *CheckFramebufferStatus)(GLenum);
    GLenum(KHRONOS_APIENTRY *CheckFramebufferStatusEXT)(GLenum);
    GLenum(KHRONOS_APIENTRY *CheckFramebufferStatusOES)(GLenum);
    GLenum(KHRONOS_APIENTRY *CheckNamedFramebufferStatus)(GLuint, GLenum);
    GLenum(KHRONOS_APIENTRY *CheckNamedFramebufferStatusEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *ClampColor)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *ClampColorARB)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *Clear)(GLbitfield);
    void (KHRONOS_APIENTRY *ClearAccum)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ClearAccumxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *ClearBufferData)(GLenum, GLenum, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ClearBufferSubData)(GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ClearBufferfi)(GLenum, GLint, GLfloat, GLint);
    void (KHRONOS_APIENTRY *ClearBufferfv)(GLenum, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY *ClearBufferiv)(GLenum, GLint, const GLint *);
    void (KHRONOS_APIENTRY *ClearBufferuiv)(GLenum, GLint, const GLuint *);
    void (KHRONOS_APIENTRY *ClearColor)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ClearColorIiEXT)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *ClearColorIuiEXT)(GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ClearColorx)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *ClearColorxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *ClearDepth)(GLdouble);
    void (KHRONOS_APIENTRY *ClearDepthdNV)(GLdouble);
    void (KHRONOS_APIENTRY *ClearDepthf)(GLfloat);
    void (KHRONOS_APIENTRY *ClearDepthfOES)(GLclampf);
    void (KHRONOS_APIENTRY *ClearDepthx)(GLfixed);
    void (KHRONOS_APIENTRY *ClearDepthxOES)(GLfixed);
    void (KHRONOS_APIENTRY *ClearIndex)(GLfloat);
    void (KHRONOS_APIENTRY *ClearNamedBufferData)(GLuint, GLenum, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ClearNamedBufferDataEXT)(GLuint, GLenum, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ClearNamedBufferSubData)(GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ClearNamedBufferSubDataEXT)(GLuint, GLenum, GLsizeiptr, GLsizeiptr, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ClearNamedFramebufferfi)(GLuint, GLenum, GLint, GLfloat, GLint);
    void (KHRONOS_APIENTRY *ClearNamedFramebufferfv)(GLuint, GLenum, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY *ClearNamedFramebufferiv)(GLuint, GLenum, GLint, const GLint *);
    void (KHRONOS_APIENTRY *ClearNamedFramebufferuiv)(GLuint, GLenum, GLint, const GLuint *);
    void (KHRONOS_APIENTRY *ClearPixelLocalStorageuiEXT)(GLsizei, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ClearStencil)(GLint);
    void (KHRONOS_APIENTRY *ClearTexImage)(GLuint, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ClearTexImageEXT)(GLuint, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ClearTexSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ClearTexSubImageEXT)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ClientActiveTexture)(GLenum);
    void (KHRONOS_APIENTRY *ClientActiveTextureARB)(GLenum);
    void (KHRONOS_APIENTRY *ClientActiveVertexStreamATI)(GLenum);
    void (KHRONOS_APIENTRY *ClientAttribDefaultEXT)(GLbitfield);
    GLenum(KHRONOS_APIENTRY *ClientWaitSync)(GLsync, GLbitfield, GLuint64);
    GLenum(KHRONOS_APIENTRY *ClientWaitSyncAPPLE)(GLsync, GLbitfield, GLuint64);
    void (KHRONOS_APIENTRY *ClipControl)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *ClipPlane)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *ClipPlanef)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *ClipPlanefIMG)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *ClipPlanefOES)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *ClipPlanex)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *ClipPlanexIMG)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *ClipPlanexOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *Color3b)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *Color3bv)(const GLbyte *);
    void (KHRONOS_APIENTRY *Color3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Color3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *Color3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Color3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Color3fVertex3fvSUN)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *Color3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *Color3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *Color3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *Color3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Color3iv)(const GLint *);
    void (KHRONOS_APIENTRY *Color3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *Color3sv)(const GLshort *);
    void (KHRONOS_APIENTRY *Color3ub)(GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY *Color3ubv)(const GLubyte *);
    void (KHRONOS_APIENTRY *Color3ui)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *Color3uiv)(const GLuint *);
    void (KHRONOS_APIENTRY *Color3us)(GLushort, GLushort, GLushort);
    void (KHRONOS_APIENTRY *Color3usv)(const GLushort *);
    void (KHRONOS_APIENTRY *Color3xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *Color3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *Color4b)(GLbyte, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *Color4bv)(const GLbyte *);
    void (KHRONOS_APIENTRY *Color4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Color4dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *Color4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Color4fNormal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Color4fNormal3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *Color4fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *Color4hNV)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *Color4hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *Color4i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Color4iv)(const GLint *);
    void (KHRONOS_APIENTRY *Color4s)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *Color4sv)(const GLshort *);
    void (KHRONOS_APIENTRY *Color4ub)(GLubyte, GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY *Color4ubVertex2fSUN)(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Color4ubVertex2fvSUN)(const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY *Color4ubVertex3fSUN)(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Color4ubVertex3fvSUN)(const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY *Color4ubv)(const GLubyte *);
    void (KHRONOS_APIENTRY *Color4ui)(GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *Color4uiv)(const GLuint *);
    void (KHRONOS_APIENTRY *Color4us)(GLushort, GLushort, GLushort, GLushort);
    void (KHRONOS_APIENTRY *Color4usv)(const GLushort *);
    void (KHRONOS_APIENTRY *Color4x)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *Color4xOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *Color4xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *ColorFormatNV)(GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY *ColorFragmentOp1ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ColorFragmentOp2ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ColorFragmentOp3ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ColorMask)(GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY *ColorMaskIndexedEXT)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY *ColorMaski)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY *ColorMaskiEXT)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY *ColorMaskiOES)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY *ColorMaterial)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *ColorP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *ColorP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *ColorP4ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *ColorP4uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *ColorPointer)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *ColorPointerEXT)(GLint, GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY *ColorPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY *ColorPointervINTEL)(GLint, GLenum, const void **);
    void (KHRONOS_APIENTRY *ColorSubTable)(GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ColorSubTableEXT)(GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ColorTable)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ColorTableEXT)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ColorTableParameterfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *ColorTableParameterfvSGI)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *ColorTableParameteriv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *ColorTableParameterivSGI)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *ColorTableSGI)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *CombinerInputNV)(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *CombinerOutputNV)(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY *CombinerParameterfNV)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *CombinerParameterfvNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *CombinerParameteriNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY *CombinerParameterivNV)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *CombinerStageParameterfvNV)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *CommandListSegmentsNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *CompileCommandListNV)(GLuint);
    void (KHRONOS_APIENTRY *CompileShader)(GLuint);
    void (KHRONOS_APIENTRY *CompileShaderARB)(GLhandleARB);
    void (KHRONOS_APIENTRY *CompileShaderIncludeARB)(GLuint, GLsizei, const GLchar *const*, const GLint *);
    void (KHRONOS_APIENTRY *CompressedMultiTexImage1DEXT)(GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedMultiTexImage2DEXT)(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedMultiTexImage3DEXT)(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedMultiTexSubImage1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedMultiTexSubImage2DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedMultiTexSubImage3DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexImage1D)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexImage1DARB)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexImage2D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexImage2DARB)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexImage3D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexImage3DARB)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexImage3DOES)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexSubImage1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexSubImage1DARB)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexSubImage2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexSubImage2DARB)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexSubImage3DARB)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexSubImage3DOES)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTextureImage1DEXT)(GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTextureImage2DEXT)(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTextureImage3DEXT)(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTextureSubImage1D)(GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTextureSubImage1DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTextureSubImage2D)(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTextureSubImage2DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTextureSubImage3D)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTextureSubImage3DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *ConservativeRasterParameterfNV)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *ConservativeRasterParameteriNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY *ConvolutionFilter1D)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ConvolutionFilter1DEXT)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ConvolutionFilter2D)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ConvolutionFilter2DEXT)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ConvolutionParameterf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *ConvolutionParameterfEXT)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *ConvolutionParameterfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *ConvolutionParameterfvEXT)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *ConvolutionParameteri)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *ConvolutionParameteriEXT)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *ConvolutionParameteriv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *ConvolutionParameterivEXT)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *ConvolutionParameterxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY *ConvolutionParameterxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *CopyBufferSubData)(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *CopyBufferSubDataNV)(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *CopyColorSubTable)(GLenum, GLsizei, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyColorSubTableEXT)(GLenum, GLsizei, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyColorTable)(GLenum, GLenum, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyColorTableSGI)(GLenum, GLenum, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyConvolutionFilter1D)(GLenum, GLenum, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyConvolutionFilter1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyConvolutionFilter2D)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyConvolutionFilter2DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyImageSubData)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyImageSubDataEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyImageSubDataNV)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyImageSubDataOES)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyMultiTexImage1DEXT)(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
    void (KHRONOS_APIENTRY *CopyMultiTexImage2DEXT)(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY *CopyMultiTexSubImage1DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyMultiTexSubImage2DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyMultiTexSubImage3DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyNamedBufferSubData)(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *CopyPathNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *CopyPixels)(GLint, GLint, GLsizei, GLsizei, GLenum);
    void (KHRONOS_APIENTRY *CopyTexImage1D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
    void (KHRONOS_APIENTRY *CopyTexImage1DEXT)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
    void (KHRONOS_APIENTRY *CopyTexImage2D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY *CopyTexImage2DEXT)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY *CopyTexSubImage1D)(GLenum, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyTexSubImage1DEXT)(GLenum, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyTexSubImage2D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyTexSubImage2DEXT)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyTexSubImage3DEXT)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyTexSubImage3DOES)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyTextureImage1DEXT)(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
    void (KHRONOS_APIENTRY *CopyTextureImage2DEXT)(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY *CopyTextureLevelsAPPLE)(GLuint, GLuint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyTextureSubImage1D)(GLuint, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyTextureSubImage1DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyTextureSubImage2D)(GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyTextureSubImage2DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyTextureSubImage3D)(GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyTextureSubImage3DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CoverFillPathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *CoverFillPathNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *CoverStrokePathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *CoverStrokePathNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *CoverageMaskNV)(GLboolean);
    void (KHRONOS_APIENTRY *CoverageModulationNV)(GLenum);
    void (KHRONOS_APIENTRY *CoverageModulationTableNV)(GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *CoverageOperationNV)(GLenum);
    void (KHRONOS_APIENTRY *CreateBuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *CreateCommandListsNV)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *CreateFramebuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *CreateMemoryObjectsEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *CreatePerfQueryINTEL)(GLuint, GLuint *);
    GLuint(KHRONOS_APIENTRY *CreateProgram)(void);
    GLhandleARB(KHRONOS_APIENTRY *CreateProgramObjectARB)(void);
    void (KHRONOS_APIENTRY *CreateProgramPipelines)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *CreateQueries)(GLenum, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *CreateRenderbuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *CreateSamplers)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY *CreateShader)(GLenum);
    GLhandleARB(KHRONOS_APIENTRY *CreateShaderObjectARB)(GLenum);
    GLuint(KHRONOS_APIENTRY *CreateShaderProgramEXT)(GLenum, const GLchar *);
    GLuint(KHRONOS_APIENTRY *CreateShaderProgramv)(GLenum, GLsizei, const GLchar *const*);
    GLuint(KHRONOS_APIENTRY *CreateShaderProgramvEXT)(GLenum, GLsizei, const GLchar **);
    void (KHRONOS_APIENTRY *CreateStatesNV)(GLsizei, GLuint *);
    GLsync(KHRONOS_APIENTRY *CreateSyncFromCLeventARB)(struct _cl_context *, struct _cl_event *, GLbitfield);
    void (KHRONOS_APIENTRY *CreateTextures)(GLenum, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *CreateTransformFeedbacks)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *CreateVertexArrays)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *CullFace)(GLenum);
    void (KHRONOS_APIENTRY *CullParameterdvEXT)(GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *CullParameterfvEXT)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *CurrentPaletteMatrixARB)(GLint);
    void (KHRONOS_APIENTRY *CurrentPaletteMatrixOES)(GLuint);
    void (KHRONOS_APIENTRY *DebugMessageCallback)(GLDEBUGPROC, const void *);
    void (KHRONOS_APIENTRY *DebugMessageCallbackAMD)(GLDEBUGPROCAMD, void *);
    void (KHRONOS_APIENTRY *DebugMessageCallbackARB)(GLDEBUGPROCARB, const void *);
    void (KHRONOS_APIENTRY *DebugMessageCallbackKHR)(GLDEBUGPROCKHR, const void *);
    void (KHRONOS_APIENTRY *DebugMessageControl)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
    void (KHRONOS_APIENTRY *DebugMessageControlARB)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
    void (KHRONOS_APIENTRY *DebugMessageControlKHR)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
    void (KHRONOS_APIENTRY *DebugMessageEnableAMD)(GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
    void (KHRONOS_APIENTRY *DebugMessageInsert)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *DebugMessageInsertAMD)(GLenum, GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *DebugMessageInsertARB)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *DebugMessageInsertKHR)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *DeformSGIX)(GLbitfield);
    void (KHRONOS_APIENTRY *DeformationMap3dSGIX)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY *DeformationMap3fSGIX)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY *DeleteAsyncMarkersSGIX)(GLuint, GLsizei);
    void (KHRONOS_APIENTRY *DeleteBufferRegion)(GLenum);
    void (KHRONOS_APIENTRY *DeleteBuffers)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteBuffersARB)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteCommandListsNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteFencesAPPLE)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteFencesNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteFragmentShaderATI)(GLuint);
    void (KHRONOS_APIENTRY *DeleteFramebuffers)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteFramebuffersEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteFramebuffersOES)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteLists)(GLuint, GLsizei);
    void (KHRONOS_APIENTRY *DeleteMemoryObjectsEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteNamedStringARB)(GLint, const GLchar *);
    void (KHRONOS_APIENTRY *DeleteNamesAMD)(GLenum, GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteObjectARB)(GLhandleARB);
    void (KHRONOS_APIENTRY *DeleteOcclusionQueriesNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeletePathsNV)(GLuint, GLsizei);
    void (KHRONOS_APIENTRY *DeletePerfMonitorsAMD)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *DeletePerfQueryINTEL)(GLuint);
    void (KHRONOS_APIENTRY *DeleteProgram)(GLuint);
    void (KHRONOS_APIENTRY *DeleteProgramPipelines)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteProgramPipelinesEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteProgramsARB)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteProgramsNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteQueries)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteQueriesARB)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteQueriesEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteRenderbuffers)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteRenderbuffersEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteRenderbuffersOES)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteSamplers)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteSemaphoresEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteShader)(GLuint);
    void (KHRONOS_APIENTRY *DeleteStatesNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteSync)(GLsync);
    void (KHRONOS_APIENTRY *DeleteSyncAPPLE)(GLsync);
    void (KHRONOS_APIENTRY *DeleteTextures)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteTexturesEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteTransformFeedbacks)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteTransformFeedbacksNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteVertexArrays)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteVertexArraysAPPLE)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteVertexArraysOES)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteVertexShaderEXT)(GLuint);
    void (KHRONOS_APIENTRY *DepthBoundsEXT)(GLclampd, GLclampd);
    void (KHRONOS_APIENTRY *DepthBoundsdNV)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *DepthFunc)(GLenum);
    void (KHRONOS_APIENTRY *DepthMask)(GLboolean);
    void (KHRONOS_APIENTRY *DepthRange)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *DepthRangeArrayfvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *DepthRangeArrayfvOES)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *DepthRangeArrayv)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *DepthRangeIndexed)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *DepthRangeIndexedfNV)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *DepthRangeIndexedfOES)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *DepthRangedNV)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *DepthRangef)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *DepthRangefOES)(GLclampf, GLclampf);
    void (KHRONOS_APIENTRY *DepthRangex)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *DepthRangexOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *DetachObjectARB)(GLhandleARB, GLhandleARB);
    void (KHRONOS_APIENTRY *DetachShader)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *DetailTexFuncSGIS)(GLenum, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *Disable)(GLenum);
    void (KHRONOS_APIENTRY *DisableClientState)(GLenum);
    void (KHRONOS_APIENTRY *DisableClientStateIndexedEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *DisableClientStateiEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *DisableDriverControlQCOM)(GLuint);
    void (KHRONOS_APIENTRY *DisableIndexedEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *DisableVariantClientStateEXT)(GLuint);
    void (KHRONOS_APIENTRY *DisableVertexArrayAttrib)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *DisableVertexArrayAttribEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *DisableVertexArrayEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *DisableVertexAttribAPPLE)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *DisableVertexAttribArray)(GLuint);
    void (KHRONOS_APIENTRY *DisableVertexAttribArrayARB)(GLuint);
    void (KHRONOS_APIENTRY *Disablei)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *DisableiEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *DisableiNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *DisableiOES)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *DiscardFramebufferEXT)(GLenum, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY *DispatchCompute)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *DispatchComputeGroupSizeARB)(GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *DispatchComputeIndirect)(GLintptr);
    void (KHRONOS_APIENTRY *DrawArrays)(GLenum, GLint, GLsizei);
    void (KHRONOS_APIENTRY *DrawArraysEXT)(GLenum, GLint, GLsizei);
    void (KHRONOS_APIENTRY *DrawArraysIndirect)(GLenum, const void *);
    void (KHRONOS_APIENTRY *DrawArraysInstanced)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *DrawArraysInstancedANGLE)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *DrawArraysInstancedARB)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *DrawArraysInstancedBaseInstance)(GLenum, GLint, GLsizei, GLsizei, GLuint);
    void (KHRONOS_APIENTRY *DrawArraysInstancedBaseInstanceEXT)(GLenum, GLint, GLsizei, GLsizei, GLuint);
    void (KHRONOS_APIENTRY *DrawArraysInstancedEXT)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *DrawArraysInstancedNV)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *DrawBuffer)(GLenum);
    void (KHRONOS_APIENTRY *DrawBufferRegion)(GLuint, GLint, GLint, GLsizei, GLsizei, GLint, GLint);
    void (KHRONOS_APIENTRY *DrawBuffers)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY *DrawBuffersARB)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY *DrawBuffersATI)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY *DrawBuffersEXT)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY *DrawBuffersIndexedEXT)(GLint, const GLenum *, const GLint *);
    void (KHRONOS_APIENTRY *DrawBuffersNV)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY *DrawCommandsAddressNV)(GLenum, const GLuint64 *, const GLsizei *, GLuint);
    void (KHRONOS_APIENTRY *DrawCommandsNV)(GLenum, GLuint, const GLintptr *, const GLsizei *, GLuint);
    void (KHRONOS_APIENTRY *DrawCommandsStatesAddressNV)(const GLuint64 *, const GLsizei *, const GLuint *, const GLuint *, GLuint);
    void (KHRONOS_APIENTRY *DrawCommandsStatesNV)(GLuint, const GLintptr *, const GLsizei *, const GLuint *, const GLuint *, GLuint);
    void (KHRONOS_APIENTRY *DrawElementArrayAPPLE)(GLenum, GLint, GLsizei);
    void (KHRONOS_APIENTRY *DrawElementArrayATI)(GLenum, GLsizei);
    void (KHRONOS_APIENTRY *DrawElements)(GLenum, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY *DrawElementsBaseVertex)(GLenum, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY *DrawElementsBaseVertexEXT)(GLenum, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY *DrawElementsBaseVertexOES)(GLenum, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY *DrawElementsIndirect)(GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *DrawElementsInstanced)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY *DrawElementsInstancedANGLE)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY *DrawElementsInstancedARB)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY *DrawElementsInstancedBaseInstance)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLuint);
    void (KHRONOS_APIENTRY *DrawElementsInstancedBaseInstanceEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLuint);
    void (KHRONOS_APIENTRY *DrawElementsInstancedBaseVertex)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint);
    void (KHRONOS_APIENTRY *DrawElementsInstancedBaseVertexBaseInstance)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint, GLuint);
    void (KHRONOS_APIENTRY *DrawElementsInstancedBaseVertexBaseInstanceEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint, GLuint);
    void (KHRONOS_APIENTRY *DrawElementsInstancedBaseVertexEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint);
    void (KHRONOS_APIENTRY *DrawElementsInstancedBaseVertexOES)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint);
    void (KHRONOS_APIENTRY *DrawElementsInstancedEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY *DrawElementsInstancedNV)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY *DrawMeshArraysSUN)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *DrawPixels)(GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *DrawRangeElementArrayAPPLE)(GLenum, GLuint, GLuint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *DrawRangeElementArrayATI)(GLenum, GLuint, GLuint, GLsizei);
    void (KHRONOS_APIENTRY *DrawRangeElements)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY *DrawRangeElementsBaseVertex)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY *DrawRangeElementsBaseVertexEXT)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY *DrawRangeElementsBaseVertexOES)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY *DrawRangeElementsEXT)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY *DrawTexfOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *DrawTexfvOES)(const GLfloat *);
    void (KHRONOS_APIENTRY *DrawTexiOES)(GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *DrawTexivOES)(const GLint *);
    void (KHRONOS_APIENTRY *DrawTexsOES)(GLshort, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *DrawTexsvOES)(const GLshort *);
    void (KHRONOS_APIENTRY *DrawTextureNV)(GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *DrawTexxOES)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *DrawTexxvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *DrawTransformFeedback)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *DrawTransformFeedbackEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *DrawTransformFeedbackInstanced)(GLenum, GLuint, GLsizei);
    void (KHRONOS_APIENTRY *DrawTransformFeedbackInstancedEXT)(GLenum, GLuint, GLsizei);
    void (KHRONOS_APIENTRY *DrawTransformFeedbackNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *DrawTransformFeedbackStream)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY *DrawTransformFeedbackStreamInstanced)(GLenum, GLuint, GLuint, GLsizei);
    void (KHRONOS_APIENTRY *DrawVkImageNV)(GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *EGLImageTargetRenderbufferStorageOES)(GLenum, GLeglImageOES);
    void (KHRONOS_APIENTRY *EGLImageTargetTexture2DOES)(GLenum, GLeglImageOES);
    void (KHRONOS_APIENTRY *EdgeFlag)(GLboolean);
    void (KHRONOS_APIENTRY *EdgeFlagFormatNV)(GLsizei);
    void (KHRONOS_APIENTRY *EdgeFlagPointer)(GLsizei, const void *);
    void (KHRONOS_APIENTRY *EdgeFlagPointerEXT)(GLsizei, GLsizei, const GLboolean *);
    void (KHRONOS_APIENTRY *EdgeFlagPointerListIBM)(GLint, const GLboolean **, GLint);
    void (KHRONOS_APIENTRY *EdgeFlagv)(const GLboolean *);
    void (KHRONOS_APIENTRY *ElementPointerAPPLE)(GLenum, const void *);
    void (KHRONOS_APIENTRY *ElementPointerATI)(GLenum, const void *);
    void (KHRONOS_APIENTRY *Enable)(GLenum);
    void (KHRONOS_APIENTRY *EnableClientState)(GLenum);
    void (KHRONOS_APIENTRY *EnableClientStateIndexedEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *EnableClientStateiEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *EnableDriverControlQCOM)(GLuint);
    void (KHRONOS_APIENTRY *EnableIndexedEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *EnableVariantClientStateEXT)(GLuint);
    void (KHRONOS_APIENTRY *EnableVertexArrayAttrib)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *EnableVertexArrayAttribEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *EnableVertexArrayEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *EnableVertexAttribAPPLE)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *EnableVertexAttribArray)(GLuint);
    void (KHRONOS_APIENTRY *EnableVertexAttribArrayARB)(GLuint);
    void (KHRONOS_APIENTRY *Enablei)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *EnableiEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *EnableiNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *EnableiOES)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *End)(void);
    void (KHRONOS_APIENTRY *EndConditionalRender)(void);
    void (KHRONOS_APIENTRY *EndConditionalRenderNV)(void);
    void (KHRONOS_APIENTRY *EndConditionalRenderNVX)(void);
    void (KHRONOS_APIENTRY *EndFragmentShaderATI)(void);
    void (KHRONOS_APIENTRY *EndList)(void);
    void (KHRONOS_APIENTRY *EndOcclusionQueryNV)(void);
    void (KHRONOS_APIENTRY *EndPerfMonitorAMD)(GLuint);
    void (KHRONOS_APIENTRY *EndPerfQueryINTEL)(GLuint);
    void (KHRONOS_APIENTRY *EndQuery)(GLenum);
    void (KHRONOS_APIENTRY *EndQueryARB)(GLenum);
    void (KHRONOS_APIENTRY *EndQueryEXT)(GLenum);
    void (KHRONOS_APIENTRY *EndQueryIndexed)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *EndTilingQCOM)(GLbitfield);
    void (KHRONOS_APIENTRY *EndTransformFeedback)(void);
    void (KHRONOS_APIENTRY *EndTransformFeedbackEXT)(void);
    void (KHRONOS_APIENTRY *EndTransformFeedbackNV)(void);
    void (KHRONOS_APIENTRY *EndVertexShaderEXT)(void);
    void (KHRONOS_APIENTRY *EndVideoCaptureNV)(GLuint);
    void (KHRONOS_APIENTRY *EvalCoord1d)(GLdouble);
    void (KHRONOS_APIENTRY *EvalCoord1dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *EvalCoord1f)(GLfloat);
    void (KHRONOS_APIENTRY *EvalCoord1fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *EvalCoord1xOES)(GLfixed);
    void (KHRONOS_APIENTRY *EvalCoord1xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *EvalCoord2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *EvalCoord2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *EvalCoord2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *EvalCoord2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *EvalCoord2xOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *EvalCoord2xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *EvalMapsNV)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *EvalMesh1)(GLenum, GLint, GLint);
    void (KHRONOS_APIENTRY *EvalMesh2)(GLenum, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *EvalPoint1)(GLint);
    void (KHRONOS_APIENTRY *EvalPoint2)(GLint, GLint);
    void (KHRONOS_APIENTRY *EvaluateDepthValuesARB)(void);
    void (KHRONOS_APIENTRY *ExecuteProgramNV)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *ExtGetBufferPointervQCOM)(GLenum, void **);
    void (KHRONOS_APIENTRY *ExtGetBuffersQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY *ExtGetFramebuffersQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY *ExtGetProgramBinarySourceQCOM)(GLuint, GLenum, GLchar *, GLint *);
    void (KHRONOS_APIENTRY *ExtGetProgramsQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY *ExtGetRenderbuffersQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY *ExtGetShadersQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY *ExtGetTexLevelParameterivQCOM)(GLuint, GLenum, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *ExtGetTexSubImageQCOM)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *ExtGetTexturesQCOM)(GLuint *, GLint, GLint *);
    GLboolean(KHRONOS_APIENTRY *ExtIsProgramBinaryQCOM)(GLuint);
    void (KHRONOS_APIENTRY *ExtTexObjectStateOverrideiQCOM)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *ExtractComponentEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *FeedbackBuffer)(GLsizei, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *FeedbackBufferxOES)(GLsizei, GLenum, const GLfixed *);
    GLsync(KHRONOS_APIENTRY *FenceSync)(GLenum, GLbitfield);
    GLsync(KHRONOS_APIENTRY *FenceSyncAPPLE)(GLenum, GLbitfield);
    void (KHRONOS_APIENTRY *FinalCombinerInputNV)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *Finish)(void);
    GLint(KHRONOS_APIENTRY *FinishAsyncSGIX)(GLuint *);
    void (KHRONOS_APIENTRY *FinishFenceAPPLE)(GLuint);
    void (KHRONOS_APIENTRY *FinishFenceNV)(GLuint);
    void (KHRONOS_APIENTRY *FinishObjectAPPLE)(GLenum, GLint);
    void (KHRONOS_APIENTRY *FinishTextureSUNX)(void);
    void (KHRONOS_APIENTRY *Flush)(void);
    void (KHRONOS_APIENTRY *FlushMappedBufferRange)(GLenum, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *FlushMappedBufferRangeAPPLE)(GLenum, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *FlushMappedBufferRangeEXT)(GLenum, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *FlushMappedNamedBufferRange)(GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *FlushMappedNamedBufferRangeEXT)(GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *FlushPixelDataRangeNV)(GLenum);
    void (KHRONOS_APIENTRY *FlushRasterSGIX)(void);
    void (KHRONOS_APIENTRY *FlushStaticDataIBM)(GLenum);
    void (KHRONOS_APIENTRY *FlushVertexArrayRangeAPPLE)(GLsizei, void *);
    void (KHRONOS_APIENTRY *FlushVertexArrayRangeNV)(void);
    void (KHRONOS_APIENTRY *FogCoordFormatNV)(GLenum, GLsizei);
    void (KHRONOS_APIENTRY *FogCoordPointer)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *FogCoordPointerEXT)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *FogCoordPointerListIBM)(GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY *FogCoordd)(GLdouble);
    void (KHRONOS_APIENTRY *FogCoorddEXT)(GLdouble);
    void (KHRONOS_APIENTRY *FogCoorddv)(const GLdouble *);
    void (KHRONOS_APIENTRY *FogCoorddvEXT)(const GLdouble *);
    void (KHRONOS_APIENTRY *FogCoordf)(GLfloat);
    void (KHRONOS_APIENTRY *FogCoordfEXT)(GLfloat);
    void (KHRONOS_APIENTRY *FogCoordfv)(const GLfloat *);
    void (KHRONOS_APIENTRY *FogCoordfvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY *FogCoordhNV)(GLhalfNV);
    void (KHRONOS_APIENTRY *FogCoordhvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *FogFuncSGIS)(GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *Fogf)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *Fogfv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *Fogi)(GLenum, GLint);
    void (KHRONOS_APIENTRY *Fogiv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *Fogx)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY *FogxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY *Fogxv)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *FogxvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *FragmentColorMaterialSGIX)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *FragmentCoverageColorNV)(GLuint);
    void (KHRONOS_APIENTRY *FragmentLightModelfSGIX)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *FragmentLightModelfvSGIX)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *FragmentLightModeliSGIX)(GLenum, GLint);
    void (KHRONOS_APIENTRY *FragmentLightModelivSGIX)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *FragmentLightfSGIX)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *FragmentLightfvSGIX)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *FragmentLightiSGIX)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *FragmentLightivSGIX)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *FragmentMaterialfSGIX)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *FragmentMaterialfvSGIX)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *FragmentMaterialiSGIX)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *FragmentMaterialivSGIX)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *FrameTerminatorGREMEDY)(void);
    void (KHRONOS_APIENTRY *FrameZoomSGIX)(GLint);
    void (KHRONOS_APIENTRY *FramebufferDrawBufferEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *FramebufferDrawBuffersEXT)(GLuint, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY *FramebufferFetchBarrierQCOM)(void);
    void (KHRONOS_APIENTRY *FramebufferFoveationConfigQCOM)(GLuint, GLuint, GLuint, GLuint, GLuint *);
    void (KHRONOS_APIENTRY *FramebufferFoveationParametersQCOM)(GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *FramebufferParameteri)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *FramebufferPixelLocalStorageSizeEXT)(GLuint, GLsizei);
    void (KHRONOS_APIENTRY *FramebufferReadBufferEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *FramebufferRenderbuffer)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *FramebufferRenderbufferEXT)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *FramebufferRenderbufferOES)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *FramebufferSampleLocationsfvARB)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *FramebufferSampleLocationsfvNV)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *FramebufferSamplePositionsfvAMD)(GLenum, GLuint, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *FramebufferTexture)(GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTexture1D)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTexture1DEXT)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTexture2D)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTexture2DDownsampleIMG)(GLenum, GLenum, GLenum, GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTexture2DEXT)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTexture2DMultisampleEXT)(GLenum, GLenum, GLenum, GLuint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *FramebufferTexture2DMultisampleIMG)(GLenum, GLenum, GLenum, GLuint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *FramebufferTexture2DOES)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTexture3D)(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTexture3DEXT)(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTexture3DOES)(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTextureARB)(GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTextureEXT)(GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTextureFaceARB)(GLenum, GLenum, GLuint, GLint, GLenum);
    void (KHRONOS_APIENTRY *FramebufferTextureFaceEXT)(GLenum, GLenum, GLuint, GLint, GLenum);
    void (KHRONOS_APIENTRY *FramebufferTextureLayer)(GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTextureLayerARB)(GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTextureLayerDownsampleIMG)(GLenum, GLenum, GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTextureLayerEXT)(GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTextureMultisampleMultiviewOVR)(GLenum, GLenum, GLuint, GLint, GLsizei, GLint, GLsizei);
    void (KHRONOS_APIENTRY *FramebufferTextureMultiviewOVR)(GLenum, GLenum, GLuint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *FramebufferTextureOES)(GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *FreeObjectBufferATI)(GLuint);
    void (KHRONOS_APIENTRY *FrontFace)(GLenum);
    void (KHRONOS_APIENTRY *Frustum)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Frustumf)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *FrustumfOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Frustumx)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *FrustumxOES)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    GLuint(KHRONOS_APIENTRY *GenAsyncMarkersSGIX)(GLsizei);
    void (KHRONOS_APIENTRY *GenBuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenBuffersARB)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenFencesAPPLE)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenFencesNV)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY *GenFragmentShadersATI)(GLuint);
    void (KHRONOS_APIENTRY *GenFramebuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenFramebuffersEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenFramebuffersOES)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY *GenLists)(GLsizei);
    void (KHRONOS_APIENTRY *GenNamesAMD)(GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY *GenOcclusionQueriesNV)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY *GenPathsNV)(GLsizei);
    void (KHRONOS_APIENTRY *GenPerfMonitorsAMD)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenProgramPipelines)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenProgramPipelinesEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenProgramsARB)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenProgramsNV)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenQueries)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenQueriesARB)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenQueriesEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenRenderbuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenRenderbuffersEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenRenderbuffersOES)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenSamplers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenSemaphoresEXT)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY *GenSymbolsEXT)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *GenTextures)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenTexturesEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenTransformFeedbacks)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenTransformFeedbacksNV)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenVertexArrays)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenVertexArraysAPPLE)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenVertexArraysOES)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY *GenVertexShadersEXT)(GLuint);
    void (KHRONOS_APIENTRY *GenerateMipmap)(GLenum);
    void (KHRONOS_APIENTRY *GenerateMipmapEXT)(GLenum);
    void (KHRONOS_APIENTRY *GenerateMipmapOES)(GLenum);
    void (KHRONOS_APIENTRY *GenerateMultiTexMipmapEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *GenerateTextureMipmap)(GLuint);
    void (KHRONOS_APIENTRY *GenerateTextureMipmapEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *GetActiveAtomicCounterBufferiv)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetActiveAttrib)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY *GetActiveAttribARB)(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *);
    void (KHRONOS_APIENTRY *GetActiveSubroutineName)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetActiveSubroutineUniformName)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetActiveSubroutineUniformiv)(GLuint, GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetActiveUniform)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY *GetActiveUniformARB)(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *);
    void (KHRONOS_APIENTRY *GetActiveUniformBlockName)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetActiveUniformBlockiv)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetActiveUniformName)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetActiveUniformsiv)(GLuint, GLsizei, const GLuint *, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetActiveVaryingNV)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY *GetArrayObjectfvATI)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetArrayObjectivATI)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetAttachedObjectsARB)(GLhandleARB, GLsizei, GLsizei *, GLhandleARB *);
    void (KHRONOS_APIENTRY *GetAttachedShaders)(GLuint, GLsizei, GLsizei *, GLuint *);
    GLint(KHRONOS_APIENTRY *GetAttribLocation)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY *GetAttribLocationARB)(GLhandleARB, const GLcharARB *);
    void (KHRONOS_APIENTRY *GetBooleanIndexedvEXT)(GLenum, GLuint, GLboolean *);
    void (KHRONOS_APIENTRY *GetBooleani_v)(GLenum, GLuint, GLboolean *);
    void (KHRONOS_APIENTRY *GetBooleanv)(GLenum, GLboolean *);
    void (KHRONOS_APIENTRY *GetBufferParameteri64v)(GLenum, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY *GetBufferParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetBufferParameterivARB)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetBufferParameterui64vNV)(GLenum, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY *GetBufferPointerv)(GLenum, GLenum, void **);
    void (KHRONOS_APIENTRY *GetBufferPointervARB)(GLenum, GLenum, void **);
    void (KHRONOS_APIENTRY *GetBufferPointervOES)(GLenum, GLenum, void **);
    void (KHRONOS_APIENTRY *GetBufferSubData)(GLenum, GLintptr, GLsizeiptr, void *);
    void (KHRONOS_APIENTRY *GetBufferSubDataARB)(GLenum, GLintptrARB, GLsizeiptrARB, void *);
    void (KHRONOS_APIENTRY *GetClipPlane)(GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetClipPlanef)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetClipPlanefOES)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetClipPlanex)(GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetClipPlanexOES)(GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetColorTable)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetColorTableEXT)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetColorTableParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetColorTableParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetColorTableParameterfvSGI)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetColorTableParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetColorTableParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetColorTableParameterivSGI)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetColorTableSGI)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetCombinerInputParameterfvNV)(GLenum, GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetCombinerInputParameterivNV)(GLenum, GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetCombinerOutputParameterfvNV)(GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetCombinerOutputParameterivNV)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetCombinerStageParameterfvNV)(GLenum, GLenum, GLfloat *);
    GLuint(KHRONOS_APIENTRY *GetCommandHeaderNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *GetCompressedMultiTexImageEXT)(GLenum, GLenum, GLint, void *);
    void (KHRONOS_APIENTRY *GetCompressedTexImage)(GLenum, GLint, void *);
    void (KHRONOS_APIENTRY *GetCompressedTexImageARB)(GLenum, GLint, void *);
    void (KHRONOS_APIENTRY *GetCompressedTextureImage)(GLuint, GLint, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetCompressedTextureImageEXT)(GLuint, GLenum, GLint, void *);
    void (KHRONOS_APIENTRY *GetCompressedTextureSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetConvolutionFilter)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetConvolutionFilterEXT)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetConvolutionParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetConvolutionParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetConvolutionParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetConvolutionParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetConvolutionParameterxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetCoverageModulationTableNV)(GLsizei, GLfloat *);
    GLuint(KHRONOS_APIENTRY *GetDebugMessageLog)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *);
    GLuint(KHRONOS_APIENTRY *GetDebugMessageLogAMD)(GLuint, GLsizei, GLenum *, GLuint *, GLuint *, GLsizei *, GLchar *);
    GLuint(KHRONOS_APIENTRY *GetDebugMessageLogARB)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *);
    GLuint(KHRONOS_APIENTRY *GetDebugMessageLogKHR)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetDetailTexFuncSGIS)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetDoubleIndexedvEXT)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY *GetDoublei_v)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY *GetDoublei_vEXT)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY *GetDoublev)(GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetDriverControlStringQCOM)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetDriverControlsQCOM)(GLint *, GLsizei, GLuint *);
    GLenum(KHRONOS_APIENTRY *GetError)(void);
    void (KHRONOS_APIENTRY *GetFenceivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetFinalCombinerInputParameterfvNV)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetFinalCombinerInputParameterivNV)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetFirstPerfQueryIdINTEL)(GLuint *);
    void (KHRONOS_APIENTRY *GetFixedv)(GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetFixedvOES)(GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetFloatIndexedvEXT)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY *GetFloati_v)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY *GetFloati_vEXT)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY *GetFloati_vNV)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY *GetFloati_vOES)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY *GetFloatv)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetFogFuncSGIS)(GLfloat *);
    GLint(KHRONOS_APIENTRY *GetFragDataIndex)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY *GetFragDataIndexEXT)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY *GetFragDataLocation)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY *GetFragDataLocationEXT)(GLuint, const GLchar *);
    void (KHRONOS_APIENTRY *GetFragmentLightfvSGIX)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetFragmentLightivSGIX)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetFragmentMaterialfvSGIX)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetFragmentMaterialivSGIX)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetFramebufferAttachmentParameteriv)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetFramebufferAttachmentParameterivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetFramebufferAttachmentParameterivOES)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetFramebufferParameterfvAMD)(GLenum, GLenum, GLuint, GLuint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetFramebufferParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetFramebufferParameterivEXT)(GLuint, GLenum, GLint *);
    GLsizei(KHRONOS_APIENTRY *GetFramebufferPixelLocalStorageSizeEXT)(GLuint);
    GLenum(KHRONOS_APIENTRY *GetGraphicsResetStatus)(void);
    GLenum(KHRONOS_APIENTRY *GetGraphicsResetStatusARB)(void);
    GLenum(KHRONOS_APIENTRY *GetGraphicsResetStatusEXT)(void);
    GLenum(KHRONOS_APIENTRY *GetGraphicsResetStatusKHR)(void);
    GLhandleARB(KHRONOS_APIENTRY *GetHandleARB)(GLenum);
    void (KHRONOS_APIENTRY *GetHistogram)(GLenum, GLboolean, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetHistogramEXT)(GLenum, GLboolean, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetHistogramParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetHistogramParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetHistogramParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetHistogramParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetHistogramParameterxvOES)(GLenum, GLenum, GLfixed *);
    GLuint64(KHRONOS_APIENTRY *GetImageHandleARB)(GLuint, GLint, GLboolean, GLint, GLenum);
    GLuint64(KHRONOS_APIENTRY *GetImageHandleNV)(GLuint, GLint, GLboolean, GLint, GLenum);
    void (KHRONOS_APIENTRY *GetImageTransformParameterfvHP)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetImageTransformParameterivHP)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetInfoLogARB)(GLhandleARB, GLsizei, GLsizei *, GLcharARB *);
    GLint(KHRONOS_APIENTRY *GetInstrumentsSGIX)(void);
    void (KHRONOS_APIENTRY *GetInteger64i_v)(GLenum, GLuint, GLint64 *);
    void (KHRONOS_APIENTRY *GetInteger64v)(GLenum, GLint64 *);
    void (KHRONOS_APIENTRY *GetInteger64vAPPLE)(GLenum, GLint64 *);
    void (KHRONOS_APIENTRY *GetIntegerIndexedvEXT)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY *GetIntegeri_v)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY *GetIntegeri_vEXT)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY *GetIntegerui64i_vNV)(GLenum, GLuint, GLuint64EXT *);
    void (KHRONOS_APIENTRY *GetIntegerui64vNV)(GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY *GetIntegerv)(GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetInternalformatSampleivNV)(GLenum, GLenum, GLsizei, GLenum, GLsizei, GLint *);
    void (KHRONOS_APIENTRY *GetInternalformati64v)(GLenum, GLenum, GLenum, GLsizei, GLint64 *);
    void (KHRONOS_APIENTRY *GetInternalformativ)(GLenum, GLenum, GLenum, GLsizei, GLint *);
    void (KHRONOS_APIENTRY *GetInvariantBooleanvEXT)(GLuint, GLenum, GLboolean *);
    void (KHRONOS_APIENTRY *GetInvariantFloatvEXT)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetInvariantIntegervEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetLightfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetLightiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetLightxOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetLightxv)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetLightxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetListParameterfvSGIX)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetListParameterivSGIX)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetLocalConstantBooleanvEXT)(GLuint, GLenum, GLboolean *);
    void (KHRONOS_APIENTRY *GetLocalConstantFloatvEXT)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetLocalConstantIntegervEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMapAttribParameterfvNV)(GLenum, GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetMapAttribParameterivNV)(GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMapControlPointsNV)(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, void *);
    void (KHRONOS_APIENTRY *GetMapParameterfvNV)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetMapParameterivNV)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMapdv)(GLenum, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetMapfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetMapiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMapxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetMaterialfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetMaterialiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMaterialxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY *GetMaterialxv)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetMaterialxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetMemoryObjectParameterivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMinmax)(GLenum, GLboolean, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetMinmaxEXT)(GLenum, GLboolean, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetMinmaxParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetMinmaxParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetMinmaxParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMinmaxParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMultiTexEnvfvEXT)(GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetMultiTexEnvivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMultiTexGendvEXT)(GLenum, GLenum, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetMultiTexGenfvEXT)(GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetMultiTexGenivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMultiTexImageEXT)(GLenum, GLenum, GLint, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetMultiTexLevelParameterfvEXT)(GLenum, GLenum, GLint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetMultiTexLevelParameterivEXT)(GLenum, GLenum, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMultiTexParameterIivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMultiTexParameterIuivEXT)(GLenum, GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetMultiTexParameterfvEXT)(GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetMultiTexParameterivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMultisamplefv)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY *GetMultisamplefvNV)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY *GetNamedBufferParameteri64v)(GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY *GetNamedBufferParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetNamedBufferParameterivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetNamedBufferParameterui64vNV)(GLuint, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY *GetNamedBufferPointerv)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY *GetNamedBufferPointervEXT)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY *GetNamedBufferSubData)(GLuint, GLintptr, GLsizeiptr, void *);
    void (KHRONOS_APIENTRY *GetNamedBufferSubDataEXT)(GLuint, GLintptr, GLsizeiptr, void *);
    void (KHRONOS_APIENTRY *GetNamedFramebufferAttachmentParameteriv)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetNamedFramebufferAttachmentParameterivEXT)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetNamedFramebufferParameterfvAMD)(GLuint, GLenum, GLuint, GLuint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetNamedFramebufferParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetNamedFramebufferParameterivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetNamedProgramLocalParameterIivEXT)(GLuint, GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY *GetNamedProgramLocalParameterIuivEXT)(GLuint, GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY *GetNamedProgramLocalParameterdvEXT)(GLuint, GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY *GetNamedProgramLocalParameterfvEXT)(GLuint, GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY *GetNamedProgramStringEXT)(GLuint, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetNamedProgramivEXT)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetNamedRenderbufferParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetNamedRenderbufferParameterivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetNamedStringARB)(GLint, const GLchar *, GLsizei, GLint *, GLchar *);
    void (KHRONOS_APIENTRY *GetNamedStringivARB)(GLint, const GLchar *, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetNextPerfQueryIdINTEL)(GLuint, GLuint *);
    void (KHRONOS_APIENTRY *GetObjectBufferfvATI)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetObjectBufferivATI)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetObjectLabel)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetObjectLabelEXT)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetObjectLabelKHR)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetObjectParameterfvARB)(GLhandleARB, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetObjectParameterivAPPLE)(GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetObjectParameterivARB)(GLhandleARB, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetObjectPtrLabel)(const void *, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetObjectPtrLabelKHR)(const void *, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetOcclusionQueryivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetOcclusionQueryuivNV)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetPathColorGenfvNV)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetPathColorGenivNV)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetPathCommandsNV)(GLuint, GLubyte *);
    void (KHRONOS_APIENTRY *GetPathCoordsNV)(GLuint, GLfloat *);
    void (KHRONOS_APIENTRY *GetPathDashArrayNV)(GLuint, GLfloat *);
    GLfloat(KHRONOS_APIENTRY *GetPathLengthNV)(GLuint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *GetPathMetricRangeNV)(GLbitfield, GLuint, GLsizei, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetPathMetricsNV)(GLbitfield, GLsizei, GLenum, const void *, GLuint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetPathParameterfvNV)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetPathParameterivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetPathSpacingNV)(GLenum, GLsizei, GLenum, const void *, GLuint, GLfloat, GLfloat, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetPathTexGenfvNV)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetPathTexGenivNV)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetPerfCounterInfoINTEL)(GLuint, GLuint, GLuint, GLchar *, GLuint, GLchar *, GLuint *, GLuint *, GLuint *, GLuint *, GLuint64 *);
    void (KHRONOS_APIENTRY *GetPerfMonitorCounterDataAMD)(GLuint, GLenum, GLsizei, GLuint *, GLint *);
    void (KHRONOS_APIENTRY *GetPerfMonitorCounterInfoAMD)(GLuint, GLuint, GLenum, void *);
    void (KHRONOS_APIENTRY *GetPerfMonitorCounterStringAMD)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetPerfMonitorCountersAMD)(GLuint, GLint *, GLint *, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GetPerfMonitorGroupStringAMD)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetPerfMonitorGroupsAMD)(GLint *, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GetPerfQueryDataINTEL)(GLuint, GLuint, GLsizei, GLvoid *, GLuint *);
    void (KHRONOS_APIENTRY *GetPerfQueryIdByNameINTEL)(GLchar *, GLuint *);
    void (KHRONOS_APIENTRY *GetPerfQueryInfoINTEL)(GLuint, GLuint, GLchar *, GLuint *, GLuint *, GLuint *, GLuint *);
    void (KHRONOS_APIENTRY *GetPixelMapfv)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetPixelMapuiv)(GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetPixelMapusv)(GLenum, GLushort *);
    void (KHRONOS_APIENTRY *GetPixelMapxv)(GLenum, GLint, GLfixed *);
    void (KHRONOS_APIENTRY *GetPixelTexGenParameterfvSGIS)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetPixelTexGenParameterivSGIS)(GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetPixelTransformParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetPixelTransformParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetPointerIndexedvEXT)(GLenum, GLuint, void **);
    void (KHRONOS_APIENTRY *GetPointeri_vEXT)(GLenum, GLuint, void **);
    void (KHRONOS_APIENTRY *GetPointerv)(GLenum, void **);
    void (KHRONOS_APIENTRY *GetPointervEXT)(GLenum, void **);
    void (KHRONOS_APIENTRY *GetPointervKHR)(GLenum, void **);
    void (KHRONOS_APIENTRY *GetPolygonStipple)(GLubyte *);
    void (KHRONOS_APIENTRY *GetProgramBinary)(GLuint, GLsizei, GLsizei *, GLenum *, void *);
    void (KHRONOS_APIENTRY *GetProgramBinaryOES)(GLuint, GLsizei, GLsizei *, GLenum *, void *);
    void (KHRONOS_APIENTRY *GetProgramEnvParameterIivNV)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY *GetProgramEnvParameterIuivNV)(GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY *GetProgramEnvParameterdvARB)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY *GetProgramEnvParameterfvARB)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY *GetProgramInfoLog)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetProgramInterfaceiv)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetProgramLocalParameterIivNV)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY *GetProgramLocalParameterIuivNV)(GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY *GetProgramLocalParameterdvARB)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY *GetProgramLocalParameterfvARB)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY *GetProgramNamedParameterdvNV)(GLuint, GLsizei, const GLubyte *, GLdouble *);
    void (KHRONOS_APIENTRY *GetProgramNamedParameterfvNV)(GLuint, GLsizei, const GLubyte *, GLfloat *);
    void (KHRONOS_APIENTRY *GetProgramParameterdvNV)(GLenum, GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetProgramParameterfvNV)(GLenum, GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetProgramPipelineInfoLog)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetProgramPipelineInfoLogEXT)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetProgramPipelineiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetProgramPipelineivEXT)(GLuint, GLenum, GLint *);
    GLuint(KHRONOS_APIENTRY *GetProgramResourceIndex)(GLuint, GLenum, const GLchar *);
    GLint(KHRONOS_APIENTRY *GetProgramResourceLocation)(GLuint, GLenum, const GLchar *);
    GLint(KHRONOS_APIENTRY *GetProgramResourceLocationIndex)(GLuint, GLenum, const GLchar *);
    GLint(KHRONOS_APIENTRY *GetProgramResourceLocationIndexEXT)(GLuint, GLenum, const GLchar *);
    void (KHRONOS_APIENTRY *GetProgramResourceName)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetProgramResourcefvNV)(GLuint, GLenum, GLuint, GLsizei, const GLenum *, GLsizei, GLsizei *, GLfloat *);
    void (KHRONOS_APIENTRY *GetProgramResourceiv)(GLuint, GLenum, GLuint, GLsizei, const GLenum *, GLsizei, GLsizei *, GLint *);
    void (KHRONOS_APIENTRY *GetProgramStageiv)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetProgramStringARB)(GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetProgramStringNV)(GLuint, GLenum, GLubyte *);
    void (KHRONOS_APIENTRY *GetProgramSubroutineParameteruivNV)(GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY *GetProgramiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetProgramivARB)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetProgramivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetQueryBufferObjecti64v)(GLuint, GLuint, GLenum, GLintptr);
    void (KHRONOS_APIENTRY *GetQueryBufferObjectiv)(GLuint, GLuint, GLenum, GLintptr);
    void (KHRONOS_APIENTRY *GetQueryBufferObjectui64v)(GLuint, GLuint, GLenum, GLintptr);
    void (KHRONOS_APIENTRY *GetQueryBufferObjectuiv)(GLuint, GLuint, GLenum, GLintptr);
    void (KHRONOS_APIENTRY *GetQueryIndexediv)(GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetQueryObjecti64v)(GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY *GetQueryObjecti64vEXT)(GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY *GetQueryObjectiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetQueryObjectivARB)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetQueryObjectivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetQueryObjectui64v)(GLuint, GLenum, GLuint64 *);
    void (KHRONOS_APIENTRY *GetQueryObjectui64vEXT)(GLuint, GLenum, GLuint64 *);
    void (KHRONOS_APIENTRY *GetQueryObjectuiv)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetQueryObjectuivARB)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetQueryObjectuivEXT)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetQueryiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetQueryivARB)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetQueryivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetRenderbufferParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetRenderbufferParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetRenderbufferParameterivOES)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetSamplerParameterIiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetSamplerParameterIivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetSamplerParameterIivOES)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetSamplerParameterIuiv)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetSamplerParameterIuivEXT)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetSamplerParameterIuivOES)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetSamplerParameterfv)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetSamplerParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetSemaphoreParameterui64vEXT)(GLuint, GLenum, GLuint64 *);
    void (KHRONOS_APIENTRY *GetSeparableFilter)(GLenum, GLenum, GLenum, void *, void *, void *);
    void (KHRONOS_APIENTRY *GetSeparableFilterEXT)(GLenum, GLenum, GLenum, void *, void *, void *);
    void (KHRONOS_APIENTRY *GetShaderInfoLog)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetShaderPrecisionFormat)(GLenum, GLenum, GLint *, GLint *);
    void (KHRONOS_APIENTRY *GetShaderSource)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetShaderSourceARB)(GLhandleARB, GLsizei, GLsizei *, GLcharARB *);
    void (KHRONOS_APIENTRY *GetShaderiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetSharpenTexFuncSGIS)(GLenum, GLfloat *);
    GLushort(KHRONOS_APIENTRY *GetStageIndexNV)(GLenum);
    const GLubyte *(KHRONOS_APIENTRY *GetString)(GLenum);
    const GLubyte *(KHRONOS_APIENTRY *GetStringi)(GLenum, GLuint);
    GLuint(KHRONOS_APIENTRY *GetSubroutineIndex)(GLuint, GLenum, const GLchar *);
    GLint(KHRONOS_APIENTRY *GetSubroutineUniformLocation)(GLuint, GLenum, const GLchar *);
    void (KHRONOS_APIENTRY *GetSynciv)(GLsync, GLenum, GLsizei, GLsizei *, GLint *);
    void (KHRONOS_APIENTRY *GetSyncivAPPLE)(GLsync, GLenum, GLsizei, GLsizei *, GLint *);
    void (KHRONOS_APIENTRY *GetTexBumpParameterfvATI)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetTexBumpParameterivATI)(GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTexEnvfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetTexEnviv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTexEnvxv)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetTexEnvxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetTexFilterFuncSGIS)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetTexGendv)(GLenum, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetTexGenfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetTexGenfvOES)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetTexGeniv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTexGenivOES)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTexGenxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetTexImage)(GLenum, GLint, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetTexLevelParameterfv)(GLenum, GLint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetTexLevelParameteriv)(GLenum, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTexLevelParameterxvOES)(GLenum, GLint, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetTexParameterIiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTexParameterIivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTexParameterIivOES)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTexParameterIuiv)(GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetTexParameterIuivEXT)(GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetTexParameterIuivOES)(GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetTexParameterPointervAPPLE)(GLenum, GLenum, void **);
    void (KHRONOS_APIENTRY *GetTexParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetTexParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTexParameterxv)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetTexParameterxvOES)(GLenum, GLenum, GLfixed *);
    GLuint64(KHRONOS_APIENTRY *GetTextureHandleARB)(GLuint);
    GLuint64(KHRONOS_APIENTRY *GetTextureHandleIMG)(GLuint);
    GLuint64(KHRONOS_APIENTRY *GetTextureHandleNV)(GLuint);
    void (KHRONOS_APIENTRY *GetTextureImage)(GLuint, GLint, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetTextureImageEXT)(GLuint, GLenum, GLint, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetTextureLevelParameterfv)(GLuint, GLint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetTextureLevelParameterfvEXT)(GLuint, GLenum, GLint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetTextureLevelParameteriv)(GLuint, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTextureLevelParameterivEXT)(GLuint, GLenum, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTextureParameterIiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTextureParameterIivEXT)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTextureParameterIuiv)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetTextureParameterIuivEXT)(GLuint, GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetTextureParameterfv)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetTextureParameterfvEXT)(GLuint, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetTextureParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTextureParameterivEXT)(GLuint, GLenum, GLenum, GLint *);
    GLuint64(KHRONOS_APIENTRY *GetTextureSamplerHandleARB)(GLuint, GLuint);
    GLuint64(KHRONOS_APIENTRY *GetTextureSamplerHandleIMG)(GLuint, GLuint);
    GLuint64(KHRONOS_APIENTRY *GetTextureSamplerHandleNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *GetTextureSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetTrackMatrixivNV)(GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTransformFeedbackVarying)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY *GetTransformFeedbackVaryingEXT)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY *GetTransformFeedbackVaryingNV)(GLuint, GLuint, GLint *);
    void (KHRONOS_APIENTRY *GetTransformFeedbacki64_v)(GLuint, GLenum, GLuint, GLint64 *);
    void (KHRONOS_APIENTRY *GetTransformFeedbacki_v)(GLuint, GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY *GetTransformFeedbackiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTranslatedShaderSourceANGLE)(GLuint, GLsizei, GLsizei *, GLchar *);
    GLuint(KHRONOS_APIENTRY *GetUniformBlockIndex)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY *GetUniformBufferSizeEXT)(GLuint, GLint);
    void (KHRONOS_APIENTRY *GetUniformIndices)(GLuint, GLsizei, const GLchar *const*, GLuint *);
    GLint(KHRONOS_APIENTRY *GetUniformLocation)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY *GetUniformLocationARB)(GLhandleARB, const GLcharARB *);
    GLintptr(KHRONOS_APIENTRY *GetUniformOffsetEXT)(GLuint, GLint);
    void (KHRONOS_APIENTRY *GetUniformSubroutineuiv)(GLenum, GLint, GLuint *);
    void (KHRONOS_APIENTRY *GetUniformdv)(GLuint, GLint, GLdouble *);
    void (KHRONOS_APIENTRY *GetUniformfv)(GLuint, GLint, GLfloat *);
    void (KHRONOS_APIENTRY *GetUniformfvARB)(GLhandleARB, GLint, GLfloat *);
    void (KHRONOS_APIENTRY *GetUniformi64vARB)(GLuint, GLint, GLint64 *);
    void (KHRONOS_APIENTRY *GetUniformi64vNV)(GLuint, GLint, GLint64EXT *);
    void (KHRONOS_APIENTRY *GetUniformiv)(GLuint, GLint, GLint *);
    void (KHRONOS_APIENTRY *GetUniformivARB)(GLhandleARB, GLint, GLint *);
    void (KHRONOS_APIENTRY *GetUniformui64vARB)(GLuint, GLint, GLuint64 *);
    void (KHRONOS_APIENTRY *GetUniformui64vNV)(GLuint, GLint, GLuint64EXT *);
    void (KHRONOS_APIENTRY *GetUniformuiv)(GLuint, GLint, GLuint *);
    void (KHRONOS_APIENTRY *GetUniformuivEXT)(GLuint, GLint, GLuint *);
    void (KHRONOS_APIENTRY *GetUnsignedBytei_vEXT)(GLenum, GLuint, GLubyte *);
    void (KHRONOS_APIENTRY *GetUnsignedBytevEXT)(GLenum, GLubyte *);
    void (KHRONOS_APIENTRY *GetVariantArrayObjectfvATI)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetVariantArrayObjectivATI)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVariantBooleanvEXT)(GLuint, GLenum, GLboolean *);
    void (KHRONOS_APIENTRY *GetVariantFloatvEXT)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetVariantIntegervEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVariantPointervEXT)(GLuint, GLenum, void **);
    GLint(KHRONOS_APIENTRY *GetVaryingLocationNV)(GLuint, const GLchar *);
    void (KHRONOS_APIENTRY *GetVertexArrayIndexed64iv)(GLuint, GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY *GetVertexArrayIndexediv)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVertexArrayIntegeri_vEXT)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVertexArrayIntegervEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVertexArrayPointeri_vEXT)(GLuint, GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY *GetVertexArrayPointervEXT)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY *GetVertexArrayiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVertexAttribArrayObjectfvATI)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetVertexAttribArrayObjectivATI)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVertexAttribIiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVertexAttribIivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVertexAttribIuiv)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetVertexAttribIuivEXT)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetVertexAttribLdv)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetVertexAttribLdvEXT)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetVertexAttribLi64vNV)(GLuint, GLenum, GLint64EXT *);
    void (KHRONOS_APIENTRY *GetVertexAttribLui64vARB)(GLuint, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY *GetVertexAttribLui64vNV)(GLuint, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY *GetVertexAttribPointerv)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY *GetVertexAttribPointervARB)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY *GetVertexAttribPointervNV)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY *GetVertexAttribdv)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetVertexAttribdvARB)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetVertexAttribdvNV)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetVertexAttribfv)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetVertexAttribfvARB)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetVertexAttribfvNV)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetVertexAttribiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVertexAttribivARB)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVertexAttribivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVideoCaptureStreamdvNV)(GLuint, GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetVideoCaptureStreamfvNV)(GLuint, GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetVideoCaptureStreamivNV)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVideoCaptureivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVideoi64vNV)(GLuint, GLenum, GLint64EXT *);
    void (KHRONOS_APIENTRY *GetVideoivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVideoui64vNV)(GLuint, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY *GetVideouivNV)(GLuint, GLenum, GLuint *);
    GLVULKANPROCNV(KHRONOS_APIENTRY *GetVkProcAddrNV)(const GLchar *);
    void (KHRONOS_APIENTRY *GetnColorTable)(GLenum, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnColorTableARB)(GLenum, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnCompressedTexImage)(GLenum, GLint, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnCompressedTexImageARB)(GLenum, GLint, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnConvolutionFilter)(GLenum, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnConvolutionFilterARB)(GLenum, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnHistogram)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnHistogramARB)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnMapdv)(GLenum, GLenum, GLsizei, GLdouble *);
    void (KHRONOS_APIENTRY *GetnMapdvARB)(GLenum, GLenum, GLsizei, GLdouble *);
    void (KHRONOS_APIENTRY *GetnMapfv)(GLenum, GLenum, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetnMapfvARB)(GLenum, GLenum, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetnMapiv)(GLenum, GLenum, GLsizei, GLint *);
    void (KHRONOS_APIENTRY *GetnMapivARB)(GLenum, GLenum, GLsizei, GLint *);
    void (KHRONOS_APIENTRY *GetnMinmax)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnMinmaxARB)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnPixelMapfv)(GLenum, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetnPixelMapfvARB)(GLenum, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetnPixelMapuiv)(GLenum, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GetnPixelMapuivARB)(GLenum, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GetnPixelMapusv)(GLenum, GLsizei, GLushort *);
    void (KHRONOS_APIENTRY *GetnPixelMapusvARB)(GLenum, GLsizei, GLushort *);
    void (KHRONOS_APIENTRY *GetnPolygonStipple)(GLsizei, GLubyte *);
    void (KHRONOS_APIENTRY *GetnPolygonStippleARB)(GLsizei, GLubyte *);
    void (KHRONOS_APIENTRY *GetnSeparableFilter)(GLenum, GLenum, GLenum, GLsizei, void *, GLsizei, void *, void *);
    void (KHRONOS_APIENTRY *GetnSeparableFilterARB)(GLenum, GLenum, GLenum, GLsizei, void *, GLsizei, void *, void *);
    void (KHRONOS_APIENTRY *GetnTexImage)(GLenum, GLint, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnTexImageARB)(GLenum, GLint, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnUniformdv)(GLuint, GLint, GLsizei, GLdouble *);
    void (KHRONOS_APIENTRY *GetnUniformdvARB)(GLuint, GLint, GLsizei, GLdouble *);
    void (KHRONOS_APIENTRY *GetnUniformfv)(GLuint, GLint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetnUniformfvARB)(GLuint, GLint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetnUniformfvEXT)(GLuint, GLint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetnUniformfvKHR)(GLuint, GLint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetnUniformi64vARB)(GLuint, GLint, GLsizei, GLint64 *);
    void (KHRONOS_APIENTRY *GetnUniformiv)(GLuint, GLint, GLsizei, GLint *);
    void (KHRONOS_APIENTRY *GetnUniformivARB)(GLuint, GLint, GLsizei, GLint *);
    void (KHRONOS_APIENTRY *GetnUniformivEXT)(GLuint, GLint, GLsizei, GLint *);
    void (KHRONOS_APIENTRY *GetnUniformivKHR)(GLuint, GLint, GLsizei, GLint *);
    void (KHRONOS_APIENTRY *GetnUniformui64vARB)(GLuint, GLint, GLsizei, GLuint64 *);
    void (KHRONOS_APIENTRY *GetnUniformuiv)(GLuint, GLint, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GetnUniformuivARB)(GLuint, GLint, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GetnUniformuivKHR)(GLuint, GLint, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GlobalAlphaFactorbSUN)(GLbyte);
    void (KHRONOS_APIENTRY *GlobalAlphaFactordSUN)(GLdouble);
    void (KHRONOS_APIENTRY *GlobalAlphaFactorfSUN)(GLfloat);
    void (KHRONOS_APIENTRY *GlobalAlphaFactoriSUN)(GLint);
    void (KHRONOS_APIENTRY *GlobalAlphaFactorsSUN)(GLshort);
    void (KHRONOS_APIENTRY *GlobalAlphaFactorubSUN)(GLubyte);
    void (KHRONOS_APIENTRY *GlobalAlphaFactoruiSUN)(GLuint);
    void (KHRONOS_APIENTRY *GlobalAlphaFactorusSUN)(GLushort);
    void (KHRONOS_APIENTRY *Hint)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *HintPGI)(GLenum, GLint);
    void (KHRONOS_APIENTRY *Histogram)(GLenum, GLsizei, GLenum, GLboolean);
    void (KHRONOS_APIENTRY *HistogramEXT)(GLenum, GLsizei, GLenum, GLboolean);
    void (KHRONOS_APIENTRY *IglooInterfaceSGIX)(GLenum, const void *);
    void (KHRONOS_APIENTRY *ImageTransformParameterfHP)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *ImageTransformParameterfvHP)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *ImageTransformParameteriHP)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *ImageTransformParameterivHP)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *ImportMemoryFdEXT)(GLuint, GLuint64, GLenum, GLint);
    void (KHRONOS_APIENTRY *ImportMemoryWin32HandleEXT)(GLuint, GLuint64, GLenum, void *);
    void (KHRONOS_APIENTRY *ImportMemoryWin32NameEXT)(GLuint, GLuint64, GLenum, const void *);
    void (KHRONOS_APIENTRY *ImportSemaphoreFdEXT)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY *ImportSemaphoreWin32HandleEXT)(GLuint, GLenum, void *);
    void (KHRONOS_APIENTRY *ImportSemaphoreWin32NameEXT)(GLuint, GLenum, const void *);
    GLsync(KHRONOS_APIENTRY *ImportSyncEXT)(GLenum, GLintptr, GLbitfield);
    void (KHRONOS_APIENTRY *IndexFormatNV)(GLenum, GLsizei);
    void (KHRONOS_APIENTRY *IndexFuncEXT)(GLenum, GLclampf);
    void (KHRONOS_APIENTRY *IndexMask)(GLuint);
    void (KHRONOS_APIENTRY *IndexMaterialEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *IndexPointer)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *IndexPointerEXT)(GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY *IndexPointerListIBM)(GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY *Indexd)(GLdouble);
    void (KHRONOS_APIENTRY *Indexdv)(const GLdouble *);
    void (KHRONOS_APIENTRY *Indexf)(GLfloat);
    void (KHRONOS_APIENTRY *Indexfv)(const GLfloat *);
    void (KHRONOS_APIENTRY *Indexi)(GLint);
    void (KHRONOS_APIENTRY *Indexiv)(const GLint *);
    void (KHRONOS_APIENTRY *Indexs)(GLshort);
    void (KHRONOS_APIENTRY *Indexsv)(const GLshort *);
    void (KHRONOS_APIENTRY *Indexub)(GLubyte);
    void (KHRONOS_APIENTRY *Indexubv)(const GLubyte *);
    void (KHRONOS_APIENTRY *IndexxOES)(GLfixed);
    void (KHRONOS_APIENTRY *IndexxvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *InitNames)(void);
    void (KHRONOS_APIENTRY *InsertComponentEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *InsertEventMarkerEXT)(GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *InstrumentsBufferSGIX)(GLsizei, GLint *);
    void (KHRONOS_APIENTRY *InterleavedArrays)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *InterpolatePathsNV)(GLuint, GLuint, GLuint, GLfloat);
    void (KHRONOS_APIENTRY *InvalidateBufferData)(GLuint);
    void (KHRONOS_APIENTRY *InvalidateBufferSubData)(GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *InvalidateFramebuffer)(GLenum, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY *InvalidateNamedFramebufferData)(GLuint, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY *InvalidateNamedFramebufferSubData)(GLuint, GLsizei, const GLenum *, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *InvalidateSubFramebuffer)(GLenum, GLsizei, const GLenum *, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *InvalidateTexImage)(GLuint, GLint);
    void (KHRONOS_APIENTRY *InvalidateTexSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    GLboolean(KHRONOS_APIENTRY *IsAsyncMarkerSGIX)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsBuffer)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsBufferARB)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsBufferResidentNV)(GLenum);
    GLboolean(KHRONOS_APIENTRY *IsCommandListNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsEnabled)(GLenum);
    GLboolean(KHRONOS_APIENTRY *IsEnabledIndexedEXT)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY *IsEnabledi)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY *IsEnablediEXT)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY *IsEnablediNV)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY *IsEnablediOES)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY *IsFenceAPPLE)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsFenceNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsFramebuffer)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsFramebufferEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsFramebufferOES)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsImageHandleResidentARB)(GLuint64);
    GLboolean(KHRONOS_APIENTRY *IsImageHandleResidentNV)(GLuint64);
    GLboolean(KHRONOS_APIENTRY *IsList)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsMemoryObjectEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsNameAMD)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY *IsNamedBufferResidentNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsNamedStringARB)(GLint, const GLchar *);
    GLboolean(KHRONOS_APIENTRY *IsObjectBufferATI)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsOcclusionQueryNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsPathNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsPointInFillPathNV)(GLuint, GLuint, GLfloat, GLfloat);
    GLboolean(KHRONOS_APIENTRY *IsPointInStrokePathNV)(GLuint, GLfloat, GLfloat);
    GLboolean(KHRONOS_APIENTRY *IsProgram)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsProgramARB)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsProgramNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsProgramPipeline)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsProgramPipelineEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsQuery)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsQueryARB)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsQueryEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsRenderbuffer)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsRenderbufferEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsRenderbufferOES)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsSampler)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsSemaphoreEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsShader)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsStateNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsSync)(GLsync);
    GLboolean(KHRONOS_APIENTRY *IsSyncAPPLE)(GLsync);
    GLboolean(KHRONOS_APIENTRY *IsTexture)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsTextureEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsTextureHandleResidentARB)(GLuint64);
    GLboolean(KHRONOS_APIENTRY *IsTextureHandleResidentNV)(GLuint64);
    GLboolean(KHRONOS_APIENTRY *IsTransformFeedback)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsTransformFeedbackNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsVariantEnabledEXT)(GLuint, GLenum);
    GLboolean(KHRONOS_APIENTRY *IsVertexArray)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsVertexArrayAPPLE)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsVertexArrayOES)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsVertexAttribEnabledAPPLE)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *LGPUCopyImageSubDataNVX)(GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *LGPUInterlockNVX)(void);
    void (KHRONOS_APIENTRY *LGPUNamedBufferSubDataNVX)(GLbitfield, GLuint, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY *LabelObjectEXT)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *LightEnviSGIX)(GLenum, GLint);
    void (KHRONOS_APIENTRY *LightModelf)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *LightModelfv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *LightModeli)(GLenum, GLint);
    void (KHRONOS_APIENTRY *LightModeliv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *LightModelx)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY *LightModelxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY *LightModelxv)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *LightModelxvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *Lightf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *Lightfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *Lighti)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *Lightiv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *Lightx)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY *LightxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY *Lightxv)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *LightxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *LineStipple)(GLint, GLushort);
    void (KHRONOS_APIENTRY *LineWidth)(GLfloat);
    void (KHRONOS_APIENTRY *LineWidthx)(GLfixed);
    void (KHRONOS_APIENTRY *LineWidthxOES)(GLfixed);
    void (KHRONOS_APIENTRY *LinkProgram)(GLuint);
    void (KHRONOS_APIENTRY *LinkProgramARB)(GLhandleARB);
    void (KHRONOS_APIENTRY *ListBase)(GLuint);
    void (KHRONOS_APIENTRY *ListDrawCommandsStatesClientNV)(GLuint, GLuint, const void **, const GLsizei *, const GLuint *, const GLuint *, GLuint);
    void (KHRONOS_APIENTRY *ListParameterfSGIX)(GLuint, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *ListParameterfvSGIX)(GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *ListParameteriSGIX)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY *ListParameterivSGIX)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *LoadIdentity)(void);
    void (KHRONOS_APIENTRY *LoadIdentityDeformationMapSGIX)(GLbitfield);
    void (KHRONOS_APIENTRY *LoadMatrixd)(const GLdouble *);
    void (KHRONOS_APIENTRY *LoadMatrixf)(const GLfloat *);
    void (KHRONOS_APIENTRY *LoadMatrixx)(const GLfixed *);
    void (KHRONOS_APIENTRY *LoadMatrixxOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *LoadName)(GLuint);
    void (KHRONOS_APIENTRY *LoadPaletteFromModelViewMatrixOES)(void);
    void (KHRONOS_APIENTRY *LoadProgramNV)(GLenum, GLuint, GLsizei, const GLubyte *);
    void (KHRONOS_APIENTRY *LoadTransposeMatrixd)(const GLdouble *);
    void (KHRONOS_APIENTRY *LoadTransposeMatrixdARB)(const GLdouble *);
    void (KHRONOS_APIENTRY *LoadTransposeMatrixf)(const GLfloat *);
    void (KHRONOS_APIENTRY *LoadTransposeMatrixfARB)(const GLfloat *);
    void (KHRONOS_APIENTRY *LoadTransposeMatrixxOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *LockArraysEXT)(GLint, GLsizei);
    void (KHRONOS_APIENTRY *LogicOp)(GLenum);
    void (KHRONOS_APIENTRY *MakeBufferNonResidentNV)(GLenum);
    void (KHRONOS_APIENTRY *MakeBufferResidentNV)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *MakeImageHandleNonResidentARB)(GLuint64);
    void (KHRONOS_APIENTRY *MakeImageHandleNonResidentNV)(GLuint64);
    void (KHRONOS_APIENTRY *MakeImageHandleResidentARB)(GLuint64, GLenum);
    void (KHRONOS_APIENTRY *MakeImageHandleResidentNV)(GLuint64, GLenum);
    void (KHRONOS_APIENTRY *MakeNamedBufferNonResidentNV)(GLuint);
    void (KHRONOS_APIENTRY *MakeNamedBufferResidentNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *MakeTextureHandleNonResidentARB)(GLuint64);
    void (KHRONOS_APIENTRY *MakeTextureHandleNonResidentNV)(GLuint64);
    void (KHRONOS_APIENTRY *MakeTextureHandleResidentARB)(GLuint64);
    void (KHRONOS_APIENTRY *MakeTextureHandleResidentNV)(GLuint64);
    void (KHRONOS_APIENTRY *Map1d)(GLenum, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY *Map1f)(GLenum, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY *Map1xOES)(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed);
    void (KHRONOS_APIENTRY *Map2d)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY *Map2f)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY *Map2xOES)(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed);
    void *(KHRONOS_APIENTRY *MapBuffer)(GLenum, GLenum);
    void *(KHRONOS_APIENTRY *MapBufferARB)(GLenum, GLenum);
    void *(KHRONOS_APIENTRY *MapBufferOES)(GLenum, GLenum);
    void *(KHRONOS_APIENTRY *MapBufferRange)(GLenum, GLintptr, GLsizeiptr, GLbitfield);
    void *(KHRONOS_APIENTRY *MapBufferRangeEXT)(GLenum, GLintptr, GLsizeiptr, GLbitfield);
    void (KHRONOS_APIENTRY *MapControlPointsNV)(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, const void *);
    void (KHRONOS_APIENTRY *MapGrid1d)(GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MapGrid1f)(GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *MapGrid1xOES)(GLint, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *MapGrid2d)(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MapGrid2f)(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *MapGrid2xOES)(GLint, GLfixed, GLfixed, GLfixed, GLfixed);
    void *(KHRONOS_APIENTRY *MapNamedBuffer)(GLuint, GLenum);
    void *(KHRONOS_APIENTRY *MapNamedBufferEXT)(GLuint, GLenum);
    void *(KHRONOS_APIENTRY *MapNamedBufferRange)(GLuint, GLintptr, GLsizeiptr, GLbitfield);
    void *(KHRONOS_APIENTRY *MapNamedBufferRangeEXT)(GLuint, GLintptr, GLsizeiptr, GLbitfield);
    void *(KHRONOS_APIENTRY *MapObjectBufferATI)(GLuint);
    void (KHRONOS_APIENTRY *MapParameterfvNV)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MapParameterivNV)(GLenum, GLenum, const GLint *);
    void *(KHRONOS_APIENTRY *MapTexture2DINTEL)(GLuint, GLint, GLbitfield, GLint *, GLenum *);
    void (KHRONOS_APIENTRY *MapVertexAttrib1dAPPLE)(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY *MapVertexAttrib1fAPPLE)(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY *MapVertexAttrib2dAPPLE)(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY *MapVertexAttrib2fAPPLE)(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY *Materialf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *Materialfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *Materiali)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *Materialiv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *Materialx)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY *MaterialxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY *Materialxv)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *MaterialxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *MatrixFrustumEXT)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MatrixIndexPointerARB)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *MatrixIndexPointerOES)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *MatrixIndexubvARB)(GLint, const GLubyte *);
    void (KHRONOS_APIENTRY *MatrixIndexuivARB)(GLint, const GLuint *);
    void (KHRONOS_APIENTRY *MatrixIndexusvARB)(GLint, const GLushort *);
    void (KHRONOS_APIENTRY *MatrixLoad3x2fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MatrixLoad3x3fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MatrixLoadIdentityEXT)(GLenum);
    void (KHRONOS_APIENTRY *MatrixLoadTranspose3x3fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MatrixLoadTransposedEXT)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MatrixLoadTransposefEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MatrixLoaddEXT)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MatrixLoadfEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MatrixMode)(GLenum);
    void (KHRONOS_APIENTRY *MatrixMult3x2fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MatrixMult3x3fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MatrixMultTranspose3x3fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MatrixMultTransposedEXT)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MatrixMultTransposefEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MatrixMultdEXT)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MatrixMultfEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MatrixOrthoEXT)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MatrixPopEXT)(GLenum);
    void (KHRONOS_APIENTRY *MatrixPushEXT)(GLenum);
    void (KHRONOS_APIENTRY *MatrixRotatedEXT)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MatrixRotatefEXT)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *MatrixScaledEXT)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MatrixScalefEXT)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *MatrixTranslatedEXT)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MatrixTranslatefEXT)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *MaxShaderCompilerThreadsARB)(GLuint);
    void (KHRONOS_APIENTRY *MemoryBarrier)(GLbitfield);
    void (KHRONOS_APIENTRY *MemoryBarrierByRegion)(GLbitfield);
    void (KHRONOS_APIENTRY *MemoryBarrierEXT)(GLbitfield);
    void (KHRONOS_APIENTRY *MemoryObjectParameterivEXT)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MinSampleShading)(GLfloat);
    void (KHRONOS_APIENTRY *MinSampleShadingARB)(GLfloat);
    void (KHRONOS_APIENTRY *MinSampleShadingOES)(GLfloat);
    void (KHRONOS_APIENTRY *Minmax)(GLenum, GLenum, GLboolean);
    void (KHRONOS_APIENTRY *MinmaxEXT)(GLenum, GLenum, GLboolean);
    void (KHRONOS_APIENTRY *MultMatrixd)(const GLdouble *);
    void (KHRONOS_APIENTRY *MultMatrixf)(const GLfloat *);
    void (KHRONOS_APIENTRY *MultMatrixx)(const GLfixed *);
    void (KHRONOS_APIENTRY *MultMatrixxOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *MultTransposeMatrixd)(const GLdouble *);
    void (KHRONOS_APIENTRY *MultTransposeMatrixdARB)(const GLdouble *);
    void (KHRONOS_APIENTRY *MultTransposeMatrixf)(const GLfloat *);
    void (KHRONOS_APIENTRY *MultTransposeMatrixfARB)(const GLfloat *);
    void (KHRONOS_APIENTRY *MultTransposeMatrixxOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *MultiDrawArrays)(GLenum, const GLint *, const GLsizei *, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawArraysEXT)(GLenum, const GLint *, const GLsizei *, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawArraysIndirect)(GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawArraysIndirectAMD)(GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawArraysIndirectBindlessCountNV)(GLenum, const void *, GLsizei, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY *MultiDrawArraysIndirectBindlessNV)(GLenum, const void *, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY *MultiDrawArraysIndirectCountARB)(GLenum, GLintptr, GLintptr, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawArraysIndirectEXT)(GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawElementArrayAPPLE)(GLenum, const GLint *, const GLsizei *, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawElements)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawElementsBaseVertex)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *MultiDrawElementsBaseVertexEXT)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *MultiDrawElementsBaseVertexOES)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *MultiDrawElementsEXT)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawElementsIndirect)(GLenum, GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawElementsIndirectAMD)(GLenum, GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawElementsIndirectBindlessCountNV)(GLenum, GLenum, const void *, GLsizei, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY *MultiDrawElementsIndirectBindlessNV)(GLenum, GLenum, const void *, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY *MultiDrawElementsIndirectCountARB)(GLenum, GLenum, GLintptr, GLintptr, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawElementsIndirectEXT)(GLenum, GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawRangeElementArrayAPPLE)(GLenum, GLuint, GLuint, const GLint *, const GLsizei *, GLsizei);
    void (KHRONOS_APIENTRY *MultiModeDrawArraysIBM)(const GLenum *, const GLint *, const GLsizei *, GLsizei, GLint);
    void (KHRONOS_APIENTRY *MultiModeDrawElementsIBM)(const GLenum *, const GLsizei *, GLenum, const void *const*, GLsizei, GLint);
    void (KHRONOS_APIENTRY *MultiTexBufferEXT)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *MultiTexCoord1bOES)(GLenum, GLbyte);
    void (KHRONOS_APIENTRY *MultiTexCoord1bvOES)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY *MultiTexCoord1d)(GLenum, GLdouble);
    void (KHRONOS_APIENTRY *MultiTexCoord1dARB)(GLenum, GLdouble);
    void (KHRONOS_APIENTRY *MultiTexCoord1dv)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MultiTexCoord1dvARB)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MultiTexCoord1f)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *MultiTexCoord1fARB)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *MultiTexCoord1fv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MultiTexCoord1fvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MultiTexCoord1hNV)(GLenum, GLhalfNV);
    void (KHRONOS_APIENTRY *MultiTexCoord1hvNV)(GLenum, const GLhalfNV *);
    void (KHRONOS_APIENTRY *MultiTexCoord1i)(GLenum, GLint);
    void (KHRONOS_APIENTRY *MultiTexCoord1iARB)(GLenum, GLint);
    void (KHRONOS_APIENTRY *MultiTexCoord1iv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexCoord1ivARB)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexCoord1s)(GLenum, GLshort);
    void (KHRONOS_APIENTRY *MultiTexCoord1sARB)(GLenum, GLshort);
    void (KHRONOS_APIENTRY *MultiTexCoord1sv)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *MultiTexCoord1svARB)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *MultiTexCoord1xOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY *MultiTexCoord1xvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *MultiTexCoord2bOES)(GLenum, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *MultiTexCoord2bvOES)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY *MultiTexCoord2d)(GLenum, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MultiTexCoord2dARB)(GLenum, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MultiTexCoord2dv)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MultiTexCoord2dvARB)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MultiTexCoord2f)(GLenum, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *MultiTexCoord2fARB)(GLenum, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *MultiTexCoord2fv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MultiTexCoord2fvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MultiTexCoord2hNV)(GLenum, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *MultiTexCoord2hvNV)(GLenum, const GLhalfNV *);
    void (KHRONOS_APIENTRY *MultiTexCoord2i)(GLenum, GLint, GLint);
    void (KHRONOS_APIENTRY *MultiTexCoord2iARB)(GLenum, GLint, GLint);
    void (KHRONOS_APIENTRY *MultiTexCoord2iv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexCoord2ivARB)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexCoord2s)(GLenum, GLshort, GLshort);
    void (KHRONOS_APIENTRY *MultiTexCoord2sARB)(GLenum, GLshort, GLshort);
    void (KHRONOS_APIENTRY *MultiTexCoord2sv)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *MultiTexCoord2svARB)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *MultiTexCoord2xOES)(GLenum, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *MultiTexCoord2xvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *MultiTexCoord3bOES)(GLenum, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *MultiTexCoord3bvOES)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY *MultiTexCoord3d)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MultiTexCoord3dARB)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MultiTexCoord3dv)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MultiTexCoord3dvARB)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MultiTexCoord3f)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *MultiTexCoord3fARB)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *MultiTexCoord3fv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MultiTexCoord3fvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MultiTexCoord3hNV)(GLenum, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *MultiTexCoord3hvNV)(GLenum, const GLhalfNV *);
    void (KHRONOS_APIENTRY *MultiTexCoord3i)(GLenum, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *MultiTexCoord3iARB)(GLenum, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *MultiTexCoord3iv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexCoord3ivARB)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexCoord3s)(GLenum, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *MultiTexCoord3sARB)(GLenum, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *MultiTexCoord3sv)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *MultiTexCoord3svARB)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *MultiTexCoord3xOES)(GLenum, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *MultiTexCoord3xvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *MultiTexCoord4bOES)(GLenum, GLbyte, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *MultiTexCoord4bvOES)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY *MultiTexCoord4d)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MultiTexCoord4dARB)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MultiTexCoord4dv)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MultiTexCoord4dvARB)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MultiTexCoord4f)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *MultiTexCoord4fARB)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *MultiTexCoord4fv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MultiTexCoord4fvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MultiTexCoord4hNV)(GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *MultiTexCoord4hvNV)(GLenum, const GLhalfNV *);
    void (KHRONOS_APIENTRY *MultiTexCoord4i)(GLenum, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *MultiTexCoord4iARB)(GLenum, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *MultiTexCoord4iv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexCoord4ivARB)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexCoord4s)(GLenum, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *MultiTexCoord4sARB)(GLenum, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *MultiTexCoord4sv)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *MultiTexCoord4svARB)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *MultiTexCoord4x)(GLenum, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *MultiTexCoord4xOES)(GLenum, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *MultiTexCoord4xvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *MultiTexCoordP1ui)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *MultiTexCoordP1uiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *MultiTexCoordP2ui)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *MultiTexCoordP2uiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *MultiTexCoordP3ui)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *MultiTexCoordP3uiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *MultiTexCoordP4ui)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *MultiTexCoordP4uiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *MultiTexCoordPointerEXT)(GLenum, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *MultiTexEnvfEXT)(GLenum, GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *MultiTexEnvfvEXT)(GLenum, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MultiTexEnviEXT)(GLenum, GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *MultiTexEnvivEXT)(GLenum, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexGendEXT)(GLenum, GLenum, GLenum, GLdouble);
    void (KHRONOS_APIENTRY *MultiTexGendvEXT)(GLenum, GLenum, GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MultiTexGenfEXT)(GLenum, GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *MultiTexGenfvEXT)(GLenum, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MultiTexGeniEXT)(GLenum, GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *MultiTexGenivEXT)(GLenum, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexImage1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *MultiTexImage2DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *MultiTexImage3DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *MultiTexParameterIivEXT)(GLenum, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexParameterIuivEXT)(GLenum, GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *MultiTexParameterfEXT)(GLenum, GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *MultiTexParameterfvEXT)(GLenum, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MultiTexParameteriEXT)(GLenum, GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *MultiTexParameterivEXT)(GLenum, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexRenderbufferEXT)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *MultiTexSubImage1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *MultiTexSubImage2DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *MultiTexSubImage3DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *MulticastBarrierNV)(void);
    void (KHRONOS_APIENTRY *MulticastBlitFramebufferNV)(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY *MulticastBufferSubDataNV)(GLbitfield, GLuint, GLintptr, GLsizeiptr, const GLvoid *);
    void (KHRONOS_APIENTRY *MulticastCopyBufferSubDataNV)(GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *MulticastCopyImageSubDataNV)(GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *MulticastFramebufferSampleLocationsfvNV)(GLuint, GLuint, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *MulticastGetQueryObjecti64vNV)(GLuint, GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY *MulticastGetQueryObjectivNV)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *MulticastGetQueryObjectui64vNV)(GLuint, GLuint, GLenum, GLuint64 *);
    void (KHRONOS_APIENTRY *MulticastGetQueryObjectuivNV)(GLuint, GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *MulticastWaitSyncNV)(GLuint, GLbitfield);
    void (KHRONOS_APIENTRY *NamedBufferData)(GLuint, GLsizeiptr, const void *, GLenum);
    void (KHRONOS_APIENTRY *NamedBufferDataEXT)(GLuint, GLsizeiptr, const void *, GLenum);
    void (KHRONOS_APIENTRY *NamedBufferPageCommitmentARB)(GLuint, GLintptr, GLsizeiptr, GLboolean);
    void (KHRONOS_APIENTRY *NamedBufferPageCommitmentEXT)(GLuint, GLintptr, GLsizeiptr, GLboolean);
    void (KHRONOS_APIENTRY *NamedBufferStorage)(GLuint, GLsizeiptr, const void *, GLbitfield);
    void (KHRONOS_APIENTRY *NamedBufferStorageEXT)(GLuint, GLsizeiptr, const void *, GLbitfield);
    void (KHRONOS_APIENTRY *NamedBufferStorageExternalEXT)(GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield);
    void (KHRONOS_APIENTRY *NamedBufferStorageMemEXT)(GLuint, GLsizeiptr, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *NamedBufferSubData)(GLuint, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY *NamedBufferSubDataEXT)(GLuint, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY *NamedCopyBufferSubDataEXT)(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *NamedFramebufferDrawBuffer)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *NamedFramebufferDrawBuffers)(GLuint, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY *NamedFramebufferParameteri)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY *NamedFramebufferParameteriEXT)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY *NamedFramebufferReadBuffer)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *NamedFramebufferRenderbuffer)(GLuint, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *NamedFramebufferRenderbufferEXT)(GLuint, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *NamedFramebufferSampleLocationsfvARB)(GLuint, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *NamedFramebufferSampleLocationsfvNV)(GLuint, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *NamedFramebufferSamplePositionsfvAMD)(GLuint, GLuint, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *NamedFramebufferTexture)(GLuint, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *NamedFramebufferTexture1DEXT)(GLuint, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *NamedFramebufferTexture2DEXT)(GLuint, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *NamedFramebufferTexture3DEXT)(GLuint, GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *NamedFramebufferTextureEXT)(GLuint, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *NamedFramebufferTextureFaceEXT)(GLuint, GLenum, GLuint, GLint, GLenum);
    void (KHRONOS_APIENTRY *NamedFramebufferTextureLayer)(GLuint, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *NamedFramebufferTextureLayerEXT)(GLuint, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *NamedProgramLocalParameter4dEXT)(GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *NamedProgramLocalParameter4dvEXT)(GLuint, GLenum, GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *NamedProgramLocalParameter4fEXT)(GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *NamedProgramLocalParameter4fvEXT)(GLuint, GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *NamedProgramLocalParameterI4iEXT)(GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *NamedProgramLocalParameterI4ivEXT)(GLuint, GLenum, GLuint, const GLint *);
    void (KHRONOS_APIENTRY *NamedProgramLocalParameterI4uiEXT)(GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *NamedProgramLocalParameterI4uivEXT)(GLuint, GLenum, GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *NamedProgramLocalParameters4fvEXT)(GLuint, GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *NamedProgramLocalParametersI4ivEXT)(GLuint, GLenum, GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *NamedProgramLocalParametersI4uivEXT)(GLuint, GLenum, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *NamedProgramStringEXT)(GLuint, GLenum, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *NamedRenderbufferStorage)(GLuint, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *NamedRenderbufferStorageEXT)(GLuint, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *NamedRenderbufferStorageMultisample)(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *NamedRenderbufferStorageMultisampleCoverageEXT)(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *NamedRenderbufferStorageMultisampleEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *NamedStringARB)(GLenum, GLint, const GLchar *, GLint, const GLchar *);
    GLuint(KHRONOS_APIENTRY *NewBufferRegion)(GLenum);
    void (KHRONOS_APIENTRY *NewList)(GLuint, GLenum);
    GLuint(KHRONOS_APIENTRY *NewObjectBufferATI)(GLsizei, const void *, GLenum);
    void (KHRONOS_APIENTRY *Normal3b)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *Normal3bv)(const GLbyte *);
    void (KHRONOS_APIENTRY *Normal3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Normal3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *Normal3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Normal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Normal3fVertex3fvSUN)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *Normal3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *Normal3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *Normal3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *Normal3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Normal3iv)(const GLint *);
    void (KHRONOS_APIENTRY *Normal3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *Normal3sv)(const GLshort *);
    void (KHRONOS_APIENTRY *Normal3x)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *Normal3xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *Normal3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *NormalFormatNV)(GLenum, GLsizei);
    void (KHRONOS_APIENTRY *NormalP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *NormalP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *NormalPointer)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *NormalPointerEXT)(GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY *NormalPointerListIBM)(GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY *NormalPointervINTEL)(GLenum, const void **);
    void (KHRONOS_APIENTRY *NormalStream3bATI)(GLenum, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *NormalStream3bvATI)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY *NormalStream3dATI)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *NormalStream3dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *NormalStream3fATI)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *NormalStream3fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *NormalStream3iATI)(GLenum, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *NormalStream3ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *NormalStream3sATI)(GLenum, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *NormalStream3svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *ObjectLabel)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *ObjectLabelKHR)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *ObjectPtrLabel)(const void *, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *ObjectPtrLabelKHR)(const void *, GLsizei, const GLchar *);
    GLenum(KHRONOS_APIENTRY *ObjectPurgeableAPPLE)(GLenum, GLuint, GLenum);
    GLenum(KHRONOS_APIENTRY *ObjectUnpurgeableAPPLE)(GLenum, GLuint, GLenum);
    void (KHRONOS_APIENTRY *Ortho)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Orthof)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *OrthofOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Orthox)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *OrthoxOES)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *PNTrianglesfATI)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *PNTrianglesiATI)(GLenum, GLint);
    void (KHRONOS_APIENTRY *PassTexCoordATI)(GLuint, GLuint, GLenum);
    void (KHRONOS_APIENTRY *PassThrough)(GLfloat);
    void (KHRONOS_APIENTRY *PassThroughxOES)(GLfixed);
    void (KHRONOS_APIENTRY *PatchParameterfv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *PatchParameteri)(GLenum, GLint);
    void (KHRONOS_APIENTRY *PatchParameteriEXT)(GLenum, GLint);
    void (KHRONOS_APIENTRY *PatchParameteriOES)(GLenum, GLint);
    void (KHRONOS_APIENTRY *PathColorGenNV)(GLenum, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *PathCommandsNV)(GLuint, GLsizei, const GLubyte *, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY *PathCoordsNV)(GLuint, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY *PathCoverDepthFuncNV)(GLenum);
    void (KHRONOS_APIENTRY *PathDashArrayNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *PathFogGenNV)(GLenum);
    GLenum(KHRONOS_APIENTRY *PathGlyphIndexArrayNV)(GLuint, GLenum, const void *, GLbitfield, GLuint, GLsizei, GLuint, GLfloat);
    GLenum(KHRONOS_APIENTRY *PathGlyphIndexRangeNV)(GLenum, const void *, GLbitfield, GLuint, GLfloat, GLuint[2]);
    void (KHRONOS_APIENTRY *PathGlyphRangeNV)(GLuint, GLenum, const void *, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat);
    void (KHRONOS_APIENTRY *PathGlyphsNV)(GLuint, GLenum, const void *, GLbitfield, GLsizei, GLenum, const void *, GLenum, GLuint, GLfloat);
    GLenum(KHRONOS_APIENTRY *PathMemoryGlyphIndexArrayNV)(GLuint, GLenum, GLsizeiptr, const void *, GLsizei, GLuint, GLsizei, GLuint, GLfloat);
    void (KHRONOS_APIENTRY *PathParameterfNV)(GLuint, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *PathParameterfvNV)(GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *PathParameteriNV)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY *PathParameterivNV)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *PathStencilDepthOffsetNV)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *PathStencilFuncNV)(GLenum, GLint, GLuint);
    void (KHRONOS_APIENTRY *PathStringNV)(GLuint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *PathSubCommandsNV)(GLuint, GLsizei, GLsizei, GLsizei, const GLubyte *, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY *PathSubCoordsNV)(GLuint, GLsizei, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY *PathTexGenNV)(GLenum, GLenum, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY *PauseTransformFeedback)(void);
    void (KHRONOS_APIENTRY *PauseTransformFeedbackNV)(void);
    void (KHRONOS_APIENTRY *PixelDataRangeNV)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *PixelMapfv)(GLenum, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *PixelMapuiv)(GLenum, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *PixelMapusv)(GLenum, GLsizei, const GLushort *);
    void (KHRONOS_APIENTRY *PixelMapx)(GLenum, GLint, const GLfixed *);
    void (KHRONOS_APIENTRY *PixelStoref)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *PixelStorei)(GLenum, GLint);
    void (KHRONOS_APIENTRY *PixelStorex)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY *PixelTexGenParameterfSGIS)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *PixelTexGenParameterfvSGIS)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *PixelTexGenParameteriSGIS)(GLenum, GLint);
    void (KHRONOS_APIENTRY *PixelTexGenParameterivSGIS)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *PixelTexGenSGIX)(GLenum);
    void (KHRONOS_APIENTRY *PixelTransferf)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *PixelTransferi)(GLenum, GLint);
    void (KHRONOS_APIENTRY *PixelTransferxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY *PixelTransformParameterfEXT)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *PixelTransformParameterfvEXT)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *PixelTransformParameteriEXT)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *PixelTransformParameterivEXT)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *PixelZoom)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *PixelZoomxOES)(GLfixed, GLfixed);
    GLboolean(KHRONOS_APIENTRY *PointAlongPathNV)(GLuint, GLsizei, GLsizei, GLfloat, GLfloat *, GLfloat *, GLfloat *, GLfloat *);
    void (KHRONOS_APIENTRY *PointParameterf)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *PointParameterfARB)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *PointParameterfEXT)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *PointParameterfSGIS)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *PointParameterfv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *PointParameterfvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *PointParameterfvEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *PointParameterfvSGIS)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *PointParameteri)(GLenum, GLint);
    void (KHRONOS_APIENTRY *PointParameteriNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY *PointParameteriv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *PointParameterivNV)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *PointParameterx)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY *PointParameterxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY *PointParameterxv)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *PointParameterxvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *PointSize)(GLfloat);
    void (KHRONOS_APIENTRY *PointSizePointerOES)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *PointSizex)(GLfixed);
    void (KHRONOS_APIENTRY *PointSizexOES)(GLfixed);
    GLint(KHRONOS_APIENTRY *PollAsyncSGIX)(GLuint *);
    GLint(KHRONOS_APIENTRY *PollInstrumentsSGIX)(GLint *);
    void (KHRONOS_APIENTRY *PolygonMode)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *PolygonModeNV)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *PolygonOffset)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *PolygonOffsetClampEXT)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *PolygonOffsetEXT)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *PolygonOffsetx)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *PolygonOffsetxOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *PolygonStipple)(const GLubyte *);
    void (KHRONOS_APIENTRY *PopAttrib)(void);
    void (KHRONOS_APIENTRY *PopClientAttrib)(void);
    void (KHRONOS_APIENTRY *PopDebugGroup)(void);
    void (KHRONOS_APIENTRY *PopDebugGroupKHR)(void);
    void (KHRONOS_APIENTRY *PopGroupMarkerEXT)(void);
    void (KHRONOS_APIENTRY *PopMatrix)(void);
    void (KHRONOS_APIENTRY *PopName)(void);
    void (KHRONOS_APIENTRY *PresentFrameDualFillNV)(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint);
    void (KHRONOS_APIENTRY *PresentFrameKeyedNV)(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY *PrimitiveBoundingBox)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *PrimitiveBoundingBoxARB)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *PrimitiveBoundingBoxEXT)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *PrimitiveBoundingBoxOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *PrimitiveRestartIndex)(GLuint);
    void (KHRONOS_APIENTRY *PrimitiveRestartIndexNV)(GLuint);
    void (KHRONOS_APIENTRY *PrimitiveRestartNV)(void);
    void (KHRONOS_APIENTRY *PrioritizeTextures)(GLsizei, const GLuint *, const GLfloat *);
    void (KHRONOS_APIENTRY *PrioritizeTexturesEXT)(GLsizei, const GLuint *, const GLclampf *);
    void (KHRONOS_APIENTRY *PrioritizeTexturesxOES)(GLsizei, const GLuint *, const GLfixed *);
    void (KHRONOS_APIENTRY *ProgramBinary)(GLuint, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY *ProgramBinaryOES)(GLuint, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY *ProgramBufferParametersIivNV)(GLenum, GLuint, GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ProgramBufferParametersIuivNV)(GLenum, GLuint, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramBufferParametersfvNV)(GLenum, GLuint, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramEnvParameter4dARB)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *ProgramEnvParameter4dvARB)(GLenum, GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramEnvParameter4fARB)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ProgramEnvParameter4fvARB)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramEnvParameterI4iNV)(GLenum, GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *ProgramEnvParameterI4ivNV)(GLenum, GLuint, const GLint *);
    void (KHRONOS_APIENTRY *ProgramEnvParameterI4uiNV)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ProgramEnvParameterI4uivNV)(GLenum, GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramEnvParameters4fvEXT)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramEnvParametersI4ivNV)(GLenum, GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ProgramEnvParametersI4uivNV)(GLenum, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramLocalParameter4dARB)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *ProgramLocalParameter4dvARB)(GLenum, GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramLocalParameter4fARB)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ProgramLocalParameter4fvARB)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramLocalParameterI4iNV)(GLenum, GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *ProgramLocalParameterI4ivNV)(GLenum, GLuint, const GLint *);
    void (KHRONOS_APIENTRY *ProgramLocalParameterI4uiNV)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ProgramLocalParameterI4uivNV)(GLenum, GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramLocalParameters4fvEXT)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramLocalParametersI4ivNV)(GLenum, GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ProgramLocalParametersI4uivNV)(GLenum, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramNamedParameter4dNV)(GLuint, GLsizei, const GLubyte *, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *ProgramNamedParameter4dvNV)(GLuint, GLsizei, const GLubyte *, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramNamedParameter4fNV)(GLuint, GLsizei, const GLubyte *, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ProgramNamedParameter4fvNV)(GLuint, GLsizei, const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramParameter4dNV)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *ProgramParameter4dvNV)(GLenum, GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramParameter4fNV)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ProgramParameter4fvNV)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramParameteri)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY *ProgramParameteriARB)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY *ProgramParameteriEXT)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY *ProgramParameters4dvNV)(GLenum, GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramParameters4fvNV)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramPathFragmentInputGenNV)(GLuint, GLint, GLenum, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramStringARB)(GLenum, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *ProgramSubroutineParametersuivNV)(GLenum, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramUniform1d)(GLuint, GLint, GLdouble);
    void (KHRONOS_APIENTRY *ProgramUniform1dEXT)(GLuint, GLint, GLdouble);
    void (KHRONOS_APIENTRY *ProgramUniform1dv)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniform1dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniform1f)(GLuint, GLint, GLfloat);
    void (KHRONOS_APIENTRY *ProgramUniform1fEXT)(GLuint, GLint, GLfloat);
    void (KHRONOS_APIENTRY *ProgramUniform1fv)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniform1fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniform1i)(GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *ProgramUniform1i64ARB)(GLuint, GLint, GLint64);
    void (KHRONOS_APIENTRY *ProgramUniform1i64NV)(GLuint, GLint, GLint64EXT);
    void (KHRONOS_APIENTRY *ProgramUniform1i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY *ProgramUniform1i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY *ProgramUniform1iEXT)(GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *ProgramUniform1iv)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ProgramUniform1ivEXT)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ProgramUniform1ui)(GLuint, GLint, GLuint);
    void (KHRONOS_APIENTRY *ProgramUniform1ui64ARB)(GLuint, GLint, GLuint64);
    void (KHRONOS_APIENTRY *ProgramUniform1ui64NV)(GLuint, GLint, GLuint64EXT);
    void (KHRONOS_APIENTRY *ProgramUniform1ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *ProgramUniform1ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *ProgramUniform1uiEXT)(GLuint, GLint, GLuint);
    void (KHRONOS_APIENTRY *ProgramUniform1uiv)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramUniform1uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramUniform2d)(GLuint, GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *ProgramUniform2dEXT)(GLuint, GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *ProgramUniform2dv)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniform2dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniform2f)(GLuint, GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ProgramUniform2fEXT)(GLuint, GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ProgramUniform2fv)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniform2fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniform2i)(GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *ProgramUniform2i64ARB)(GLuint, GLint, GLint64, GLint64);
    void (KHRONOS_APIENTRY *ProgramUniform2i64NV)(GLuint, GLint, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY *ProgramUniform2i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY *ProgramUniform2i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY *ProgramUniform2iEXT)(GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *ProgramUniform2iv)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ProgramUniform2ivEXT)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ProgramUniform2ui)(GLuint, GLint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ProgramUniform2ui64ARB)(GLuint, GLint, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY *ProgramUniform2ui64NV)(GLuint, GLint, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY *ProgramUniform2ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *ProgramUniform2ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *ProgramUniform2uiEXT)(GLuint, GLint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ProgramUniform2uiv)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramUniform2uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramUniform3d)(GLuint, GLint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *ProgramUniform3dEXT)(GLuint, GLint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *ProgramUniform3dv)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniform3dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniform3f)(GLuint, GLint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ProgramUniform3fEXT)(GLuint, GLint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ProgramUniform3fv)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniform3fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniform3i)(GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *ProgramUniform3i64ARB)(GLuint, GLint, GLint64, GLint64, GLint64);
    void (KHRONOS_APIENTRY *ProgramUniform3i64NV)(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY *ProgramUniform3i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY *ProgramUniform3i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY *ProgramUniform3iEXT)(GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *ProgramUniform3iv)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ProgramUniform3ivEXT)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ProgramUniform3ui)(GLuint, GLint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ProgramUniform3ui64ARB)(GLuint, GLint, GLuint64, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY *ProgramUniform3ui64NV)(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY *ProgramUniform3ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *ProgramUniform3ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *ProgramUniform3uiEXT)(GLuint, GLint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ProgramUniform3uiv)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramUniform3uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramUniform4d)(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *ProgramUniform4dEXT)(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *ProgramUniform4dv)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniform4dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniform4f)(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ProgramUniform4fEXT)(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ProgramUniform4fv)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniform4fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniform4i)(GLuint, GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *ProgramUniform4i64ARB)(GLuint, GLint, GLint64, GLint64, GLint64, GLint64);
    void (KHRONOS_APIENTRY *ProgramUniform4i64NV)(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY *ProgramUniform4i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY *ProgramUniform4i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY *ProgramUniform4iEXT)(GLuint, GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *ProgramUniform4iv)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ProgramUniform4ivEXT)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ProgramUniform4ui)(GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ProgramUniform4ui64ARB)(GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY *ProgramUniform4ui64NV)(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY *ProgramUniform4ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *ProgramUniform4ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *ProgramUniform4uiEXT)(GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ProgramUniform4uiv)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramUniform4uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramUniformHandleui64ARB)(GLuint, GLint, GLuint64);
    void (KHRONOS_APIENTRY *ProgramUniformHandleui64IMG)(GLuint, GLint, GLuint64);
    void (KHRONOS_APIENTRY *ProgramUniformHandleui64NV)(GLuint, GLint, GLuint64);
    void (KHRONOS_APIENTRY *ProgramUniformHandleui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *ProgramUniformHandleui64vIMG)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *ProgramUniformHandleui64vNV)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2x3dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2x3dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2x3fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2x3fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2x4dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2x4dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2x4fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2x4fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3x2dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3x2dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3x2fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3x2fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3x4dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3x4dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3x4fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3x4fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4x2dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4x2dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4x2fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4x2fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4x3dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4x3dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4x3fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4x3fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformui64NV)(GLuint, GLint, GLuint64EXT);
    void (KHRONOS_APIENTRY *ProgramUniformui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *ProgramVertexLimitNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY *ProvokingVertex)(GLenum);
    void (KHRONOS_APIENTRY *ProvokingVertexEXT)(GLenum);
    void (KHRONOS_APIENTRY *PushAttrib)(GLbitfield);
    void (KHRONOS_APIENTRY *PushClientAttrib)(GLbitfield);
    void (KHRONOS_APIENTRY *PushClientAttribDefaultEXT)(GLbitfield);
    void (KHRONOS_APIENTRY *PushDebugGroup)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *PushDebugGroupKHR)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *PushGroupMarkerEXT)(GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *PushMatrix)(void);
    void (KHRONOS_APIENTRY *PushName)(GLuint);
    void (KHRONOS_APIENTRY *QueryCounter)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *QueryCounterEXT)(GLuint, GLenum);
    GLbitfield(KHRONOS_APIENTRY *QueryMatrixxOES)(GLfixed *, GLint *);
    void (KHRONOS_APIENTRY *QueryObjectParameteruiAMD)(GLenum, GLuint, GLenum, GLuint);
    void (KHRONOS_APIENTRY *RasterPos2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *RasterPos2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *RasterPos2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *RasterPos2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *RasterPos2i)(GLint, GLint);
    void (KHRONOS_APIENTRY *RasterPos2iv)(const GLint *);
    void (KHRONOS_APIENTRY *RasterPos2s)(GLshort, GLshort);
    void (KHRONOS_APIENTRY *RasterPos2sv)(const GLshort *);
    void (KHRONOS_APIENTRY *RasterPos2xOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *RasterPos2xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *RasterPos3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *RasterPos3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *RasterPos3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *RasterPos3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *RasterPos3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *RasterPos3iv)(const GLint *);
    void (KHRONOS_APIENTRY *RasterPos3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *RasterPos3sv)(const GLshort *);
    void (KHRONOS_APIENTRY *RasterPos3xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *RasterPos3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *RasterPos4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *RasterPos4dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *RasterPos4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *RasterPos4fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *RasterPos4i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *RasterPos4iv)(const GLint *);
    void (KHRONOS_APIENTRY *RasterPos4s)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *RasterPos4sv)(const GLshort *);
    void (KHRONOS_APIENTRY *RasterPos4xOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *RasterPos4xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *RasterSamplesEXT)(GLuint, GLboolean);
    void (KHRONOS_APIENTRY *ReadBuffer)(GLenum);
    void (KHRONOS_APIENTRY *ReadBufferIndexedEXT)(GLenum, GLint);
    void (KHRONOS_APIENTRY *ReadBufferNV)(GLenum);
    void (KHRONOS_APIENTRY *ReadBufferRegion)(GLuint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *ReadInstrumentsSGIX)(GLint);
    void (KHRONOS_APIENTRY *ReadPixels)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *ReadnPixels)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *ReadnPixelsARB)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *ReadnPixelsEXT)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *ReadnPixelsKHR)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *Rectd)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Rectdv)(const GLdouble *, const GLdouble *);
    void (KHRONOS_APIENTRY *Rectf)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Rectfv)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *Recti)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Rectiv)(const GLint *, const GLint *);
    void (KHRONOS_APIENTRY *Rects)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *Rectsv)(const GLshort *, const GLshort *);
    void (KHRONOS_APIENTRY *RectxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *RectxvOES)(const GLfixed *, const GLfixed *);
    void (KHRONOS_APIENTRY *ReferencePlaneSGIX)(const GLdouble *);
    GLboolean(KHRONOS_APIENTRY *ReleaseKeyedMutexWin32EXT)(GLuint, GLuint64);
    void (KHRONOS_APIENTRY *ReleaseShaderCompiler)(void);
    void (KHRONOS_APIENTRY *RenderGpuMaskNV)(GLbitfield);
    GLint(KHRONOS_APIENTRY *RenderMode)(GLenum);
    void (KHRONOS_APIENTRY *RenderbufferStorage)(GLenum, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *RenderbufferStorageEXT)(GLenum, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *RenderbufferStorageMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *RenderbufferStorageMultisampleANGLE)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *RenderbufferStorageMultisampleAPPLE)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *RenderbufferStorageMultisampleCoverageNV)(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *RenderbufferStorageMultisampleEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *RenderbufferStorageMultisampleIMG)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *RenderbufferStorageMultisampleNV)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *RenderbufferStorageOES)(GLenum, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *ReplacementCodePointerSUN)(GLenum, GLsizei, const void **);
    void (KHRONOS_APIENTRY *ReplacementCodeubSUN)(GLubyte);
    void (KHRONOS_APIENTRY *ReplacementCodeubvSUN)(const GLubyte *);
    void (KHRONOS_APIENTRY *ReplacementCodeuiColor3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ReplacementCodeuiColor3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *ReplacementCodeuiColor4fNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ReplacementCodeuiColor4fNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *ReplacementCodeuiColor4ubVertex3fSUN)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ReplacementCodeuiColor4ubVertex3fvSUN)(const GLuint *, const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY *ReplacementCodeuiNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ReplacementCodeuiNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *ReplacementCodeuiSUN)(GLuint);
    void (KHRONOS_APIENTRY *ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *ReplacementCodeuiTexCoord2fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ReplacementCodeuiTexCoord2fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *ReplacementCodeuiVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ReplacementCodeuiVertex3fvSUN)(const GLuint *, const GLfloat *);
    void (KHRONOS_APIENTRY *ReplacementCodeuivSUN)(const GLuint *);
    void (KHRONOS_APIENTRY *ReplacementCodeusSUN)(GLushort);
    void (KHRONOS_APIENTRY *ReplacementCodeusvSUN)(const GLushort *);
    void (KHRONOS_APIENTRY *RequestResidentProgramsNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ResetHistogram)(GLenum);
    void (KHRONOS_APIENTRY *ResetHistogramEXT)(GLenum);
    void (KHRONOS_APIENTRY *ResetMinmax)(GLenum);
    void (KHRONOS_APIENTRY *ResetMinmaxEXT)(GLenum);
    void (KHRONOS_APIENTRY *ResizeBuffersMESA)(void);
    void (KHRONOS_APIENTRY *ResolveDepthValuesNV)(void);
    void (KHRONOS_APIENTRY *ResolveMultisampleFramebufferAPPLE)(void);
    void (KHRONOS_APIENTRY *ResumeTransformFeedback)(void);
    void (KHRONOS_APIENTRY *ResumeTransformFeedbackNV)(void);
    void (KHRONOS_APIENTRY *Rotated)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Rotatef)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Rotatex)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *RotatexOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *SampleCoverage)(GLfloat, GLboolean);
    void (KHRONOS_APIENTRY *SampleCoverageARB)(GLfloat, GLboolean);
    void (KHRONOS_APIENTRY *SampleCoveragex)(GLclampx, GLboolean);
    void (KHRONOS_APIENTRY *SampleCoveragexOES)(GLclampx, GLboolean);
    void (KHRONOS_APIENTRY *SampleMapATI)(GLuint, GLuint, GLenum);
    void (KHRONOS_APIENTRY *SampleMaskEXT)(GLclampf, GLboolean);
    void (KHRONOS_APIENTRY *SampleMaskIndexedNV)(GLuint, GLbitfield);
    void (KHRONOS_APIENTRY *SampleMaskSGIS)(GLclampf, GLboolean);
    void (KHRONOS_APIENTRY *SampleMaski)(GLuint, GLbitfield);
    void (KHRONOS_APIENTRY *SamplePatternEXT)(GLenum);
    void (KHRONOS_APIENTRY *SamplePatternSGIS)(GLenum);
    void (KHRONOS_APIENTRY *SamplerParameterIiv)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *SamplerParameterIivEXT)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *SamplerParameterIivOES)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *SamplerParameterIuiv)(GLuint, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *SamplerParameterIuivEXT)(GLuint, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *SamplerParameterIuivOES)(GLuint, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *SamplerParameterf)(GLuint, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *SamplerParameterfv)(GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *SamplerParameteri)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY *SamplerParameteriv)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *Scaled)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Scalef)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Scalex)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *ScalexOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *Scissor)(GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *ScissorArrayv)(GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ScissorArrayvNV)(GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ScissorArrayvOES)(GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ScissorIndexed)(GLuint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *ScissorIndexedNV)(GLuint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *ScissorIndexedOES)(GLuint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *ScissorIndexedv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *ScissorIndexedvNV)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *ScissorIndexedvOES)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *SecondaryColor3b)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *SecondaryColor3bEXT)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *SecondaryColor3bv)(const GLbyte *);
    void (KHRONOS_APIENTRY *SecondaryColor3bvEXT)(const GLbyte *);
    void (KHRONOS_APIENTRY *SecondaryColor3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *SecondaryColor3dEXT)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *SecondaryColor3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *SecondaryColor3dvEXT)(const GLdouble *);
    void (KHRONOS_APIENTRY *SecondaryColor3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *SecondaryColor3fEXT)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *SecondaryColor3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *SecondaryColor3fvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY *SecondaryColor3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *SecondaryColor3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *SecondaryColor3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *SecondaryColor3iEXT)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *SecondaryColor3iv)(const GLint *);
    void (KHRONOS_APIENTRY *SecondaryColor3ivEXT)(const GLint *);
    void (KHRONOS_APIENTRY *SecondaryColor3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *SecondaryColor3sEXT)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *SecondaryColor3sv)(const GLshort *);
    void (KHRONOS_APIENTRY *SecondaryColor3svEXT)(const GLshort *);
    void (KHRONOS_APIENTRY *SecondaryColor3ub)(GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY *SecondaryColor3ubEXT)(GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY *SecondaryColor3ubv)(const GLubyte *);
    void (KHRONOS_APIENTRY *SecondaryColor3ubvEXT)(const GLubyte *);
    void (KHRONOS_APIENTRY *SecondaryColor3ui)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *SecondaryColor3uiEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *SecondaryColor3uiv)(const GLuint *);
    void (KHRONOS_APIENTRY *SecondaryColor3uivEXT)(const GLuint *);
    void (KHRONOS_APIENTRY *SecondaryColor3us)(GLushort, GLushort, GLushort);
    void (KHRONOS_APIENTRY *SecondaryColor3usEXT)(GLushort, GLushort, GLushort);
    void (KHRONOS_APIENTRY *SecondaryColor3usv)(const GLushort *);
    void (KHRONOS_APIENTRY *SecondaryColor3usvEXT)(const GLushort *);
    void (KHRONOS_APIENTRY *SecondaryColorFormatNV)(GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY *SecondaryColorP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *SecondaryColorP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *SecondaryColorPointer)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *SecondaryColorPointerEXT)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *SecondaryColorPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY *SelectBuffer)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *SelectPerfMonitorCountersAMD)(GLuint, GLboolean, GLuint, GLint, GLuint *);
    void (KHRONOS_APIENTRY *SemaphoreParameterui64vEXT)(GLuint, GLenum, const GLuint64 *);
    void (KHRONOS_APIENTRY *SeparableFilter2D)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *, const void *);
    void (KHRONOS_APIENTRY *SeparableFilter2DEXT)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *, const void *);
    void (KHRONOS_APIENTRY *SetFenceAPPLE)(GLuint);
    void (KHRONOS_APIENTRY *SetFenceNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *SetFragmentShaderConstantATI)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *SetInvariantEXT)(GLuint, GLenum, const void *);
    void (KHRONOS_APIENTRY *SetLocalConstantEXT)(GLuint, GLenum, const void *);
    void (KHRONOS_APIENTRY *SetMultisamplefvAMD)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *ShadeModel)(GLenum);
    void (KHRONOS_APIENTRY *ShaderBinary)(GLsizei, const GLuint *, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY *ShaderOp1EXT)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ShaderOp2EXT)(GLenum, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ShaderOp3EXT)(GLenum, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ShaderSource)(GLuint, GLsizei, const GLchar *const*, const GLint *);
    void (KHRONOS_APIENTRY *ShaderSourceARB)(GLhandleARB, GLsizei, const GLcharARB **, const GLint *);
    void (KHRONOS_APIENTRY *ShaderStorageBlockBinding)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *SharpenTexFuncSGIS)(GLenum, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *SignalSemaphoreEXT)(GLuint, GLuint, const GLuint *, GLuint, const GLuint *, const GLenum *);
    void (KHRONOS_APIENTRY *SignalVkFenceNV)(GLuint64);
    void (KHRONOS_APIENTRY *SignalVkSemaphoreNV)(GLuint64);
    void (KHRONOS_APIENTRY *SpecializeShaderARB)(GLuint, const GLchar *, GLuint, const GLuint *, const GLuint *);
    void (KHRONOS_APIENTRY *SpriteParameterfSGIX)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *SpriteParameterfvSGIX)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *SpriteParameteriSGIX)(GLenum, GLint);
    void (KHRONOS_APIENTRY *SpriteParameterivSGIX)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *StartInstrumentsSGIX)(void);
    void (KHRONOS_APIENTRY *StartTilingQCOM)(GLuint, GLuint, GLuint, GLuint, GLbitfield);
    void (KHRONOS_APIENTRY *StateCaptureNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *StencilClearTagEXT)(GLsizei, GLuint);
    void (KHRONOS_APIENTRY *StencilFillPathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *StencilFillPathNV)(GLuint, GLenum, GLuint);
    void (KHRONOS_APIENTRY *StencilFunc)(GLenum, GLint, GLuint);
    void (KHRONOS_APIENTRY *StencilFuncSeparate)(GLenum, GLenum, GLint, GLuint);
    void (KHRONOS_APIENTRY *StencilFuncSeparateATI)(GLenum, GLenum, GLint, GLuint);
    void (KHRONOS_APIENTRY *StencilMask)(GLuint);
    void (KHRONOS_APIENTRY *StencilMaskSeparate)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *StencilOp)(GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *StencilOpSeparate)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *StencilOpSeparateATI)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *StencilOpValueAMD)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *StencilStrokePathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLint, GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *StencilStrokePathNV)(GLuint, GLint, GLuint);
    void (KHRONOS_APIENTRY *StencilThenCoverFillPathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *StencilThenCoverFillPathNV)(GLuint, GLenum, GLuint, GLenum);
    void (KHRONOS_APIENTRY *StencilThenCoverStrokePathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLint, GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *StencilThenCoverStrokePathNV)(GLuint, GLint, GLuint, GLenum);
    void (KHRONOS_APIENTRY *StopInstrumentsSGIX)(GLint);
    void (KHRONOS_APIENTRY *StringMarkerGREMEDY)(GLsizei, const void *);
    void (KHRONOS_APIENTRY *SubpixelPrecisionBiasNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *SwizzleEXT)(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *SyncTextureINTEL)(GLuint);
    void (KHRONOS_APIENTRY *TagSampleBufferSGIX)(void);
    void (KHRONOS_APIENTRY *Tangent3bEXT)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *Tangent3bvEXT)(const GLbyte *);
    void (KHRONOS_APIENTRY *Tangent3dEXT)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Tangent3dvEXT)(const GLdouble *);
    void (KHRONOS_APIENTRY *Tangent3fEXT)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Tangent3fvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY *Tangent3iEXT)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Tangent3ivEXT)(const GLint *);
    void (KHRONOS_APIENTRY *Tangent3sEXT)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *Tangent3svEXT)(const GLshort *);
    void (KHRONOS_APIENTRY *TangentPointerEXT)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *TbufferMask3DFX)(GLuint);
    void (KHRONOS_APIENTRY *TessellationFactorAMD)(GLfloat);
    void (KHRONOS_APIENTRY *TessellationModeAMD)(GLenum);
    GLboolean(KHRONOS_APIENTRY *TestFenceAPPLE)(GLuint);
    GLboolean(KHRONOS_APIENTRY *TestFenceNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY *TestObjectAPPLE)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *TexBuffer)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *TexBufferARB)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *TexBufferEXT)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *TexBufferOES)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *TexBufferRange)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *TexBufferRangeEXT)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *TexBufferRangeOES)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *TexBumpParameterfvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *TexBumpParameterivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TexCoord1bOES)(GLbyte);
    void (KHRONOS_APIENTRY *TexCoord1bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY *TexCoord1d)(GLdouble);
    void (KHRONOS_APIENTRY *TexCoord1dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *TexCoord1f)(GLfloat);
    void (KHRONOS_APIENTRY *TexCoord1fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *TexCoord1hNV)(GLhalfNV);
    void (KHRONOS_APIENTRY *TexCoord1hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *TexCoord1i)(GLint);
    void (KHRONOS_APIENTRY *TexCoord1iv)(const GLint *);
    void (KHRONOS_APIENTRY *TexCoord1s)(GLshort);
    void (KHRONOS_APIENTRY *TexCoord1sv)(const GLshort *);
    void (KHRONOS_APIENTRY *TexCoord1xOES)(GLfixed);
    void (KHRONOS_APIENTRY *TexCoord1xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *TexCoord2bOES)(GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *TexCoord2bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY *TexCoord2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *TexCoord2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *TexCoord2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *TexCoord2fColor3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *TexCoord2fColor3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *TexCoord2fColor4fNormal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *TexCoord2fColor4fNormal3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *TexCoord2fColor4ubVertex3fSUN)(GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *TexCoord2fColor4ubVertex3fvSUN)(const GLfloat *, const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY *TexCoord2fNormal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *TexCoord2fNormal3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *TexCoord2fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *TexCoord2fVertex3fvSUN)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *TexCoord2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *TexCoord2hNV)(GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *TexCoord2hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *TexCoord2i)(GLint, GLint);
    void (KHRONOS_APIENTRY *TexCoord2iv)(const GLint *);
    void (KHRONOS_APIENTRY *TexCoord2s)(GLshort, GLshort);
    void (KHRONOS_APIENTRY *TexCoord2sv)(const GLshort *);
    void (KHRONOS_APIENTRY *TexCoord2xOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *TexCoord2xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *TexCoord3bOES)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *TexCoord3bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY *TexCoord3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *TexCoord3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *TexCoord3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *TexCoord3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *TexCoord3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *TexCoord3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *TexCoord3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *TexCoord3iv)(const GLint *);
    void (KHRONOS_APIENTRY *TexCoord3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *TexCoord3sv)(const GLshort *);
    void (KHRONOS_APIENTRY *TexCoord3xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *TexCoord3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *TexCoord4bOES)(GLbyte, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *TexCoord4bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY *TexCoord4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *TexCoord4dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *TexCoord4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *TexCoord4fColor4fNormal3fVertex4fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *TexCoord4fColor4fNormal3fVertex4fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *TexCoord4fVertex4fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *TexCoord4fVertex4fvSUN)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *TexCoord4fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *TexCoord4hNV)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *TexCoord4hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *TexCoord4i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *TexCoord4iv)(const GLint *);
    void (KHRONOS_APIENTRY *TexCoord4s)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *TexCoord4sv)(const GLshort *);
    void (KHRONOS_APIENTRY *TexCoord4xOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *TexCoord4xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *TexCoordFormatNV)(GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY *TexCoordP1ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *TexCoordP1uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *TexCoordP2ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *TexCoordP2uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *TexCoordP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *TexCoordP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *TexCoordP4ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *TexCoordP4uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *TexCoordPointer)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *TexCoordPointerEXT)(GLint, GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY *TexCoordPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY *TexCoordPointervINTEL)(GLint, GLenum, const void **);
    void (KHRONOS_APIENTRY *TexEnvf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *TexEnvfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *TexEnvi)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *TexEnviv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TexEnvx)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY *TexEnvxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY *TexEnvxv)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *TexEnvxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *TexFilterFuncSGIS)(GLenum, GLenum, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *TexGend)(GLenum, GLenum, GLdouble);
    void (KHRONOS_APIENTRY *TexGendv)(GLenum, GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *TexGenf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *TexGenfOES)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *TexGenfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *TexGenfvOES)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *TexGeni)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *TexGeniOES)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *TexGeniv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TexGenivOES)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TexGenxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY *TexGenxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *TexImage1D)(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexImage2D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexImage2DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TexImage2DMultisampleCoverageNV)(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TexImage3D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexImage3DEXT)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexImage3DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TexImage3DMultisampleCoverageNV)(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TexImage3DOES)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexImage4DSGIS)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexPageCommitmentARB)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TexPageCommitmentEXT)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TexParameterIiv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TexParameterIivEXT)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TexParameterIivOES)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TexParameterIuiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *TexParameterIuivEXT)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *TexParameterIuivOES)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *TexParameterf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *TexParameterfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *TexParameteri)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *TexParameteriv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TexParameterx)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY *TexParameterxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY *TexParameterxv)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *TexParameterxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *TexRenderbufferNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *TexStorage1D)(GLenum, GLsizei, GLenum, GLsizei);
    void (KHRONOS_APIENTRY *TexStorage1DEXT)(GLenum, GLsizei, GLenum, GLsizei);
    void (KHRONOS_APIENTRY *TexStorage2D)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *TexStorage2DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *TexStorage2DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TexStorage3D)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *TexStorage3DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *TexStorage3DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TexStorage3DMultisampleOES)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TexStorageMem1DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *TexStorageMem2DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *TexStorageMem2DMultisampleEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *TexStorageMem3DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *TexStorageMem3DMultisampleEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *TexStorageSparseAMD)(GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield);
    void (KHRONOS_APIENTRY *TexSubImage1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexSubImage1DEXT)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexSubImage2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexSubImage2DEXT)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexSubImage3DEXT)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexSubImage3DOES)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexSubImage4DSGIS)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TextureBarrier)(void);
    void (KHRONOS_APIENTRY *TextureBarrierNV)(void);
    void (KHRONOS_APIENTRY *TextureBuffer)(GLuint, GLenum, GLuint);
    void (KHRONOS_APIENTRY *TextureBufferEXT)(GLuint, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *TextureBufferRange)(GLuint, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *TextureBufferRangeEXT)(GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *TextureColorMaskSGIS)(GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY *TextureImage1DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TextureImage2DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TextureImage2DMultisampleCoverageNV)(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TextureImage2DMultisampleNV)(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TextureImage3DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TextureImage3DMultisampleCoverageNV)(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TextureImage3DMultisampleNV)(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TextureLightEXT)(GLenum);
    void (KHRONOS_APIENTRY *TextureMaterialEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *TextureNormalEXT)(GLenum);
    void (KHRONOS_APIENTRY *TexturePageCommitmentEXT)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TextureParameterIiv)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TextureParameterIivEXT)(GLuint, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TextureParameterIuiv)(GLuint, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *TextureParameterIuivEXT)(GLuint, GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *TextureParameterf)(GLuint, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *TextureParameterfEXT)(GLuint, GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *TextureParameterfv)(GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *TextureParameterfvEXT)(GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *TextureParameteri)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY *TextureParameteriEXT)(GLuint, GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *TextureParameteriv)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TextureParameterivEXT)(GLuint, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TextureRangeAPPLE)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *TextureRenderbufferEXT)(GLuint, GLenum, GLuint);
    void (KHRONOS_APIENTRY *TextureStorage1D)(GLuint, GLsizei, GLenum, GLsizei);
    void (KHRONOS_APIENTRY *TextureStorage1DEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei);
    void (KHRONOS_APIENTRY *TextureStorage2D)(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *TextureStorage2DEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *TextureStorage2DMultisample)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TextureStorage2DMultisampleEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TextureStorage3D)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *TextureStorage3DEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *TextureStorage3DMultisample)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TextureStorage3DMultisampleEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TextureStorageMem1DEXT)(GLuint, GLsizei, GLenum, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *TextureStorageMem2DEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *TextureStorageMem2DMultisampleEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *TextureStorageMem3DEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *TextureStorageMem3DMultisampleEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *TextureStorageSparseAMD)(GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield);
    void (KHRONOS_APIENTRY *TextureSubImage1D)(GLuint, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TextureSubImage1DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TextureSubImage2D)(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TextureSubImage2DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TextureSubImage3D)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TextureSubImage3DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TextureView)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *TextureViewEXT)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *TextureViewOES)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *TrackMatrixNV)(GLenum, GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *TransformFeedbackAttribsNV)(GLsizei, const GLint *, GLenum);
    void (KHRONOS_APIENTRY *TransformFeedbackBufferBase)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *TransformFeedbackBufferRange)(GLuint, GLuint, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *TransformFeedbackStreamAttribsNV)(GLsizei, const GLint *, GLsizei, const GLint *, GLenum);
    void (KHRONOS_APIENTRY *TransformFeedbackVaryings)(GLuint, GLsizei, const GLchar *const*, GLenum);
    void (KHRONOS_APIENTRY *TransformFeedbackVaryingsEXT)(GLuint, GLsizei, const GLchar *const*, GLenum);
    void (KHRONOS_APIENTRY *TransformFeedbackVaryingsNV)(GLuint, GLsizei, const GLint *, GLenum);
    void (KHRONOS_APIENTRY *TransformPathNV)(GLuint, GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *Translated)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Translatef)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Translatex)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *TranslatexOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *Uniform1d)(GLint, GLdouble);
    void (KHRONOS_APIENTRY *Uniform1dv)(GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *Uniform1f)(GLint, GLfloat);
    void (KHRONOS_APIENTRY *Uniform1fARB)(GLint, GLfloat);
    void (KHRONOS_APIENTRY *Uniform1fv)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *Uniform1fvARB)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *Uniform1i)(GLint, GLint);
    void (KHRONOS_APIENTRY *Uniform1i64ARB)(GLint, GLint64);
    void (KHRONOS_APIENTRY *Uniform1i64NV)(GLint, GLint64EXT);
    void (KHRONOS_APIENTRY *Uniform1i64vARB)(GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY *Uniform1i64vNV)(GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY *Uniform1iARB)(GLint, GLint);
    void (KHRONOS_APIENTRY *Uniform1iv)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *Uniform1ivARB)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *Uniform1ui)(GLint, GLuint);
    void (KHRONOS_APIENTRY *Uniform1ui64ARB)(GLint, GLuint64);
    void (KHRONOS_APIENTRY *Uniform1ui64NV)(GLint, GLuint64EXT);
    void (KHRONOS_APIENTRY *Uniform1ui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *Uniform1ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *Uniform1uiEXT)(GLint, GLuint);
    void (KHRONOS_APIENTRY *Uniform1uiv)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *Uniform1uivEXT)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *Uniform2d)(GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Uniform2dv)(GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *Uniform2f)(GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Uniform2fARB)(GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Uniform2fv)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *Uniform2fvARB)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *Uniform2i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Uniform2i64ARB)(GLint, GLint64, GLint64);
    void (KHRONOS_APIENTRY *Uniform2i64NV)(GLint, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY *Uniform2i64vARB)(GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY *Uniform2i64vNV)(GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY *Uniform2iARB)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Uniform2iv)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *Uniform2ivARB)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *Uniform2ui)(GLint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *Uniform2ui64ARB)(GLint, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY *Uniform2ui64NV)(GLint, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY *Uniform2ui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *Uniform2ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *Uniform2uiEXT)(GLint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *Uniform2uiv)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *Uniform2uivEXT)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *Uniform3d)(GLint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Uniform3dv)(GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *Uniform3f)(GLint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Uniform3fARB)(GLint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Uniform3fv)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *Uniform3fvARB)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *Uniform3i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Uniform3i64ARB)(GLint, GLint64, GLint64, GLint64);
    void (KHRONOS_APIENTRY *Uniform3i64NV)(GLint, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY *Uniform3i64vARB)(GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY *Uniform3i64vNV)(GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY *Uniform3iARB)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Uniform3iv)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *Uniform3ivARB)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *Uniform3ui)(GLint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *Uniform3ui64ARB)(GLint, GLuint64, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY *Uniform3ui64NV)(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY *Uniform3ui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *Uniform3ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *Uniform3uiEXT)(GLint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *Uniform3uiv)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *Uniform3uivEXT)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *Uniform4d)(GLint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Uniform4dv)(GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *Uniform4f)(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Uniform4fARB)(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Uniform4fv)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *Uniform4fvARB)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *Uniform4i)(GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Uniform4i64ARB)(GLint, GLint64, GLint64, GLint64, GLint64);
    void (KHRONOS_APIENTRY *Uniform4i64NV)(GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY *Uniform4i64vARB)(GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY *Uniform4i64vNV)(GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY *Uniform4iARB)(GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Uniform4iv)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *Uniform4ivARB)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *Uniform4ui)(GLint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *Uniform4ui64ARB)(GLint, GLuint64, GLuint64, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY *Uniform4ui64NV)(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY *Uniform4ui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *Uniform4ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *Uniform4uiEXT)(GLint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *Uniform4uiv)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *Uniform4uivEXT)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *UniformBlockBinding)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *UniformBufferEXT)(GLuint, GLint, GLuint);
    void (KHRONOS_APIENTRY *UniformHandleui64ARB)(GLint, GLuint64);
    void (KHRONOS_APIENTRY *UniformHandleui64IMG)(GLint, GLuint64);
    void (KHRONOS_APIENTRY *UniformHandleui64NV)(GLint, GLuint64);
    void (KHRONOS_APIENTRY *UniformHandleui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *UniformHandleui64vIMG)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *UniformHandleui64vNV)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *UniformMatrix2dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *UniformMatrix2fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix2fvARB)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix2x3dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *UniformMatrix2x3fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix2x3fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix2x4dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *UniformMatrix2x4fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix2x4fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix3dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *UniformMatrix3fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix3fvARB)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix3x2dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *UniformMatrix3x2fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix3x2fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix3x4dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *UniformMatrix3x4fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix3x4fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix4dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *UniformMatrix4fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix4fvARB)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix4x2dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *UniformMatrix4x2fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix4x2fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix4x3dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *UniformMatrix4x3fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix4x3fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformSubroutinesuiv)(GLenum, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *Uniformui64NV)(GLint, GLuint64EXT);
    void (KHRONOS_APIENTRY *Uniformui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *UnlockArraysEXT)(void);
    GLboolean(KHRONOS_APIENTRY *UnmapBuffer)(GLenum);
    GLboolean(KHRONOS_APIENTRY *UnmapBufferARB)(GLenum);
    GLboolean(KHRONOS_APIENTRY *UnmapBufferOES)(GLenum);
    GLboolean(KHRONOS_APIENTRY *UnmapNamedBuffer)(GLuint);
    GLboolean(KHRONOS_APIENTRY *UnmapNamedBufferEXT)(GLuint);
    void (KHRONOS_APIENTRY *UnmapObjectBufferATI)(GLuint);
    void (KHRONOS_APIENTRY *UnmapTexture2DINTEL)(GLuint, GLint);
    void (KHRONOS_APIENTRY *UpdateObjectBufferATI)(GLuint, GLuint, GLsizei, const void *, GLenum);
    void (KHRONOS_APIENTRY *UseProgram)(GLuint);
    void (KHRONOS_APIENTRY *UseProgramObjectARB)(GLhandleARB);
    void (KHRONOS_APIENTRY *UseProgramStages)(GLuint, GLbitfield, GLuint);
    void (KHRONOS_APIENTRY *UseProgramStagesEXT)(GLuint, GLbitfield, GLuint);
    void (KHRONOS_APIENTRY *UseShaderProgramEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *VDPAUFiniNV)(void);
    void (KHRONOS_APIENTRY *VDPAUGetSurfaceivNV)(GLvdpauSurfaceNV, GLenum, GLsizei, GLsizei *, GLint *);
    void (KHRONOS_APIENTRY *VDPAUInitNV)(const void *, const void *);
    GLboolean(KHRONOS_APIENTRY *VDPAUIsSurfaceNV)(GLvdpauSurfaceNV);
    void (KHRONOS_APIENTRY *VDPAUMapSurfacesNV)(GLsizei, const GLvdpauSurfaceNV *);
    GLvdpauSurfaceNV(KHRONOS_APIENTRY *VDPAURegisterOutputSurfaceNV)(const void *, GLenum, GLsizei, const GLuint *);
    GLvdpauSurfaceNV(KHRONOS_APIENTRY *VDPAURegisterVideoSurfaceNV)(const void *, GLenum, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *VDPAUSurfaceAccessNV)(GLvdpauSurfaceNV, GLenum);
    void (KHRONOS_APIENTRY *VDPAUUnmapSurfacesNV)(GLsizei, const GLvdpauSurfaceNV *);
    void (KHRONOS_APIENTRY *VDPAUUnregisterSurfaceNV)(GLvdpauSurfaceNV);
    void (KHRONOS_APIENTRY *ValidateProgram)(GLuint);
    void (KHRONOS_APIENTRY *ValidateProgramARB)(GLhandleARB);
    void (KHRONOS_APIENTRY *ValidateProgramPipeline)(GLuint);
    void (KHRONOS_APIENTRY *ValidateProgramPipelineEXT)(GLuint);
    void (KHRONOS_APIENTRY *VariantArrayObjectATI)(GLuint, GLenum, GLsizei, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VariantPointerEXT)(GLuint, GLenum, GLuint, const void *);
    void (KHRONOS_APIENTRY *VariantbvEXT)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY *VariantdvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VariantfvEXT)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VariantivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VariantsvEXT)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VariantubvEXT)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY *VariantuivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VariantusvEXT)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY *Vertex2bOES)(GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *Vertex2bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY *Vertex2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Vertex2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *Vertex2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Vertex2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *Vertex2hNV)(GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *Vertex2hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *Vertex2i)(GLint, GLint);
    void (KHRONOS_APIENTRY *Vertex2iv)(const GLint *);
    void (KHRONOS_APIENTRY *Vertex2s)(GLshort, GLshort);
    void (KHRONOS_APIENTRY *Vertex2sv)(const GLshort *);
    void (KHRONOS_APIENTRY *Vertex2xOES)(GLfixed);
    void (KHRONOS_APIENTRY *Vertex2xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *Vertex3bOES)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *Vertex3bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY *Vertex3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Vertex3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *Vertex3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Vertex3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *Vertex3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *Vertex3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *Vertex3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Vertex3iv)(const GLint *);
    void (KHRONOS_APIENTRY *Vertex3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *Vertex3sv)(const GLshort *);
    void (KHRONOS_APIENTRY *Vertex3xOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *Vertex3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *Vertex4bOES)(GLbyte, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *Vertex4bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY *Vertex4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Vertex4dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *Vertex4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Vertex4fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *Vertex4hNV)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *Vertex4hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *Vertex4i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Vertex4iv)(const GLint *);
    void (KHRONOS_APIENTRY *Vertex4s)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *Vertex4sv)(const GLshort *);
    void (KHRONOS_APIENTRY *Vertex4xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *Vertex4xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *VertexArrayAttribBinding)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayAttribFormat)(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayAttribIFormat)(GLuint, GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayAttribLFormat)(GLuint, GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayBindVertexBufferEXT)(GLuint, GLuint, GLuint, GLintptr, GLsizei);
    void (KHRONOS_APIENTRY *VertexArrayBindingDivisor)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayColorOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexArrayEdgeFlagOffsetEXT)(GLuint, GLuint, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexArrayElementBuffer)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayFogCoordOffsetEXT)(GLuint, GLuint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexArrayIndexOffsetEXT)(GLuint, GLuint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexArrayMultiTexCoordOffsetEXT)(GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexArrayNormalOffsetEXT)(GLuint, GLuint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexArrayParameteriAPPLE)(GLenum, GLint);
    void (KHRONOS_APIENTRY *VertexArrayRangeAPPLE)(GLsizei, void *);
    void (KHRONOS_APIENTRY *VertexArrayRangeNV)(GLsizei, const void *);
    void (KHRONOS_APIENTRY *VertexArraySecondaryColorOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexArrayTexCoordOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexArrayVertexAttribBindingEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayVertexAttribDivisorEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayVertexAttribFormatEXT)(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayVertexAttribIFormatEXT)(GLuint, GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayVertexAttribIOffsetEXT)(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexArrayVertexAttribLFormatEXT)(GLuint, GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayVertexAttribLOffsetEXT)(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexArrayVertexAttribOffsetEXT)(GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexArrayVertexBindingDivisorEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayVertexBuffer)(GLuint, GLuint, GLuint, GLintptr, GLsizei);
    void (KHRONOS_APIENTRY *VertexArrayVertexBuffers)(GLuint, GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizei *);
    void (KHRONOS_APIENTRY *VertexArrayVertexOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexAttrib1d)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib1dARB)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib1dNV)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib1dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib1dvARB)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib1dvNV)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib1f)(GLuint, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib1fARB)(GLuint, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib1fNV)(GLuint, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib1fv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib1fvARB)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib1fvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib1hNV)(GLuint, GLhalfNV);
    void (KHRONOS_APIENTRY *VertexAttrib1hvNV)(GLuint, const GLhalfNV *);
    void (KHRONOS_APIENTRY *VertexAttrib1s)(GLuint, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib1sARB)(GLuint, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib1sNV)(GLuint, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib1sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib1svARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib1svNV)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib2d)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib2dARB)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib2dNV)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib2dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib2dvARB)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib2dvNV)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib2f)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib2fARB)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib2fNV)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib2fv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib2fvARB)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib2fvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib2hNV)(GLuint, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *VertexAttrib2hvNV)(GLuint, const GLhalfNV *);
    void (KHRONOS_APIENTRY *VertexAttrib2s)(GLuint, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib2sARB)(GLuint, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib2sNV)(GLuint, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib2sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib2svARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib2svNV)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib3d)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib3dARB)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib3dNV)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib3dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib3dvARB)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib3dvNV)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib3f)(GLuint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib3fARB)(GLuint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib3fNV)(GLuint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib3fv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib3fvARB)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib3fvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib3hNV)(GLuint, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *VertexAttrib3hvNV)(GLuint, const GLhalfNV *);
    void (KHRONOS_APIENTRY *VertexAttrib3s)(GLuint, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib3sARB)(GLuint, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib3sNV)(GLuint, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib3sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib3svARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib3svNV)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib4Nbv)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY *VertexAttrib4NbvARB)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY *VertexAttrib4Niv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttrib4NivARB)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttrib4Nsv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib4NsvARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib4Nub)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY *VertexAttrib4NubARB)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY *VertexAttrib4Nubv)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY *VertexAttrib4NubvARB)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY *VertexAttrib4Nuiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttrib4NuivARB)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttrib4Nusv)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY *VertexAttrib4NusvARB)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY *VertexAttrib4bv)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY *VertexAttrib4bvARB)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY *VertexAttrib4d)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib4dARB)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib4dNV)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib4dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib4dvARB)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib4dvNV)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib4f)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib4fARB)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib4fNV)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib4fv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib4fvARB)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib4fvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib4hNV)(GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *VertexAttrib4hvNV)(GLuint, const GLhalfNV *);
    void (KHRONOS_APIENTRY *VertexAttrib4iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttrib4ivARB)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttrib4s)(GLuint, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib4sARB)(GLuint, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib4sNV)(GLuint, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib4sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib4svARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib4svNV)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib4ubNV)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY *VertexAttrib4ubv)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY *VertexAttrib4ubvARB)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY *VertexAttrib4ubvNV)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY *VertexAttrib4uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttrib4uivARB)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttrib4usv)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY *VertexAttrib4usvARB)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY *VertexAttribArrayObjectATI)(GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribBinding)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribDivisor)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribDivisorANGLE)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribDivisorARB)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribDivisorEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribDivisorNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribFormat)(GLuint, GLint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribFormatNV)(GLuint, GLint, GLenum, GLboolean, GLsizei);
    void (KHRONOS_APIENTRY *VertexAttribI1i)(GLuint, GLint);
    void (KHRONOS_APIENTRY *VertexAttribI1iEXT)(GLuint, GLint);
    void (KHRONOS_APIENTRY *VertexAttribI1iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttribI1ivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttribI1ui)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribI1uiEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribI1uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribI1uivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribI2i)(GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *VertexAttribI2iEXT)(GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *VertexAttribI2iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttribI2ivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttribI2ui)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribI2uiEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribI2uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribI2uivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribI3i)(GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *VertexAttribI3iEXT)(GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *VertexAttribI3iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttribI3ivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttribI3ui)(GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribI3uiEXT)(GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribI3uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribI3uivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribI4bv)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY *VertexAttribI4bvEXT)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY *VertexAttribI4i)(GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *VertexAttribI4iEXT)(GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *VertexAttribI4iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttribI4ivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttribI4sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttribI4svEXT)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttribI4ubv)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY *VertexAttribI4ubvEXT)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY *VertexAttribI4ui)(GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribI4uiEXT)(GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribI4uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribI4uivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribI4usv)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY *VertexAttribI4usvEXT)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY *VertexAttribIFormat)(GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribIFormatNV)(GLuint, GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY *VertexAttribIPointer)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *VertexAttribIPointerEXT)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *VertexAttribL1d)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttribL1dEXT)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttribL1dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribL1dvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribL1i64NV)(GLuint, GLint64EXT);
    void (KHRONOS_APIENTRY *VertexAttribL1i64vNV)(GLuint, const GLint64EXT *);
    void (KHRONOS_APIENTRY *VertexAttribL1ui64ARB)(GLuint, GLuint64EXT);
    void (KHRONOS_APIENTRY *VertexAttribL1ui64NV)(GLuint, GLuint64EXT);
    void (KHRONOS_APIENTRY *VertexAttribL1ui64vARB)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *VertexAttribL1ui64vNV)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *VertexAttribL2d)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttribL2dEXT)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttribL2dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribL2dvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribL2i64NV)(GLuint, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY *VertexAttribL2i64vNV)(GLuint, const GLint64EXT *);
    void (KHRONOS_APIENTRY *VertexAttribL2ui64NV)(GLuint, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY *VertexAttribL2ui64vNV)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *VertexAttribL3d)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttribL3dEXT)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttribL3dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribL3dvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribL3i64NV)(GLuint, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY *VertexAttribL3i64vNV)(GLuint, const GLint64EXT *);
    void (KHRONOS_APIENTRY *VertexAttribL3ui64NV)(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY *VertexAttribL3ui64vNV)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *VertexAttribL4d)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttribL4dEXT)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttribL4dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribL4dvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribL4i64NV)(GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY *VertexAttribL4i64vNV)(GLuint, const GLint64EXT *);
    void (KHRONOS_APIENTRY *VertexAttribL4ui64NV)(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY *VertexAttribL4ui64vNV)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *VertexAttribLFormat)(GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribLFormatNV)(GLuint, GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY *VertexAttribLPointer)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *VertexAttribLPointerEXT)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *VertexAttribP1ui)(GLuint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribP1uiv)(GLuint, GLenum, GLboolean, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribP2ui)(GLuint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribP2uiv)(GLuint, GLenum, GLboolean, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribP3ui)(GLuint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribP3uiv)(GLuint, GLenum, GLboolean, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribP4ui)(GLuint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribP4uiv)(GLuint, GLenum, GLboolean, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribParameteriAMD)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY *VertexAttribPointer)(GLuint, GLint, GLenum, GLboolean, GLsizei, const void *);
    void (KHRONOS_APIENTRY *VertexAttribPointerARB)(GLuint, GLint, GLenum, GLboolean, GLsizei, const void *);
    void (KHRONOS_APIENTRY *VertexAttribPointerNV)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *VertexAttribs1dvNV)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribs1fvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttribs1hvNV)(GLuint, GLsizei, const GLhalfNV *);
    void (KHRONOS_APIENTRY *VertexAttribs1svNV)(GLuint, GLsizei, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttribs2dvNV)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribs2fvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttribs2hvNV)(GLuint, GLsizei, const GLhalfNV *);
    void (KHRONOS_APIENTRY *VertexAttribs2svNV)(GLuint, GLsizei, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttribs3dvNV)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribs3fvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttribs3hvNV)(GLuint, GLsizei, const GLhalfNV *);
    void (KHRONOS_APIENTRY *VertexAttribs3svNV)(GLuint, GLsizei, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttribs4dvNV)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribs4fvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttribs4hvNV)(GLuint, GLsizei, const GLhalfNV *);
    void (KHRONOS_APIENTRY *VertexAttribs4svNV)(GLuint, GLsizei, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttribs4ubvNV)(GLuint, GLsizei, const GLubyte *);
    void (KHRONOS_APIENTRY *VertexBindingDivisor)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexBlendARB)(GLint);
    void (KHRONOS_APIENTRY *VertexBlendEnvfATI)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *VertexBlendEnviATI)(GLenum, GLint);
    void (KHRONOS_APIENTRY *VertexFormatNV)(GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY *VertexP2ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *VertexP2uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *VertexP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *VertexP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *VertexP4ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *VertexP4uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *VertexPointer)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *VertexPointerEXT)(GLint, GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY *VertexPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY *VertexPointervINTEL)(GLint, GLenum, const void **);
    void (KHRONOS_APIENTRY *VertexStream1dATI)(GLenum, GLdouble);
    void (KHRONOS_APIENTRY *VertexStream1dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexStream1fATI)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *VertexStream1fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexStream1iATI)(GLenum, GLint);
    void (KHRONOS_APIENTRY *VertexStream1ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *VertexStream1sATI)(GLenum, GLshort);
    void (KHRONOS_APIENTRY *VertexStream1svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *VertexStream2dATI)(GLenum, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexStream2dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexStream2fATI)(GLenum, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexStream2fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexStream2iATI)(GLenum, GLint, GLint);
    void (KHRONOS_APIENTRY *VertexStream2ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *VertexStream2sATI)(GLenum, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexStream2svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *VertexStream3dATI)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexStream3dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexStream3fATI)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexStream3fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexStream3iATI)(GLenum, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *VertexStream3ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *VertexStream3sATI)(GLenum, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexStream3svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *VertexStream4dATI)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexStream4dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexStream4fATI)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexStream4fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexStream4iATI)(GLenum, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *VertexStream4ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *VertexStream4sATI)(GLenum, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexStream4svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *VertexWeightPointerEXT)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *VertexWeightfEXT)(GLfloat);
    void (KHRONOS_APIENTRY *VertexWeightfvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY *VertexWeighthNV)(GLhalfNV);
    void (KHRONOS_APIENTRY *VertexWeighthvNV)(const GLhalfNV *);
    GLenum(KHRONOS_APIENTRY *VideoCaptureNV)(GLuint, GLuint *, GLuint64EXT *);
    void (KHRONOS_APIENTRY *VideoCaptureStreamParameterdvNV)(GLuint, GLuint, GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *VideoCaptureStreamParameterfvNV)(GLuint, GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *VideoCaptureStreamParameterivNV)(GLuint, GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *Viewport)(GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *ViewportArrayv)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ViewportArrayvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ViewportArrayvOES)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ViewportIndexedf)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ViewportIndexedfNV)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ViewportIndexedfOES)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ViewportIndexedfv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *ViewportIndexedfvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *ViewportIndexedfvOES)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *ViewportPositionWScaleNV)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ViewportSwizzleNV)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *WaitSemaphoreEXT)(GLuint, GLuint, const GLuint *, GLuint, const GLuint *, const GLenum *);
    void (KHRONOS_APIENTRY *WaitSync)(GLsync, GLbitfield, GLuint64);
    void (KHRONOS_APIENTRY *WaitSyncAPPLE)(GLsync, GLbitfield, GLuint64);
    void (KHRONOS_APIENTRY *WaitVkSemaphoreNV)(GLuint64);
    void (KHRONOS_APIENTRY *WeightPathsNV)(GLuint, GLsizei, const GLuint *, const GLfloat *);
    void (KHRONOS_APIENTRY *WeightPointerARB)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *WeightPointerOES)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *WeightbvARB)(GLint, const GLbyte *);
    void (KHRONOS_APIENTRY *WeightdvARB)(GLint, const GLdouble *);
    void (KHRONOS_APIENTRY *WeightfvARB)(GLint, const GLfloat *);
    void (KHRONOS_APIENTRY *WeightivARB)(GLint, const GLint *);
    void (KHRONOS_APIENTRY *WeightsvARB)(GLint, const GLshort *);
    void (KHRONOS_APIENTRY *WeightubvARB)(GLint, const GLubyte *);
    void (KHRONOS_APIENTRY *WeightuivARB)(GLint, const GLuint *);
    void (KHRONOS_APIENTRY *WeightusvARB)(GLint, const GLushort *);
    void (KHRONOS_APIENTRY *WindowPos2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *WindowPos2dARB)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *WindowPos2dMESA)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *WindowPos2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *WindowPos2dvARB)(const GLdouble *);
    void (KHRONOS_APIENTRY *WindowPos2dvMESA)(const GLdouble *);
    void (KHRONOS_APIENTRY *WindowPos2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *WindowPos2fARB)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *WindowPos2fMESA)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *WindowPos2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *WindowPos2fvARB)(const GLfloat *);
    void (KHRONOS_APIENTRY *WindowPos2fvMESA)(const GLfloat *);
    void (KHRONOS_APIENTRY *WindowPos2i)(GLint, GLint);
    void (KHRONOS_APIENTRY *WindowPos2iARB)(GLint, GLint);
    void (KHRONOS_APIENTRY *WindowPos2iMESA)(GLint, GLint);
    void (KHRONOS_APIENTRY *WindowPos2iv)(const GLint *);
    void (KHRONOS_APIENTRY *WindowPos2ivARB)(const GLint *);
    void (KHRONOS_APIENTRY *WindowPos2ivMESA)(const GLint *);
    void (KHRONOS_APIENTRY *WindowPos2s)(GLshort, GLshort);
    void (KHRONOS_APIENTRY *WindowPos2sARB)(GLshort, GLshort);
    void (KHRONOS_APIENTRY *WindowPos2sMESA)(GLshort, GLshort);
    void (KHRONOS_APIENTRY *WindowPos2sv)(const GLshort *);
    void (KHRONOS_APIENTRY *WindowPos2svARB)(const GLshort *);
    void (KHRONOS_APIENTRY *WindowPos2svMESA)(const GLshort *);
    void (KHRONOS_APIENTRY *WindowPos3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *WindowPos3dARB)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *WindowPos3dMESA)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *WindowPos3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *WindowPos3dvARB)(const GLdouble *);
    void (KHRONOS_APIENTRY *WindowPos3dvMESA)(const GLdouble *);
    void (KHRONOS_APIENTRY *WindowPos3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *WindowPos3fARB)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *WindowPos3fMESA)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *WindowPos3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *WindowPos3fvARB)(const GLfloat *);
    void (KHRONOS_APIENTRY *WindowPos3fvMESA)(const GLfloat *);
    void (KHRONOS_APIENTRY *WindowPos3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *WindowPos3iARB)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *WindowPos3iMESA)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *WindowPos3iv)(const GLint *);
    void (KHRONOS_APIENTRY *WindowPos3ivARB)(const GLint *);
    void (KHRONOS_APIENTRY *WindowPos3ivMESA)(const GLint *);
    void (KHRONOS_APIENTRY *WindowPos3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *WindowPos3sARB)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *WindowPos3sMESA)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *WindowPos3sv)(const GLshort *);
    void (KHRONOS_APIENTRY *WindowPos3svARB)(const GLshort *);
    void (KHRONOS_APIENTRY *WindowPos3svMESA)(const GLshort *);
    void (KHRONOS_APIENTRY *WindowPos4dMESA)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *WindowPos4dvMESA)(const GLdouble *);
    void (KHRONOS_APIENTRY *WindowPos4fMESA)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *WindowPos4fvMESA)(const GLfloat *);
    void (KHRONOS_APIENTRY *WindowPos4iMESA)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *WindowPos4ivMESA)(const GLint *);
    void (KHRONOS_APIENTRY *WindowPos4sMESA)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *WindowPos4svMESA)(const GLshort *);
    void (KHRONOS_APIENTRY *WindowRectanglesEXT)(GLenum, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *WriteMaskEXT)(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);

} OnutGLConfig;

extern OnutGLConfig onutGL; /* global instance. */

ONUT_FORCE_INLINE khronos_int8_t onutGLSupport(khronos_usize_t id) {
    return onutGL.support[id];
}

#if ONUT_PROTO_IMPL

ONUT_FORCE_INLINE void  onutAccum(GLenum op, GLfloat value) { onutGL.Accum(op, value); }
ONUT_FORCE_INLINE void  onutAccumxOES(GLenum op, GLfixed value) { onutGL.AccumxOES(op, value); }
ONUT_FORCE_INLINE GLboolean onutAcquireKeyedMutexWin32EXT(GLuint memory, GLuint64 key, GLuint timeout) { return onutGL.AcquireKeyedMutexWin32EXT(memory, key, timeout); }
ONUT_FORCE_INLINE void  onutActiveProgramEXT(GLuint program) { onutGL.ActiveProgramEXT(program); }
ONUT_FORCE_INLINE void  onutActiveShaderProgram(GLuint pipeline, GLuint program) { onutGL.ActiveShaderProgram(pipeline, program); }
ONUT_FORCE_INLINE void  onutActiveShaderProgramEXT(GLuint pipeline, GLuint program) { onutGL.ActiveShaderProgramEXT(pipeline, program); }
ONUT_FORCE_INLINE void  onutActiveStencilFaceEXT(GLenum face) { onutGL.ActiveStencilFaceEXT(face); }
ONUT_FORCE_INLINE void  onutActiveTexture(GLenum texture) { onutGL.ActiveTexture(texture); }
ONUT_FORCE_INLINE void  onutActiveTextureARB(GLenum texture) { onutGL.ActiveTextureARB(texture); }
ONUT_FORCE_INLINE void  onutActiveVaryingNV(GLuint program, const GLchar * name) { onutGL.ActiveVaryingNV(program, name); }
ONUT_FORCE_INLINE void  onutAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) { onutGL.AlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod); }
ONUT_FORCE_INLINE void  onutAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) { onutGL.AlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod); }
ONUT_FORCE_INLINE void  onutAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) { onutGL.AlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod); }
ONUT_FORCE_INLINE void  onutAlphaFunc(GLenum func, GLfloat ref) { onutGL.AlphaFunc(func, ref); }
ONUT_FORCE_INLINE void  onutAlphaFuncQCOM(GLenum func, GLclampf ref) { onutGL.AlphaFuncQCOM(func, ref); }
ONUT_FORCE_INLINE void  onutAlphaFuncx(GLenum func, GLfixed ref) { onutGL.AlphaFuncx(func, ref); }
ONUT_FORCE_INLINE void  onutAlphaFuncxOES(GLenum func, GLfixed ref) { onutGL.AlphaFuncxOES(func, ref); }
ONUT_FORCE_INLINE void  onutAlphaToCoverageDitherControlNV(GLenum mode) { onutGL.AlphaToCoverageDitherControlNV(mode); }
ONUT_FORCE_INLINE void  onutApplyFramebufferAttachmentCMAAINTEL(void) { onutGL.ApplyFramebufferAttachmentCMAAINTEL(); }
ONUT_FORCE_INLINE void  onutApplyTextureEXT(GLenum mode) { onutGL.ApplyTextureEXT(mode); }
ONUT_FORCE_INLINE GLboolean onutAreProgramsResidentNV(GLsizei n, const GLuint * programs, GLboolean * residences) { return onutGL.AreProgramsResidentNV(n, programs, residences); }
ONUT_FORCE_INLINE GLboolean onutAreTexturesResident(GLsizei n, const GLuint * textures, GLboolean * residences) { return onutGL.AreTexturesResident(n, textures, residences); }
ONUT_FORCE_INLINE GLboolean onutAreTexturesResidentEXT(GLsizei n, const GLuint * textures, GLboolean * residences) { return onutGL.AreTexturesResidentEXT(n, textures, residences); }
ONUT_FORCE_INLINE void  onutArrayElement(GLint i) { onutGL.ArrayElement(i); }
ONUT_FORCE_INLINE void  onutArrayElementEXT(GLint i) { onutGL.ArrayElementEXT(i); }
ONUT_FORCE_INLINE void  onutArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) { onutGL.ArrayObjectATI(array, size, type, stride, buffer, offset); }
ONUT_FORCE_INLINE void  onutAsyncMarkerSGIX(GLuint marker) { onutGL.AsyncMarkerSGIX(marker); }
ONUT_FORCE_INLINE void  onutAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj) { onutGL.AttachObjectARB(containerObj, obj); }
ONUT_FORCE_INLINE void  onutAttachShader(GLuint program, GLuint shader) { onutGL.AttachShader(program, shader); }
ONUT_FORCE_INLINE void  onutBegin(GLenum mode) { onutGL.Begin(mode); }
ONUT_FORCE_INLINE void  onutBeginConditionalRender(GLuint id, GLenum mode) { onutGL.BeginConditionalRender(id, mode); }
ONUT_FORCE_INLINE void  onutBeginConditionalRenderNV(GLuint id, GLenum mode) { onutGL.BeginConditionalRenderNV(id, mode); }
ONUT_FORCE_INLINE void  onutBeginConditionalRenderNVX(GLuint id) { onutGL.BeginConditionalRenderNVX(id); }
ONUT_FORCE_INLINE void  onutBeginFragmentShaderATI(void) { onutGL.BeginFragmentShaderATI(); }
ONUT_FORCE_INLINE void  onutBeginOcclusionQueryNV(GLuint id) { onutGL.BeginOcclusionQueryNV(id); }
ONUT_FORCE_INLINE void  onutBeginPerfMonitorAMD(GLuint monitor) { onutGL.BeginPerfMonitorAMD(monitor); }
ONUT_FORCE_INLINE void  onutBeginPerfQueryINTEL(GLuint queryHandle) { onutGL.BeginPerfQueryINTEL(queryHandle); }
ONUT_FORCE_INLINE void  onutBeginQuery(GLenum target, GLuint id) { onutGL.BeginQuery(target, id); }
ONUT_FORCE_INLINE void  onutBeginQueryARB(GLenum target, GLuint id) { onutGL.BeginQueryARB(target, id); }
ONUT_FORCE_INLINE void  onutBeginQueryEXT(GLenum target, GLuint id) { onutGL.BeginQueryEXT(target, id); }
ONUT_FORCE_INLINE void  onutBeginQueryIndexed(GLenum target, GLuint index, GLuint id) { onutGL.BeginQueryIndexed(target, index, id); }
ONUT_FORCE_INLINE void  onutBeginTransformFeedback(GLenum primitiveMode) { onutGL.BeginTransformFeedback(primitiveMode); }
ONUT_FORCE_INLINE void  onutBeginTransformFeedbackEXT(GLenum primitiveMode) { onutGL.BeginTransformFeedbackEXT(primitiveMode); }
ONUT_FORCE_INLINE void  onutBeginTransformFeedbackNV(GLenum primitiveMode) { onutGL.BeginTransformFeedbackNV(primitiveMode); }
ONUT_FORCE_INLINE void  onutBeginVertexShaderEXT(void) { onutGL.BeginVertexShaderEXT(); }
ONUT_FORCE_INLINE void  onutBeginVideoCaptureNV(GLuint video_capture_slot) { onutGL.BeginVideoCaptureNV(video_capture_slot); }
ONUT_FORCE_INLINE void  onutBindAttribLocation(GLuint program, GLuint index, const GLchar * name) { onutGL.BindAttribLocation(program, index, name); }
ONUT_FORCE_INLINE void  onutBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB * name) { onutGL.BindAttribLocationARB(programObj, index, name); }
ONUT_FORCE_INLINE void  onutBindBuffer(GLenum target, GLuint buffer) { onutGL.BindBuffer(target, buffer); }
ONUT_FORCE_INLINE void  onutBindBufferARB(GLenum target, GLuint buffer) { onutGL.BindBufferARB(target, buffer); }
ONUT_FORCE_INLINE void  onutBindBufferBase(GLenum target, GLuint index, GLuint buffer) { onutGL.BindBufferBase(target, index, buffer); }
ONUT_FORCE_INLINE void  onutBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer) { onutGL.BindBufferBaseEXT(target, index, buffer); }
ONUT_FORCE_INLINE void  onutBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer) { onutGL.BindBufferBaseNV(target, index, buffer); }
ONUT_FORCE_INLINE void  onutBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset) { onutGL.BindBufferOffsetEXT(target, index, buffer, offset); }
ONUT_FORCE_INLINE void  onutBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset) { onutGL.BindBufferOffsetNV(target, index, buffer, offset); }
ONUT_FORCE_INLINE void  onutBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { onutGL.BindBufferRange(target, index, buffer, offset, size); }
ONUT_FORCE_INLINE void  onutBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { onutGL.BindBufferRangeEXT(target, index, buffer, offset, size); }
ONUT_FORCE_INLINE void  onutBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { onutGL.BindBufferRangeNV(target, index, buffer, offset, size); }
ONUT_FORCE_INLINE void  onutBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint * buffers) { onutGL.BindBuffersBase(target, first, count, buffers); }
ONUT_FORCE_INLINE void  onutBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes) { onutGL.BindBuffersRange(target, first, count, buffers, offsets, sizes); }
ONUT_FORCE_INLINE void  onutBindFragDataLocation(GLuint program, GLuint color, const GLchar * name) { onutGL.BindFragDataLocation(program, color, name); }
ONUT_FORCE_INLINE void  onutBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar * name) { onutGL.BindFragDataLocationEXT(program, color, name); }
ONUT_FORCE_INLINE void  onutBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name) { onutGL.BindFragDataLocationIndexed(program, colorNumber, index, name); }
ONUT_FORCE_INLINE void  onutBindFragDataLocationIndexedEXT(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name) { onutGL.BindFragDataLocationIndexedEXT(program, colorNumber, index, name); }
ONUT_FORCE_INLINE void  onutBindFragmentShaderATI(GLuint id) { onutGL.BindFragmentShaderATI(id); }
ONUT_FORCE_INLINE void  onutBindFramebuffer(GLenum target, GLuint framebuffer) { onutGL.BindFramebuffer(target, framebuffer); }
ONUT_FORCE_INLINE void  onutBindFramebufferEXT(GLenum target, GLuint framebuffer) { onutGL.BindFramebufferEXT(target, framebuffer); }
ONUT_FORCE_INLINE void  onutBindFramebufferOES(GLenum target, GLuint framebuffer) { onutGL.BindFramebufferOES(target, framebuffer); }
ONUT_FORCE_INLINE void  onutBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) { onutGL.BindImageTexture(unit, texture, level, layered, layer, access, format); }
ONUT_FORCE_INLINE void  onutBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format) { onutGL.BindImageTextureEXT(index, texture, level, layered, layer, access, format); }
ONUT_FORCE_INLINE void  onutBindImageTextures(GLuint first, GLsizei count, const GLuint * textures) { onutGL.BindImageTextures(first, count, textures); }
ONUT_FORCE_INLINE GLuint onutBindLightParameterEXT(GLenum light, GLenum value) { return onutGL.BindLightParameterEXT(light, value); }
ONUT_FORCE_INLINE GLuint onutBindMaterialParameterEXT(GLenum face, GLenum value) { return onutGL.BindMaterialParameterEXT(face, value); }
ONUT_FORCE_INLINE void  onutBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture) { onutGL.BindMultiTextureEXT(texunit, target, texture); }
ONUT_FORCE_INLINE GLuint onutBindParameterEXT(GLenum value) { return onutGL.BindParameterEXT(value); }
ONUT_FORCE_INLINE void  onutBindProgramARB(GLenum target, GLuint program) { onutGL.BindProgramARB(target, program); }
ONUT_FORCE_INLINE void  onutBindProgramNV(GLenum target, GLuint id) { onutGL.BindProgramNV(target, id); }
ONUT_FORCE_INLINE void  onutBindProgramPipeline(GLuint pipeline) { onutGL.BindProgramPipeline(pipeline); }
ONUT_FORCE_INLINE void  onutBindProgramPipelineEXT(GLuint pipeline) { onutGL.BindProgramPipelineEXT(pipeline); }
ONUT_FORCE_INLINE void  onutBindRenderbuffer(GLenum target, GLuint renderbuffer) { onutGL.BindRenderbuffer(target, renderbuffer); }
ONUT_FORCE_INLINE void  onutBindRenderbufferEXT(GLenum target, GLuint renderbuffer) { onutGL.BindRenderbufferEXT(target, renderbuffer); }
ONUT_FORCE_INLINE void  onutBindRenderbufferOES(GLenum target, GLuint renderbuffer) { onutGL.BindRenderbufferOES(target, renderbuffer); }
ONUT_FORCE_INLINE void  onutBindSampler(GLuint unit, GLuint sampler) { onutGL.BindSampler(unit, sampler); }
ONUT_FORCE_INLINE void  onutBindSamplers(GLuint first, GLsizei count, const GLuint * samplers) { onutGL.BindSamplers(first, count, samplers); }
ONUT_FORCE_INLINE GLuint onutBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value) { return onutGL.BindTexGenParameterEXT(unit, coord, value); }
ONUT_FORCE_INLINE void  onutBindTexture(GLenum target, GLuint texture) { onutGL.BindTexture(target, texture); }
ONUT_FORCE_INLINE void  onutBindTextureEXT(GLenum target, GLuint texture) { onutGL.BindTextureEXT(target, texture); }
ONUT_FORCE_INLINE void  onutBindTextureUnit(GLuint unit, GLuint texture) { onutGL.BindTextureUnit(unit, texture); }
ONUT_FORCE_INLINE GLuint onutBindTextureUnitParameterEXT(GLenum unit, GLenum value) { return onutGL.BindTextureUnitParameterEXT(unit, value); }
ONUT_FORCE_INLINE void  onutBindTextures(GLuint first, GLsizei count, const GLuint * textures) { onutGL.BindTextures(first, count, textures); }
ONUT_FORCE_INLINE void  onutBindTransformFeedback(GLenum target, GLuint id) { onutGL.BindTransformFeedback(target, id); }
ONUT_FORCE_INLINE void  onutBindTransformFeedbackNV(GLenum target, GLuint id) { onutGL.BindTransformFeedbackNV(target, id); }
ONUT_FORCE_INLINE void  onutBindVertexArray(GLuint array) { onutGL.BindVertexArray(array); }
ONUT_FORCE_INLINE void  onutBindVertexArrayAPPLE(GLuint array) { onutGL.BindVertexArrayAPPLE(array); }
ONUT_FORCE_INLINE void  onutBindVertexArrayOES(GLuint array) { onutGL.BindVertexArrayOES(array); }
ONUT_FORCE_INLINE void  onutBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { onutGL.BindVertexBuffer(bindingindex, buffer, offset, stride); }
ONUT_FORCE_INLINE void  onutBindVertexBuffers(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) { onutGL.BindVertexBuffers(first, count, buffers, offsets, strides); }
ONUT_FORCE_INLINE void  onutBindVertexShaderEXT(GLuint id) { onutGL.BindVertexShaderEXT(id); }
ONUT_FORCE_INLINE void  onutBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset) { onutGL.BindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset); }
ONUT_FORCE_INLINE void  onutBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture) { onutGL.BindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture); }
ONUT_FORCE_INLINE void  onutBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz) { onutGL.Binormal3bEXT(bx, by, bz); }
ONUT_FORCE_INLINE void  onutBinormal3bvEXT(const GLbyte * v) { onutGL.Binormal3bvEXT(v); }
ONUT_FORCE_INLINE void  onutBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz) { onutGL.Binormal3dEXT(bx, by, bz); }
ONUT_FORCE_INLINE void  onutBinormal3dvEXT(const GLdouble * v) { onutGL.Binormal3dvEXT(v); }
ONUT_FORCE_INLINE void  onutBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz) { onutGL.Binormal3fEXT(bx, by, bz); }
ONUT_FORCE_INLINE void  onutBinormal3fvEXT(const GLfloat * v) { onutGL.Binormal3fvEXT(v); }
ONUT_FORCE_INLINE void  onutBinormal3iEXT(GLint bx, GLint by, GLint bz) { onutGL.Binormal3iEXT(bx, by, bz); }
ONUT_FORCE_INLINE void  onutBinormal3ivEXT(const GLint * v) { onutGL.Binormal3ivEXT(v); }
ONUT_FORCE_INLINE void  onutBinormal3sEXT(GLshort bx, GLshort by, GLshort bz) { onutGL.Binormal3sEXT(bx, by, bz); }
ONUT_FORCE_INLINE void  onutBinormal3svEXT(const GLshort * v) { onutGL.Binormal3svEXT(v); }
ONUT_FORCE_INLINE void  onutBinormalPointerEXT(GLenum type, GLsizei stride, const void * pointer) { onutGL.BinormalPointerEXT(type, stride, pointer); }
ONUT_FORCE_INLINE void  onutBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap) { onutGL.Bitmap(width, height, xorig, yorig, xmove, ymove, bitmap); }
ONUT_FORCE_INLINE void  onutBitmapxOES(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte * bitmap) { onutGL.BitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap); }
ONUT_FORCE_INLINE void  onutBlendBarrier(void) { onutGL.BlendBarrier(); }
ONUT_FORCE_INLINE void  onutBlendBarrierKHR(void) { onutGL.BlendBarrierKHR(); }
ONUT_FORCE_INLINE void  onutBlendBarrierNV(void) { onutGL.BlendBarrierNV(); }
ONUT_FORCE_INLINE void  onutBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { onutGL.BlendColor(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutBlendColorEXT(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { onutGL.BlendColorEXT(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutBlendColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { onutGL.BlendColorxOES(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutBlendEquation(GLenum mode) { onutGL.BlendEquation(mode); }
ONUT_FORCE_INLINE void  onutBlendEquationEXT(GLenum mode) { onutGL.BlendEquationEXT(mode); }
ONUT_FORCE_INLINE void  onutBlendEquationIndexedAMD(GLuint buf, GLenum mode) { onutGL.BlendEquationIndexedAMD(buf, mode); }
ONUT_FORCE_INLINE void  onutBlendEquationOES(GLenum mode) { onutGL.BlendEquationOES(mode); }
ONUT_FORCE_INLINE void  onutBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) { onutGL.BlendEquationSeparate(modeRGB, modeAlpha); }
ONUT_FORCE_INLINE void  onutBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha) { onutGL.BlendEquationSeparateEXT(modeRGB, modeAlpha); }
ONUT_FORCE_INLINE void  onutBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { onutGL.BlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha); }
ONUT_FORCE_INLINE void  onutBlendEquationSeparateOES(GLenum modeRGB, GLenum modeAlpha) { onutGL.BlendEquationSeparateOES(modeRGB, modeAlpha); }
ONUT_FORCE_INLINE void  onutBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { onutGL.BlendEquationSeparatei(buf, modeRGB, modeAlpha); }
ONUT_FORCE_INLINE void  onutBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { onutGL.BlendEquationSeparateiARB(buf, modeRGB, modeAlpha); }
ONUT_FORCE_INLINE void  onutBlendEquationSeparateiEXT(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { onutGL.BlendEquationSeparateiEXT(buf, modeRGB, modeAlpha); }
ONUT_FORCE_INLINE void  onutBlendEquationSeparateiOES(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { onutGL.BlendEquationSeparateiOES(buf, modeRGB, modeAlpha); }
ONUT_FORCE_INLINE void  onutBlendEquationi(GLuint buf, GLenum mode) { onutGL.BlendEquationi(buf, mode); }
ONUT_FORCE_INLINE void  onutBlendEquationiARB(GLuint buf, GLenum mode) { onutGL.BlendEquationiARB(buf, mode); }
ONUT_FORCE_INLINE void  onutBlendEquationiEXT(GLuint buf, GLenum mode) { onutGL.BlendEquationiEXT(buf, mode); }
ONUT_FORCE_INLINE void  onutBlendEquationiOES(GLuint buf, GLenum mode) { onutGL.BlendEquationiOES(buf, mode); }
ONUT_FORCE_INLINE void  onutBlendFunc(GLenum sfactor, GLenum dfactor) { onutGL.BlendFunc(sfactor, dfactor); }
ONUT_FORCE_INLINE void  onutBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst) { onutGL.BlendFuncIndexedAMD(buf, src, dst); }
ONUT_FORCE_INLINE void  onutBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { onutGL.BlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); }
ONUT_FORCE_INLINE void  onutBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { onutGL.BlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); }
ONUT_FORCE_INLINE void  onutBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { onutGL.BlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); }
ONUT_FORCE_INLINE void  onutBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { onutGL.BlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
ONUT_FORCE_INLINE void  onutBlendFuncSeparateOES(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { onutGL.BlendFuncSeparateOES(srcRGB, dstRGB, srcAlpha, dstAlpha); }
ONUT_FORCE_INLINE void  onutBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { onutGL.BlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
ONUT_FORCE_INLINE void  onutBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { onutGL.BlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
ONUT_FORCE_INLINE void  onutBlendFuncSeparateiEXT(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { onutGL.BlendFuncSeparateiEXT(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
ONUT_FORCE_INLINE void  onutBlendFuncSeparateiOES(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { onutGL.BlendFuncSeparateiOES(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
ONUT_FORCE_INLINE void  onutBlendFunci(GLuint buf, GLenum src, GLenum dst) { onutGL.BlendFunci(buf, src, dst); }
ONUT_FORCE_INLINE void  onutBlendFunciARB(GLuint buf, GLenum src, GLenum dst) { onutGL.BlendFunciARB(buf, src, dst); }
ONUT_FORCE_INLINE void  onutBlendFunciEXT(GLuint buf, GLenum src, GLenum dst) { onutGL.BlendFunciEXT(buf, src, dst); }
ONUT_FORCE_INLINE void  onutBlendFunciOES(GLuint buf, GLenum src, GLenum dst) { onutGL.BlendFunciOES(buf, src, dst); }
ONUT_FORCE_INLINE void  onutBlendParameteriNV(GLenum pname, GLint value) { onutGL.BlendParameteriNV(pname, value); }
ONUT_FORCE_INLINE void  onutBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { onutGL.BlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
ONUT_FORCE_INLINE void  onutBlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { onutGL.BlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
ONUT_FORCE_INLINE void  onutBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { onutGL.BlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
ONUT_FORCE_INLINE void  onutBlitFramebufferNV(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { onutGL.BlitFramebufferNV(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
ONUT_FORCE_INLINE void  onutBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { onutGL.BlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
ONUT_FORCE_INLINE void  onutBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) { onutGL.BufferAddressRangeNV(pname, index, address, length); }
ONUT_FORCE_INLINE void  onutBufferData(GLenum target, GLsizeiptr size, const void * data, GLenum usage) { onutGL.BufferData(target, size, data, usage); }
ONUT_FORCE_INLINE void  onutBufferDataARB(GLenum target, GLsizeiptrARB size, const void * data, GLenum usage) { onutGL.BufferDataARB(target, size, data, usage); }
ONUT_FORCE_INLINE void  onutBufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) { onutGL.BufferPageCommitmentARB(target, offset, size, commit); }
ONUT_FORCE_INLINE void  onutBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param) { onutGL.BufferParameteriAPPLE(target, pname, param); }
ONUT_FORCE_INLINE GLuint onutBufferRegionEnabled(void) { return onutGL.BufferRegionEnabled(); }
ONUT_FORCE_INLINE void  onutBufferStorage(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags) { onutGL.BufferStorage(target, size, data, flags); }
ONUT_FORCE_INLINE void  onutBufferStorageEXT(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags) { onutGL.BufferStorageEXT(target, size, data, flags); }
ONUT_FORCE_INLINE void  onutBufferStorageExternalEXT(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) { onutGL.BufferStorageExternalEXT(target, offset, size, clientBuffer, flags); }
ONUT_FORCE_INLINE void  onutBufferStorageMemEXT(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset) { onutGL.BufferStorageMemEXT(target, size, memory, offset); }
ONUT_FORCE_INLINE void  onutBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void * data) { onutGL.BufferSubData(target, offset, size, data); }
ONUT_FORCE_INLINE void  onutBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void * data) { onutGL.BufferSubDataARB(target, offset, size, data); }
ONUT_FORCE_INLINE void  onutCallCommandListNV(GLuint list) { onutGL.CallCommandListNV(list); }
ONUT_FORCE_INLINE void  onutCallList(GLuint list) { onutGL.CallList(list); }
ONUT_FORCE_INLINE void  onutCallLists(GLsizei n, GLenum type, const void * lists) { onutGL.CallLists(n, type, lists); }
ONUT_FORCE_INLINE GLenum onutCheckFramebufferStatus(GLenum target) { return onutGL.CheckFramebufferStatus(target); }
ONUT_FORCE_INLINE GLenum onutCheckFramebufferStatusEXT(GLenum target) { return onutGL.CheckFramebufferStatusEXT(target); }
ONUT_FORCE_INLINE GLenum onutCheckFramebufferStatusOES(GLenum target) { return onutGL.CheckFramebufferStatusOES(target); }
ONUT_FORCE_INLINE GLenum onutCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target) { return onutGL.CheckNamedFramebufferStatus(framebuffer, target); }
ONUT_FORCE_INLINE GLenum onutCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target) { return onutGL.CheckNamedFramebufferStatusEXT(framebuffer, target); }
ONUT_FORCE_INLINE void  onutClampColor(GLenum target, GLenum clamp) { onutGL.ClampColor(target, clamp); }
ONUT_FORCE_INLINE void  onutClampColorARB(GLenum target, GLenum clamp) { onutGL.ClampColorARB(target, clamp); }
ONUT_FORCE_INLINE void  onutClear(GLbitfield mask) { onutGL.Clear(mask); }
ONUT_FORCE_INLINE void  onutClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { onutGL.ClearAccum(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutClearAccumxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { onutGL.ClearAccumxOES(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data) { onutGL.ClearBufferData(target, internalformat, format, type, data); }
ONUT_FORCE_INLINE void  onutClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) { onutGL.ClearBufferSubData(target, internalformat, offset, size, format, type, data); }
ONUT_FORCE_INLINE void  onutClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) { onutGL.ClearBufferfi(buffer, drawbuffer, depth, stencil); }
ONUT_FORCE_INLINE void  onutClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat * value) { onutGL.ClearBufferfv(buffer, drawbuffer, value); }
ONUT_FORCE_INLINE void  onutClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint * value) { onutGL.ClearBufferiv(buffer, drawbuffer, value); }
ONUT_FORCE_INLINE void  onutClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint * value) { onutGL.ClearBufferuiv(buffer, drawbuffer, value); }
ONUT_FORCE_INLINE void  onutClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { onutGL.ClearColor(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha) { onutGL.ClearColorIiEXT(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha) { onutGL.ClearColorIuiEXT(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutClearColorx(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { onutGL.ClearColorx(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutClearColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { onutGL.ClearColorxOES(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutClearDepth(GLdouble depth) { onutGL.ClearDepth(depth); }
ONUT_FORCE_INLINE void  onutClearDepthdNV(GLdouble depth) { onutGL.ClearDepthdNV(depth); }
ONUT_FORCE_INLINE void  onutClearDepthf(GLfloat d) { onutGL.ClearDepthf(d); }
ONUT_FORCE_INLINE void  onutClearDepthfOES(GLclampf depth) { onutGL.ClearDepthfOES(depth); }
ONUT_FORCE_INLINE void  onutClearDepthx(GLfixed depth) { onutGL.ClearDepthx(depth); }
ONUT_FORCE_INLINE void  onutClearDepthxOES(GLfixed depth) { onutGL.ClearDepthxOES(depth); }
ONUT_FORCE_INLINE void  onutClearIndex(GLfloat c) { onutGL.ClearIndex(c); }
ONUT_FORCE_INLINE void  onutClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data) { onutGL.ClearNamedBufferData(buffer, internalformat, format, type, data); }
ONUT_FORCE_INLINE void  onutClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data) { onutGL.ClearNamedBufferDataEXT(buffer, internalformat, format, type, data); }
ONUT_FORCE_INLINE void  onutClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) { onutGL.ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data); }
ONUT_FORCE_INLINE void  onutClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) { onutGL.ClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data); }
ONUT_FORCE_INLINE void  onutClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) { onutGL.ClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil); }
ONUT_FORCE_INLINE void  onutClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value) { onutGL.ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value); }
ONUT_FORCE_INLINE void  onutClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value) { onutGL.ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value); }
ONUT_FORCE_INLINE void  onutClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value) { onutGL.ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value); }
ONUT_FORCE_INLINE void  onutClearPixelLocalStorageuiEXT(GLsizei offset, GLsizei n, const GLuint * values) { onutGL.ClearPixelLocalStorageuiEXT(offset, n, values); }
ONUT_FORCE_INLINE void  onutClearStencil(GLint s) { onutGL.ClearStencil(s); }
ONUT_FORCE_INLINE void  onutClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void * data) { onutGL.ClearTexImage(texture, level, format, type, data); }
ONUT_FORCE_INLINE void  onutClearTexImageEXT(GLuint texture, GLint level, GLenum format, GLenum type, const void * data) { onutGL.ClearTexImageEXT(texture, level, format, type, data); }
ONUT_FORCE_INLINE void  onutClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data) { onutGL.ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data); }
ONUT_FORCE_INLINE void  onutClearTexSubImageEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data) { onutGL.ClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data); }
ONUT_FORCE_INLINE void  onutClientActiveTexture(GLenum texture) { onutGL.ClientActiveTexture(texture); }
ONUT_FORCE_INLINE void  onutClientActiveTextureARB(GLenum texture) { onutGL.ClientActiveTextureARB(texture); }
ONUT_FORCE_INLINE void  onutClientActiveVertexStreamATI(GLenum stream) { onutGL.ClientActiveVertexStreamATI(stream); }
ONUT_FORCE_INLINE void  onutClientAttribDefaultEXT(GLbitfield mask) { onutGL.ClientAttribDefaultEXT(mask); }
ONUT_FORCE_INLINE GLenum onutClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) { return onutGL.ClientWaitSync(sync, flags, timeout); }
ONUT_FORCE_INLINE GLenum onutClientWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout) { return onutGL.ClientWaitSyncAPPLE(sync, flags, timeout); }
ONUT_FORCE_INLINE void  onutClipControl(GLenum origin, GLenum depth) { onutGL.ClipControl(origin, depth); }
ONUT_FORCE_INLINE void  onutClipPlane(GLenum plane, const GLdouble * equation) { onutGL.ClipPlane(plane, equation); }
ONUT_FORCE_INLINE void  onutClipPlanef(GLenum p, const GLfloat * eqn) { onutGL.ClipPlanef(p, eqn); }
ONUT_FORCE_INLINE void  onutClipPlanefIMG(GLenum p, const GLfloat * eqn) { onutGL.ClipPlanefIMG(p, eqn); }
ONUT_FORCE_INLINE void  onutClipPlanefOES(GLenum plane, const GLfloat * equation) { onutGL.ClipPlanefOES(plane, equation); }
ONUT_FORCE_INLINE void  onutClipPlanex(GLenum plane, const GLfixed * equation) { onutGL.ClipPlanex(plane, equation); }
ONUT_FORCE_INLINE void  onutClipPlanexIMG(GLenum p, const GLfixed * eqn) { onutGL.ClipPlanexIMG(p, eqn); }
ONUT_FORCE_INLINE void  onutClipPlanexOES(GLenum plane, const GLfixed * equation) { onutGL.ClipPlanexOES(plane, equation); }
ONUT_FORCE_INLINE void  onutColor3b(GLbyte red, GLbyte green, GLbyte blue) { onutGL.Color3b(red, green, blue); }
ONUT_FORCE_INLINE void  onutColor3bv(const GLbyte * v) { onutGL.Color3bv(v); }
ONUT_FORCE_INLINE void  onutColor3d(GLdouble red, GLdouble green, GLdouble blue) { onutGL.Color3d(red, green, blue); }
ONUT_FORCE_INLINE void  onutColor3dv(const GLdouble * v) { onutGL.Color3dv(v); }
ONUT_FORCE_INLINE void  onutColor3f(GLfloat red, GLfloat green, GLfloat blue) { onutGL.Color3f(red, green, blue); }
ONUT_FORCE_INLINE void  onutColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { onutGL.Color3fVertex3fSUN(r, g, b, x, y, z); }
ONUT_FORCE_INLINE void  onutColor3fVertex3fvSUN(const GLfloat * c, const GLfloat * v) { onutGL.Color3fVertex3fvSUN(c, v); }
ONUT_FORCE_INLINE void  onutColor3fv(const GLfloat * v) { onutGL.Color3fv(v); }
ONUT_FORCE_INLINE void  onutColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue) { onutGL.Color3hNV(red, green, blue); }
ONUT_FORCE_INLINE void  onutColor3hvNV(const GLhalfNV * v) { onutGL.Color3hvNV(v); }
ONUT_FORCE_INLINE void  onutColor3i(GLint red, GLint green, GLint blue) { onutGL.Color3i(red, green, blue); }
ONUT_FORCE_INLINE void  onutColor3iv(const GLint * v) { onutGL.Color3iv(v); }
ONUT_FORCE_INLINE void  onutColor3s(GLshort red, GLshort green, GLshort blue) { onutGL.Color3s(red, green, blue); }
ONUT_FORCE_INLINE void  onutColor3sv(const GLshort * v) { onutGL.Color3sv(v); }
ONUT_FORCE_INLINE void  onutColor3ub(GLubyte red, GLubyte green, GLubyte blue) { onutGL.Color3ub(red, green, blue); }
ONUT_FORCE_INLINE void  onutColor3ubv(const GLubyte * v) { onutGL.Color3ubv(v); }
ONUT_FORCE_INLINE void  onutColor3ui(GLuint red, GLuint green, GLuint blue) { onutGL.Color3ui(red, green, blue); }
ONUT_FORCE_INLINE void  onutColor3uiv(const GLuint * v) { onutGL.Color3uiv(v); }
ONUT_FORCE_INLINE void  onutColor3us(GLushort red, GLushort green, GLushort blue) { onutGL.Color3us(red, green, blue); }
ONUT_FORCE_INLINE void  onutColor3usv(const GLushort * v) { onutGL.Color3usv(v); }
ONUT_FORCE_INLINE void  onutColor3xOES(GLfixed red, GLfixed green, GLfixed blue) { onutGL.Color3xOES(red, green, blue); }
ONUT_FORCE_INLINE void  onutColor3xvOES(const GLfixed * components) { onutGL.Color3xvOES(components); }
ONUT_FORCE_INLINE void  onutColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) { onutGL.Color4b(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutColor4bv(const GLbyte * v) { onutGL.Color4bv(v); }
ONUT_FORCE_INLINE void  onutColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) { onutGL.Color4d(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutColor4dv(const GLdouble * v) { onutGL.Color4dv(v); }
ONUT_FORCE_INLINE void  onutColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { onutGL.Color4f(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { onutGL.Color4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z); }
ONUT_FORCE_INLINE void  onutColor4fNormal3fVertex3fvSUN(const GLfloat * c, const GLfloat * n, const GLfloat * v) { onutGL.Color4fNormal3fVertex3fvSUN(c, n, v); }
ONUT_FORCE_INLINE void  onutColor4fv(const GLfloat * v) { onutGL.Color4fv(v); }
ONUT_FORCE_INLINE void  onutColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha) { onutGL.Color4hNV(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutColor4hvNV(const GLhalfNV * v) { onutGL.Color4hvNV(v); }
ONUT_FORCE_INLINE void  onutColor4i(GLint red, GLint green, GLint blue, GLint alpha) { onutGL.Color4i(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutColor4iv(const GLint * v) { onutGL.Color4iv(v); }
ONUT_FORCE_INLINE void  onutColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha) { onutGL.Color4s(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutColor4sv(const GLshort * v) { onutGL.Color4sv(v); }
ONUT_FORCE_INLINE void  onutColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) { onutGL.Color4ub(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y) { onutGL.Color4ubVertex2fSUN(r, g, b, a, x, y); }
ONUT_FORCE_INLINE void  onutColor4ubVertex2fvSUN(const GLubyte * c, const GLfloat * v) { onutGL.Color4ubVertex2fvSUN(c, v); }
ONUT_FORCE_INLINE void  onutColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { onutGL.Color4ubVertex3fSUN(r, g, b, a, x, y, z); }
ONUT_FORCE_INLINE void  onutColor4ubVertex3fvSUN(const GLubyte * c, const GLfloat * v) { onutGL.Color4ubVertex3fvSUN(c, v); }
ONUT_FORCE_INLINE void  onutColor4ubv(const GLubyte * v) { onutGL.Color4ubv(v); }
ONUT_FORCE_INLINE void  onutColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha) { onutGL.Color4ui(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutColor4uiv(const GLuint * v) { onutGL.Color4uiv(v); }
ONUT_FORCE_INLINE void  onutColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha) { onutGL.Color4us(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutColor4usv(const GLushort * v) { onutGL.Color4usv(v); }
ONUT_FORCE_INLINE void  onutColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { onutGL.Color4x(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutColor4xOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { onutGL.Color4xOES(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutColor4xvOES(const GLfixed * components) { onutGL.Color4xvOES(components); }
ONUT_FORCE_INLINE void  onutColorFormatNV(GLint size, GLenum type, GLsizei stride) { onutGL.ColorFormatNV(size, type, stride); }
ONUT_FORCE_INLINE void  onutColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) { onutGL.ColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod); }
ONUT_FORCE_INLINE void  onutColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) { onutGL.ColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod); }
ONUT_FORCE_INLINE void  onutColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) { onutGL.ColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod); }
ONUT_FORCE_INLINE void  onutColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) { onutGL.ColorMask(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { onutGL.ColorMaskIndexedEXT(index, r, g, b, a); }
ONUT_FORCE_INLINE void  onutColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { onutGL.ColorMaski(index, r, g, b, a); }
ONUT_FORCE_INLINE void  onutColorMaskiEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { onutGL.ColorMaskiEXT(index, r, g, b, a); }
ONUT_FORCE_INLINE void  onutColorMaskiOES(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { onutGL.ColorMaskiOES(index, r, g, b, a); }
ONUT_FORCE_INLINE void  onutColorMaterial(GLenum face, GLenum mode) { onutGL.ColorMaterial(face, mode); }
ONUT_FORCE_INLINE void  onutColorP3ui(GLenum type, GLuint color) { onutGL.ColorP3ui(type, color); }
ONUT_FORCE_INLINE void  onutColorP3uiv(GLenum type, const GLuint * color) { onutGL.ColorP3uiv(type, color); }
ONUT_FORCE_INLINE void  onutColorP4ui(GLenum type, GLuint color) { onutGL.ColorP4ui(type, color); }
ONUT_FORCE_INLINE void  onutColorP4uiv(GLenum type, const GLuint * color) { onutGL.ColorP4uiv(type, color); }
ONUT_FORCE_INLINE void  onutColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { onutGL.ColorPointer(size, type, stride, pointer); }
ONUT_FORCE_INLINE void  onutColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) { onutGL.ColorPointerEXT(size, type, stride, count, pointer); }
ONUT_FORCE_INLINE void  onutColorPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { onutGL.ColorPointerListIBM(size, type, stride, pointer, ptrstride); }
ONUT_FORCE_INLINE void  onutColorPointervINTEL(GLint size, GLenum type, const void ** pointer) { onutGL.ColorPointervINTEL(size, type, pointer); }
ONUT_FORCE_INLINE void  onutColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data) { onutGL.ColorSubTable(target, start, count, format, type, data); }
ONUT_FORCE_INLINE void  onutColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data) { onutGL.ColorSubTableEXT(target, start, count, format, type, data); }
ONUT_FORCE_INLINE void  onutColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table) { onutGL.ColorTable(target, internalformat, width, format, type, table); }
ONUT_FORCE_INLINE void  onutColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void * table) { onutGL.ColorTableEXT(target, internalFormat, width, format, type, table); }
ONUT_FORCE_INLINE void  onutColorTableParameterfv(GLenum target, GLenum pname, const GLfloat * params) { onutGL.ColorTableParameterfv(target, pname, params); }
ONUT_FORCE_INLINE void  onutColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat * params) { onutGL.ColorTableParameterfvSGI(target, pname, params); }
ONUT_FORCE_INLINE void  onutColorTableParameteriv(GLenum target, GLenum pname, const GLint * params) { onutGL.ColorTableParameteriv(target, pname, params); }
ONUT_FORCE_INLINE void  onutColorTableParameterivSGI(GLenum target, GLenum pname, const GLint * params) { onutGL.ColorTableParameterivSGI(target, pname, params); }
ONUT_FORCE_INLINE void  onutColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table) { onutGL.ColorTableSGI(target, internalformat, width, format, type, table); }
ONUT_FORCE_INLINE void  onutCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) { onutGL.CombinerInputNV(stage, portion, variable, input, mapping, componentUsage); }
ONUT_FORCE_INLINE void  onutCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum) { onutGL.CombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum); }
ONUT_FORCE_INLINE void  onutCombinerParameterfNV(GLenum pname, GLfloat param) { onutGL.CombinerParameterfNV(pname, param); }
ONUT_FORCE_INLINE void  onutCombinerParameterfvNV(GLenum pname, const GLfloat * params) { onutGL.CombinerParameterfvNV(pname, params); }
ONUT_FORCE_INLINE void  onutCombinerParameteriNV(GLenum pname, GLint param) { onutGL.CombinerParameteriNV(pname, param); }
ONUT_FORCE_INLINE void  onutCombinerParameterivNV(GLenum pname, const GLint * params) { onutGL.CombinerParameterivNV(pname, params); }
ONUT_FORCE_INLINE void  onutCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat * params) { onutGL.CombinerStageParameterfvNV(stage, pname, params); }
ONUT_FORCE_INLINE void  onutCommandListSegmentsNV(GLuint list, GLuint segments) { onutGL.CommandListSegmentsNV(list, segments); }
ONUT_FORCE_INLINE void  onutCompileCommandListNV(GLuint list) { onutGL.CompileCommandListNV(list); }
ONUT_FORCE_INLINE void  onutCompileShader(GLuint shader) { onutGL.CompileShader(shader); }
ONUT_FORCE_INLINE void  onutCompileShaderARB(GLhandleARB shaderObj) { onutGL.CompileShaderARB(shaderObj); }
ONUT_FORCE_INLINE void  onutCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar *const* path, const GLint * length) { onutGL.CompileShaderIncludeARB(shader, count, path, length); }
ONUT_FORCE_INLINE void  onutCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits) { onutGL.CompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits); }
ONUT_FORCE_INLINE void  onutCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits) { onutGL.CompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits); }
ONUT_FORCE_INLINE void  onutCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits) { onutGL.CompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits); }
ONUT_FORCE_INLINE void  onutCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits) { onutGL.CompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits); }
ONUT_FORCE_INLINE void  onutCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits) { onutGL.CompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits); }
ONUT_FORCE_INLINE void  onutCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits) { onutGL.CompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits); }
ONUT_FORCE_INLINE void  onutCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) { onutGL.CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data); }
ONUT_FORCE_INLINE void  onutCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) { onutGL.CompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data); }
ONUT_FORCE_INLINE void  onutCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) { onutGL.CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data); }
ONUT_FORCE_INLINE void  onutCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) { onutGL.CompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data); }
ONUT_FORCE_INLINE void  onutCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) { onutGL.CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data); }
ONUT_FORCE_INLINE void  onutCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) { onutGL.CompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data); }
ONUT_FORCE_INLINE void  onutCompressedTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) { onutGL.CompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data); }
ONUT_FORCE_INLINE void  onutCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) { onutGL.CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data); }
ONUT_FORCE_INLINE void  onutCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) { onutGL.CompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data); }
ONUT_FORCE_INLINE void  onutCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) { onutGL.CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data); }
ONUT_FORCE_INLINE void  onutCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) { onutGL.CompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data); }
ONUT_FORCE_INLINE void  onutCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { onutGL.CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
ONUT_FORCE_INLINE void  onutCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { onutGL.CompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
ONUT_FORCE_INLINE void  onutCompressedTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { onutGL.CompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
ONUT_FORCE_INLINE void  onutCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits) { onutGL.CompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits); }
ONUT_FORCE_INLINE void  onutCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits) { onutGL.CompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits); }
ONUT_FORCE_INLINE void  onutCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits) { onutGL.CompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits); }
ONUT_FORCE_INLINE void  onutCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) { onutGL.CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data); }
ONUT_FORCE_INLINE void  onutCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits) { onutGL.CompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits); }
ONUT_FORCE_INLINE void  onutCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) { onutGL.CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data); }
ONUT_FORCE_INLINE void  onutCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits) { onutGL.CompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits); }
ONUT_FORCE_INLINE void  onutCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { onutGL.CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
ONUT_FORCE_INLINE void  onutCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits) { onutGL.CompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits); }
ONUT_FORCE_INLINE void  onutConservativeRasterParameterfNV(GLenum pname, GLfloat value) { onutGL.ConservativeRasterParameterfNV(pname, value); }
ONUT_FORCE_INLINE void  onutConservativeRasterParameteriNV(GLenum pname, GLint param) { onutGL.ConservativeRasterParameteriNV(pname, param); }
ONUT_FORCE_INLINE void  onutConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image) { onutGL.ConvolutionFilter1D(target, internalformat, width, format, type, image); }
ONUT_FORCE_INLINE void  onutConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image) { onutGL.ConvolutionFilter1DEXT(target, internalformat, width, format, type, image); }
ONUT_FORCE_INLINE void  onutConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image) { onutGL.ConvolutionFilter2D(target, internalformat, width, height, format, type, image); }
ONUT_FORCE_INLINE void  onutConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image) { onutGL.ConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image); }
ONUT_FORCE_INLINE void  onutConvolutionParameterf(GLenum target, GLenum pname, GLfloat params) { onutGL.ConvolutionParameterf(target, pname, params); }
ONUT_FORCE_INLINE void  onutConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat params) { onutGL.ConvolutionParameterfEXT(target, pname, params); }
ONUT_FORCE_INLINE void  onutConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat * params) { onutGL.ConvolutionParameterfv(target, pname, params); }
ONUT_FORCE_INLINE void  onutConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat * params) { onutGL.ConvolutionParameterfvEXT(target, pname, params); }
ONUT_FORCE_INLINE void  onutConvolutionParameteri(GLenum target, GLenum pname, GLint params) { onutGL.ConvolutionParameteri(target, pname, params); }
ONUT_FORCE_INLINE void  onutConvolutionParameteriEXT(GLenum target, GLenum pname, GLint params) { onutGL.ConvolutionParameteriEXT(target, pname, params); }
ONUT_FORCE_INLINE void  onutConvolutionParameteriv(GLenum target, GLenum pname, const GLint * params) { onutGL.ConvolutionParameteriv(target, pname, params); }
ONUT_FORCE_INLINE void  onutConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint * params) { onutGL.ConvolutionParameterivEXT(target, pname, params); }
ONUT_FORCE_INLINE void  onutConvolutionParameterxOES(GLenum target, GLenum pname, GLfixed param) { onutGL.ConvolutionParameterxOES(target, pname, param); }
ONUT_FORCE_INLINE void  onutConvolutionParameterxvOES(GLenum target, GLenum pname, const GLfixed * params) { onutGL.ConvolutionParameterxvOES(target, pname, params); }
ONUT_FORCE_INLINE void  onutCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { onutGL.CopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size); }
ONUT_FORCE_INLINE void  onutCopyBufferSubDataNV(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { onutGL.CopyBufferSubDataNV(readTarget, writeTarget, readOffset, writeOffset, size); }
ONUT_FORCE_INLINE void  onutCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) { onutGL.CopyColorSubTable(target, start, x, y, width); }
ONUT_FORCE_INLINE void  onutCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) { onutGL.CopyColorSubTableEXT(target, start, x, y, width); }
ONUT_FORCE_INLINE void  onutCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { onutGL.CopyColorTable(target, internalformat, x, y, width); }
ONUT_FORCE_INLINE void  onutCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { onutGL.CopyColorTableSGI(target, internalformat, x, y, width); }
ONUT_FORCE_INLINE void  onutCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { onutGL.CopyConvolutionFilter1D(target, internalformat, x, y, width); }
ONUT_FORCE_INLINE void  onutCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { onutGL.CopyConvolutionFilter1DEXT(target, internalformat, x, y, width); }
ONUT_FORCE_INLINE void  onutCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) { onutGL.CopyConvolutionFilter2D(target, internalformat, x, y, width, height); }
ONUT_FORCE_INLINE void  onutCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) { onutGL.CopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height); }
ONUT_FORCE_INLINE void  onutCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { onutGL.CopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
ONUT_FORCE_INLINE void  onutCopyImageSubDataEXT(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { onutGL.CopyImageSubDataEXT(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
ONUT_FORCE_INLINE void  onutCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) { onutGL.CopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth); }
ONUT_FORCE_INLINE void  onutCopyImageSubDataOES(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { onutGL.CopyImageSubDataOES(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
ONUT_FORCE_INLINE void  onutCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { onutGL.CopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border); }
ONUT_FORCE_INLINE void  onutCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { onutGL.CopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border); }
ONUT_FORCE_INLINE void  onutCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { onutGL.CopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width); }
ONUT_FORCE_INLINE void  onutCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { onutGL.CopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height); }
ONUT_FORCE_INLINE void  onutCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { onutGL.CopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height); }
ONUT_FORCE_INLINE void  onutCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { onutGL.CopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size); }
ONUT_FORCE_INLINE void  onutCopyPathNV(GLuint resultPath, GLuint srcPath) { onutGL.CopyPathNV(resultPath, srcPath); }
ONUT_FORCE_INLINE void  onutCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) { onutGL.CopyPixels(x, y, width, height, type); }
ONUT_FORCE_INLINE void  onutCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { onutGL.CopyTexImage1D(target, level, internalformat, x, y, width, border); }
ONUT_FORCE_INLINE void  onutCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { onutGL.CopyTexImage1DEXT(target, level, internalformat, x, y, width, border); }
ONUT_FORCE_INLINE void  onutCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { onutGL.CopyTexImage2D(target, level, internalformat, x, y, width, height, border); }
ONUT_FORCE_INLINE void  onutCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { onutGL.CopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border); }
ONUT_FORCE_INLINE void  onutCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { onutGL.CopyTexSubImage1D(target, level, xoffset, x, y, width); }
ONUT_FORCE_INLINE void  onutCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { onutGL.CopyTexSubImage1DEXT(target, level, xoffset, x, y, width); }
ONUT_FORCE_INLINE void  onutCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { onutGL.CopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height); }
ONUT_FORCE_INLINE void  onutCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { onutGL.CopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height); }
ONUT_FORCE_INLINE void  onutCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { onutGL.CopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height); }
ONUT_FORCE_INLINE void  onutCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { onutGL.CopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height); }
ONUT_FORCE_INLINE void  onutCopyTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { onutGL.CopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height); }
ONUT_FORCE_INLINE void  onutCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { onutGL.CopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border); }
ONUT_FORCE_INLINE void  onutCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { onutGL.CopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border); }
ONUT_FORCE_INLINE void  onutCopyTextureLevelsAPPLE(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount) { onutGL.CopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount); }
ONUT_FORCE_INLINE void  onutCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { onutGL.CopyTextureSubImage1D(texture, level, xoffset, x, y, width); }
ONUT_FORCE_INLINE void  onutCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { onutGL.CopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width); }
ONUT_FORCE_INLINE void  onutCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { onutGL.CopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height); }
ONUT_FORCE_INLINE void  onutCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { onutGL.CopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height); }
ONUT_FORCE_INLINE void  onutCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { onutGL.CopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height); }
ONUT_FORCE_INLINE void  onutCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { onutGL.CopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height); }
ONUT_FORCE_INLINE void  onutCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { onutGL.CoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues); }
ONUT_FORCE_INLINE void  onutCoverFillPathNV(GLuint path, GLenum coverMode) { onutGL.CoverFillPathNV(path, coverMode); }
ONUT_FORCE_INLINE void  onutCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { onutGL.CoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues); }
ONUT_FORCE_INLINE void  onutCoverStrokePathNV(GLuint path, GLenum coverMode) { onutGL.CoverStrokePathNV(path, coverMode); }
ONUT_FORCE_INLINE void  onutCoverageMaskNV(GLboolean mask) { onutGL.CoverageMaskNV(mask); }
ONUT_FORCE_INLINE void  onutCoverageModulationNV(GLenum components) { onutGL.CoverageModulationNV(components); }
ONUT_FORCE_INLINE void  onutCoverageModulationTableNV(GLsizei n, const GLfloat * v) { onutGL.CoverageModulationTableNV(n, v); }
ONUT_FORCE_INLINE void  onutCoverageOperationNV(GLenum operation) { onutGL.CoverageOperationNV(operation); }
ONUT_FORCE_INLINE void  onutCreateBuffers(GLsizei n, GLuint * buffers) { onutGL.CreateBuffers(n, buffers); }
ONUT_FORCE_INLINE void  onutCreateCommandListsNV(GLsizei n, GLuint * lists) { onutGL.CreateCommandListsNV(n, lists); }
ONUT_FORCE_INLINE void  onutCreateFramebuffers(GLsizei n, GLuint * framebuffers) { onutGL.CreateFramebuffers(n, framebuffers); }
ONUT_FORCE_INLINE void  onutCreateMemoryObjectsEXT(GLsizei n, GLuint * memoryObjects) { onutGL.CreateMemoryObjectsEXT(n, memoryObjects); }
ONUT_FORCE_INLINE void  onutCreatePerfQueryINTEL(GLuint queryId, GLuint * queryHandle) { onutGL.CreatePerfQueryINTEL(queryId, queryHandle); }
ONUT_FORCE_INLINE GLuint onutCreateProgram(void) { return onutGL.CreateProgram(); }
ONUT_FORCE_INLINE GLhandleARB onutCreateProgramObjectARB(void) { return onutGL.CreateProgramObjectARB(); }
ONUT_FORCE_INLINE void  onutCreateProgramPipelines(GLsizei n, GLuint * pipelines) { onutGL.CreateProgramPipelines(n, pipelines); }
ONUT_FORCE_INLINE void  onutCreateQueries(GLenum target, GLsizei n, GLuint * ids) { onutGL.CreateQueries(target, n, ids); }
ONUT_FORCE_INLINE void  onutCreateRenderbuffers(GLsizei n, GLuint * renderbuffers) { onutGL.CreateRenderbuffers(n, renderbuffers); }
ONUT_FORCE_INLINE void  onutCreateSamplers(GLsizei n, GLuint * samplers) { onutGL.CreateSamplers(n, samplers); }
ONUT_FORCE_INLINE GLuint onutCreateShader(GLenum type) { return onutGL.CreateShader(type); }
ONUT_FORCE_INLINE GLhandleARB onutCreateShaderObjectARB(GLenum shaderType) { return onutGL.CreateShaderObjectARB(shaderType); }
ONUT_FORCE_INLINE GLuint onutCreateShaderProgramEXT(GLenum type, const GLchar * string) { return onutGL.CreateShaderProgramEXT(type, string); }
ONUT_FORCE_INLINE GLuint onutCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const* strings) { return onutGL.CreateShaderProgramv(type, count, strings); }
ONUT_FORCE_INLINE GLuint onutCreateShaderProgramvEXT(GLenum type, GLsizei count, const GLchar ** strings) { return onutGL.CreateShaderProgramvEXT(type, count, strings); }
ONUT_FORCE_INLINE void  onutCreateStatesNV(GLsizei n, GLuint * states) { onutGL.CreateStatesNV(n, states); }
ONUT_FORCE_INLINE GLsync onutCreateSyncFromCLeventARB(struct _cl_context * context, struct _cl_event * event, GLbitfield flags) { return onutGL.CreateSyncFromCLeventARB(context, event, flags); }
ONUT_FORCE_INLINE void  onutCreateTextures(GLenum target, GLsizei n, GLuint * textures) { onutGL.CreateTextures(target, n, textures); }
ONUT_FORCE_INLINE void  onutCreateTransformFeedbacks(GLsizei n, GLuint * ids) { onutGL.CreateTransformFeedbacks(n, ids); }
ONUT_FORCE_INLINE void  onutCreateVertexArrays(GLsizei n, GLuint * arrays) { onutGL.CreateVertexArrays(n, arrays); }
ONUT_FORCE_INLINE void  onutCullFace(GLenum mode) { onutGL.CullFace(mode); }
ONUT_FORCE_INLINE void  onutCullParameterdvEXT(GLenum pname, GLdouble * params) { onutGL.CullParameterdvEXT(pname, params); }
ONUT_FORCE_INLINE void  onutCullParameterfvEXT(GLenum pname, GLfloat * params) { onutGL.CullParameterfvEXT(pname, params); }
ONUT_FORCE_INLINE void  onutCurrentPaletteMatrixARB(GLint index) { onutGL.CurrentPaletteMatrixARB(index); }
ONUT_FORCE_INLINE void  onutCurrentPaletteMatrixOES(GLuint matrixpaletteindex) { onutGL.CurrentPaletteMatrixOES(matrixpaletteindex); }
ONUT_FORCE_INLINE void  onutDebugMessageCallback(GLDEBUGPROC callback, const void * userParam) { onutGL.DebugMessageCallback(callback, userParam); }
ONUT_FORCE_INLINE void  onutDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, void * userParam) { onutGL.DebugMessageCallbackAMD(callback, userParam); }
ONUT_FORCE_INLINE void  onutDebugMessageCallbackARB(GLDEBUGPROCARB callback, const void * userParam) { onutGL.DebugMessageCallbackARB(callback, userParam); }
ONUT_FORCE_INLINE void  onutDebugMessageCallbackKHR(GLDEBUGPROCKHR callback, const void * userParam) { onutGL.DebugMessageCallbackKHR(callback, userParam); }
ONUT_FORCE_INLINE void  onutDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { onutGL.DebugMessageControl(source, type, severity, count, ids, enabled); }
ONUT_FORCE_INLINE void  onutDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { onutGL.DebugMessageControlARB(source, type, severity, count, ids, enabled); }
ONUT_FORCE_INLINE void  onutDebugMessageControlKHR(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { onutGL.DebugMessageControlKHR(source, type, severity, count, ids, enabled); }
ONUT_FORCE_INLINE void  onutDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { onutGL.DebugMessageEnableAMD(category, severity, count, ids, enabled); }
ONUT_FORCE_INLINE void  onutDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) { onutGL.DebugMessageInsert(source, type, id, severity, length, buf); }
ONUT_FORCE_INLINE void  onutDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar * buf) { onutGL.DebugMessageInsertAMD(category, severity, id, length, buf); }
ONUT_FORCE_INLINE void  onutDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) { onutGL.DebugMessageInsertARB(source, type, id, severity, length, buf); }
ONUT_FORCE_INLINE void  onutDebugMessageInsertKHR(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) { onutGL.DebugMessageInsertKHR(source, type, id, severity, length, buf); }
ONUT_FORCE_INLINE void  onutDeformSGIX(GLbitfield mask) { onutGL.DeformSGIX(mask); }
ONUT_FORCE_INLINE void  onutDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble * points) { onutGL.DeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points); }
ONUT_FORCE_INLINE void  onutDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat * points) { onutGL.DeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points); }
ONUT_FORCE_INLINE void  onutDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range) { onutGL.DeleteAsyncMarkersSGIX(marker, range); }
ONUT_FORCE_INLINE void  onutDeleteBufferRegion(GLenum region) { onutGL.DeleteBufferRegion(region); }
ONUT_FORCE_INLINE void  onutDeleteBuffers(GLsizei n, const GLuint * buffers) { onutGL.DeleteBuffers(n, buffers); }
ONUT_FORCE_INLINE void  onutDeleteBuffersARB(GLsizei n, const GLuint * buffers) { onutGL.DeleteBuffersARB(n, buffers); }
ONUT_FORCE_INLINE void  onutDeleteCommandListsNV(GLsizei n, const GLuint * lists) { onutGL.DeleteCommandListsNV(n, lists); }
ONUT_FORCE_INLINE void  onutDeleteFencesAPPLE(GLsizei n, const GLuint * fences) { onutGL.DeleteFencesAPPLE(n, fences); }
ONUT_FORCE_INLINE void  onutDeleteFencesNV(GLsizei n, const GLuint * fences) { onutGL.DeleteFencesNV(n, fences); }
ONUT_FORCE_INLINE void  onutDeleteFragmentShaderATI(GLuint id) { onutGL.DeleteFragmentShaderATI(id); }
ONUT_FORCE_INLINE void  onutDeleteFramebuffers(GLsizei n, const GLuint * framebuffers) { onutGL.DeleteFramebuffers(n, framebuffers); }
ONUT_FORCE_INLINE void  onutDeleteFramebuffersEXT(GLsizei n, const GLuint * framebuffers) { onutGL.DeleteFramebuffersEXT(n, framebuffers); }
ONUT_FORCE_INLINE void  onutDeleteFramebuffersOES(GLsizei n, const GLuint * framebuffers) { onutGL.DeleteFramebuffersOES(n, framebuffers); }
ONUT_FORCE_INLINE void  onutDeleteLists(GLuint list, GLsizei range) { onutGL.DeleteLists(list, range); }
ONUT_FORCE_INLINE void  onutDeleteMemoryObjectsEXT(GLsizei n, const GLuint * memoryObjects) { onutGL.DeleteMemoryObjectsEXT(n, memoryObjects); }
ONUT_FORCE_INLINE void  onutDeleteNamedStringARB(GLint namelen, const GLchar * name) { onutGL.DeleteNamedStringARB(namelen, name); }
ONUT_FORCE_INLINE void  onutDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint * names) { onutGL.DeleteNamesAMD(identifier, num, names); }
ONUT_FORCE_INLINE void  onutDeleteObjectARB(GLhandleARB obj) { onutGL.DeleteObjectARB(obj); }
ONUT_FORCE_INLINE void  onutDeleteOcclusionQueriesNV(GLsizei n, const GLuint * ids) { onutGL.DeleteOcclusionQueriesNV(n, ids); }
ONUT_FORCE_INLINE void  onutDeletePathsNV(GLuint path, GLsizei range) { onutGL.DeletePathsNV(path, range); }
ONUT_FORCE_INLINE void  onutDeletePerfMonitorsAMD(GLsizei n, GLuint * monitors) { onutGL.DeletePerfMonitorsAMD(n, monitors); }
ONUT_FORCE_INLINE void  onutDeletePerfQueryINTEL(GLuint queryHandle) { onutGL.DeletePerfQueryINTEL(queryHandle); }
ONUT_FORCE_INLINE void  onutDeleteProgram(GLuint program) { onutGL.DeleteProgram(program); }
ONUT_FORCE_INLINE void  onutDeleteProgramPipelines(GLsizei n, const GLuint * pipelines) { onutGL.DeleteProgramPipelines(n, pipelines); }
ONUT_FORCE_INLINE void  onutDeleteProgramPipelinesEXT(GLsizei n, const GLuint * pipelines) { onutGL.DeleteProgramPipelinesEXT(n, pipelines); }
ONUT_FORCE_INLINE void  onutDeleteProgramsARB(GLsizei n, const GLuint * programs) { onutGL.DeleteProgramsARB(n, programs); }
ONUT_FORCE_INLINE void  onutDeleteProgramsNV(GLsizei n, const GLuint * programs) { onutGL.DeleteProgramsNV(n, programs); }
ONUT_FORCE_INLINE void  onutDeleteQueries(GLsizei n, const GLuint * ids) { onutGL.DeleteQueries(n, ids); }
ONUT_FORCE_INLINE void  onutDeleteQueriesARB(GLsizei n, const GLuint * ids) { onutGL.DeleteQueriesARB(n, ids); }
ONUT_FORCE_INLINE void  onutDeleteQueriesEXT(GLsizei n, const GLuint * ids) { onutGL.DeleteQueriesEXT(n, ids); }
ONUT_FORCE_INLINE void  onutDeleteRenderbuffers(GLsizei n, const GLuint * renderbuffers) { onutGL.DeleteRenderbuffers(n, renderbuffers); }
ONUT_FORCE_INLINE void  onutDeleteRenderbuffersEXT(GLsizei n, const GLuint * renderbuffers) { onutGL.DeleteRenderbuffersEXT(n, renderbuffers); }
ONUT_FORCE_INLINE void  onutDeleteRenderbuffersOES(GLsizei n, const GLuint * renderbuffers) { onutGL.DeleteRenderbuffersOES(n, renderbuffers); }
ONUT_FORCE_INLINE void  onutDeleteSamplers(GLsizei count, const GLuint * samplers) { onutGL.DeleteSamplers(count, samplers); }
ONUT_FORCE_INLINE void  onutDeleteSemaphoresEXT(GLsizei n, const GLuint * semaphores) { onutGL.DeleteSemaphoresEXT(n, semaphores); }
ONUT_FORCE_INLINE void  onutDeleteShader(GLuint shader) { onutGL.DeleteShader(shader); }
ONUT_FORCE_INLINE void  onutDeleteStatesNV(GLsizei n, const GLuint * states) { onutGL.DeleteStatesNV(n, states); }
ONUT_FORCE_INLINE void  onutDeleteSync(GLsync sync) { onutGL.DeleteSync(sync); }
ONUT_FORCE_INLINE void  onutDeleteSyncAPPLE(GLsync sync) { onutGL.DeleteSyncAPPLE(sync); }
ONUT_FORCE_INLINE void  onutDeleteTextures(GLsizei n, const GLuint * textures) { onutGL.DeleteTextures(n, textures); }
ONUT_FORCE_INLINE void  onutDeleteTexturesEXT(GLsizei n, const GLuint * textures) { onutGL.DeleteTexturesEXT(n, textures); }
ONUT_FORCE_INLINE void  onutDeleteTransformFeedbacks(GLsizei n, const GLuint * ids) { onutGL.DeleteTransformFeedbacks(n, ids); }
ONUT_FORCE_INLINE void  onutDeleteTransformFeedbacksNV(GLsizei n, const GLuint * ids) { onutGL.DeleteTransformFeedbacksNV(n, ids); }
ONUT_FORCE_INLINE void  onutDeleteVertexArrays(GLsizei n, const GLuint * arrays) { onutGL.DeleteVertexArrays(n, arrays); }
ONUT_FORCE_INLINE void  onutDeleteVertexArraysAPPLE(GLsizei n, const GLuint * arrays) { onutGL.DeleteVertexArraysAPPLE(n, arrays); }
ONUT_FORCE_INLINE void  onutDeleteVertexArraysOES(GLsizei n, const GLuint * arrays) { onutGL.DeleteVertexArraysOES(n, arrays); }
ONUT_FORCE_INLINE void  onutDeleteVertexShaderEXT(GLuint id) { onutGL.DeleteVertexShaderEXT(id); }
ONUT_FORCE_INLINE void  onutDepthBoundsEXT(GLclampd zmin, GLclampd zmax) { onutGL.DepthBoundsEXT(zmin, zmax); }
ONUT_FORCE_INLINE void  onutDepthBoundsdNV(GLdouble zmin, GLdouble zmax) { onutGL.DepthBoundsdNV(zmin, zmax); }
ONUT_FORCE_INLINE void  onutDepthFunc(GLenum func) { onutGL.DepthFunc(func); }
ONUT_FORCE_INLINE void  onutDepthMask(GLboolean flag) { onutGL.DepthMask(flag); }
ONUT_FORCE_INLINE void  onutDepthRange(GLdouble near, GLdouble far) { onutGL.DepthRange(near, far); }
ONUT_FORCE_INLINE void  onutDepthRangeArrayfvNV(GLuint first, GLsizei count, const GLfloat * v) { onutGL.DepthRangeArrayfvNV(first, count, v); }
ONUT_FORCE_INLINE void  onutDepthRangeArrayfvOES(GLuint first, GLsizei count, const GLfloat * v) { onutGL.DepthRangeArrayfvOES(first, count, v); }
ONUT_FORCE_INLINE void  onutDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble * v) { onutGL.DepthRangeArrayv(first, count, v); }
ONUT_FORCE_INLINE void  onutDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f) { onutGL.DepthRangeIndexed(index, n, f); }
ONUT_FORCE_INLINE void  onutDepthRangeIndexedfNV(GLuint index, GLfloat n, GLfloat f) { onutGL.DepthRangeIndexedfNV(index, n, f); }
ONUT_FORCE_INLINE void  onutDepthRangeIndexedfOES(GLuint index, GLfloat n, GLfloat f) { onutGL.DepthRangeIndexedfOES(index, n, f); }
ONUT_FORCE_INLINE void  onutDepthRangedNV(GLdouble zNear, GLdouble zFar) { onutGL.DepthRangedNV(zNear, zFar); }
ONUT_FORCE_INLINE void  onutDepthRangef(GLfloat n, GLfloat f) { onutGL.DepthRangef(n, f); }
ONUT_FORCE_INLINE void  onutDepthRangefOES(GLclampf n, GLclampf f) { onutGL.DepthRangefOES(n, f); }
ONUT_FORCE_INLINE void  onutDepthRangex(GLfixed n, GLfixed f) { onutGL.DepthRangex(n, f); }
ONUT_FORCE_INLINE void  onutDepthRangexOES(GLfixed n, GLfixed f) { onutGL.DepthRangexOES(n, f); }
ONUT_FORCE_INLINE void  onutDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj) { onutGL.DetachObjectARB(containerObj, attachedObj); }
ONUT_FORCE_INLINE void  onutDetachShader(GLuint program, GLuint shader) { onutGL.DetachShader(program, shader); }
ONUT_FORCE_INLINE void  onutDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat * points) { onutGL.DetailTexFuncSGIS(target, n, points); }
ONUT_FORCE_INLINE void  onutDisable(GLenum cap) { onutGL.Disable(cap); }
ONUT_FORCE_INLINE void  onutDisableClientState(GLenum array) { onutGL.DisableClientState(array); }
ONUT_FORCE_INLINE void  onutDisableClientStateIndexedEXT(GLenum array, GLuint index) { onutGL.DisableClientStateIndexedEXT(array, index); }
ONUT_FORCE_INLINE void  onutDisableClientStateiEXT(GLenum array, GLuint index) { onutGL.DisableClientStateiEXT(array, index); }
ONUT_FORCE_INLINE void  onutDisableDriverControlQCOM(GLuint driverControl) { onutGL.DisableDriverControlQCOM(driverControl); }
ONUT_FORCE_INLINE void  onutDisableIndexedEXT(GLenum target, GLuint index) { onutGL.DisableIndexedEXT(target, index); }
ONUT_FORCE_INLINE void  onutDisableVariantClientStateEXT(GLuint id) { onutGL.DisableVariantClientStateEXT(id); }
ONUT_FORCE_INLINE void  onutDisableVertexArrayAttrib(GLuint vaobj, GLuint index) { onutGL.DisableVertexArrayAttrib(vaobj, index); }
ONUT_FORCE_INLINE void  onutDisableVertexArrayAttribEXT(GLuint vaobj, GLuint index) { onutGL.DisableVertexArrayAttribEXT(vaobj, index); }
ONUT_FORCE_INLINE void  onutDisableVertexArrayEXT(GLuint vaobj, GLenum array) { onutGL.DisableVertexArrayEXT(vaobj, array); }
ONUT_FORCE_INLINE void  onutDisableVertexAttribAPPLE(GLuint index, GLenum pname) { onutGL.DisableVertexAttribAPPLE(index, pname); }
ONUT_FORCE_INLINE void  onutDisableVertexAttribArray(GLuint index) { onutGL.DisableVertexAttribArray(index); }
ONUT_FORCE_INLINE void  onutDisableVertexAttribArrayARB(GLuint index) { onutGL.DisableVertexAttribArrayARB(index); }
ONUT_FORCE_INLINE void  onutDisablei(GLenum target, GLuint index) { onutGL.Disablei(target, index); }
ONUT_FORCE_INLINE void  onutDisableiEXT(GLenum target, GLuint index) { onutGL.DisableiEXT(target, index); }
ONUT_FORCE_INLINE void  onutDisableiNV(GLenum target, GLuint index) { onutGL.DisableiNV(target, index); }
ONUT_FORCE_INLINE void  onutDisableiOES(GLenum target, GLuint index) { onutGL.DisableiOES(target, index); }
ONUT_FORCE_INLINE void  onutDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum * attachments) { onutGL.DiscardFramebufferEXT(target, numAttachments, attachments); }
ONUT_FORCE_INLINE void  onutDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) { onutGL.DispatchCompute(num_groups_x, num_groups_y, num_groups_z); }
ONUT_FORCE_INLINE void  onutDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) { onutGL.DispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z); }
ONUT_FORCE_INLINE void  onutDispatchComputeIndirect(GLintptr indirect) { onutGL.DispatchComputeIndirect(indirect); }
ONUT_FORCE_INLINE void  onutDrawArrays(GLenum mode, GLint first, GLsizei count) { onutGL.DrawArrays(mode, first, count); }
ONUT_FORCE_INLINE void  onutDrawArraysEXT(GLenum mode, GLint first, GLsizei count) { onutGL.DrawArraysEXT(mode, first, count); }
ONUT_FORCE_INLINE void  onutDrawArraysIndirect(GLenum mode, const void * indirect) { onutGL.DrawArraysIndirect(mode, indirect); }
ONUT_FORCE_INLINE void  onutDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) { onutGL.DrawArraysInstanced(mode, first, count, instancecount); }
ONUT_FORCE_INLINE void  onutDrawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount) { onutGL.DrawArraysInstancedANGLE(mode, first, count, primcount); }
ONUT_FORCE_INLINE void  onutDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount) { onutGL.DrawArraysInstancedARB(mode, first, count, primcount); }
ONUT_FORCE_INLINE void  onutDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) { onutGL.DrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance); }
ONUT_FORCE_INLINE void  onutDrawArraysInstancedBaseInstanceEXT(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) { onutGL.DrawArraysInstancedBaseInstanceEXT(mode, first, count, instancecount, baseinstance); }
ONUT_FORCE_INLINE void  onutDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount) { onutGL.DrawArraysInstancedEXT(mode, start, count, primcount); }
ONUT_FORCE_INLINE void  onutDrawArraysInstancedNV(GLenum mode, GLint first, GLsizei count, GLsizei primcount) { onutGL.DrawArraysInstancedNV(mode, first, count, primcount); }
ONUT_FORCE_INLINE void  onutDrawBuffer(GLenum buf) { onutGL.DrawBuffer(buf); }
ONUT_FORCE_INLINE void  onutDrawBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest) { onutGL.DrawBufferRegion(region, x, y, width, height, xDest, yDest); }
ONUT_FORCE_INLINE void  onutDrawBuffers(GLsizei n, const GLenum * bufs) { onutGL.DrawBuffers(n, bufs); }
ONUT_FORCE_INLINE void  onutDrawBuffersARB(GLsizei n, const GLenum * bufs) { onutGL.DrawBuffersARB(n, bufs); }
ONUT_FORCE_INLINE void  onutDrawBuffersATI(GLsizei n, const GLenum * bufs) { onutGL.DrawBuffersATI(n, bufs); }
ONUT_FORCE_INLINE void  onutDrawBuffersEXT(GLsizei n, const GLenum * bufs) { onutGL.DrawBuffersEXT(n, bufs); }
ONUT_FORCE_INLINE void  onutDrawBuffersIndexedEXT(GLint n, const GLenum * location, const GLint * indices) { onutGL.DrawBuffersIndexedEXT(n, location, indices); }
ONUT_FORCE_INLINE void  onutDrawBuffersNV(GLsizei n, const GLenum * bufs) { onutGL.DrawBuffersNV(n, bufs); }
ONUT_FORCE_INLINE void  onutDrawCommandsAddressNV(GLenum primitiveMode, const GLuint64 * indirects, const GLsizei * sizes, GLuint count) { onutGL.DrawCommandsAddressNV(primitiveMode, indirects, sizes, count); }
ONUT_FORCE_INLINE void  onutDrawCommandsNV(GLenum primitiveMode, GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, GLuint count) { onutGL.DrawCommandsNV(primitiveMode, buffer, indirects, sizes, count); }
ONUT_FORCE_INLINE void  onutDrawCommandsStatesAddressNV(const GLuint64 * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) { onutGL.DrawCommandsStatesAddressNV(indirects, sizes, states, fbos, count); }
ONUT_FORCE_INLINE void  onutDrawCommandsStatesNV(GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) { onutGL.DrawCommandsStatesNV(buffer, indirects, sizes, states, fbos, count); }
ONUT_FORCE_INLINE void  onutDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count) { onutGL.DrawElementArrayAPPLE(mode, first, count); }
ONUT_FORCE_INLINE void  onutDrawElementArrayATI(GLenum mode, GLsizei count) { onutGL.DrawElementArrayATI(mode, count); }
ONUT_FORCE_INLINE void  onutDrawElements(GLenum mode, GLsizei count, GLenum type, const void * indices) { onutGL.DrawElements(mode, count, type, indices); }
ONUT_FORCE_INLINE void  onutDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) { onutGL.DrawElementsBaseVertex(mode, count, type, indices, basevertex); }
ONUT_FORCE_INLINE void  onutDrawElementsBaseVertexEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) { onutGL.DrawElementsBaseVertexEXT(mode, count, type, indices, basevertex); }
ONUT_FORCE_INLINE void  onutDrawElementsBaseVertexOES(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) { onutGL.DrawElementsBaseVertexOES(mode, count, type, indices, basevertex); }
ONUT_FORCE_INLINE void  onutDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect) { onutGL.DrawElementsIndirect(mode, type, indirect); }
ONUT_FORCE_INLINE void  onutDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount) { onutGL.DrawElementsInstanced(mode, count, type, indices, instancecount); }
ONUT_FORCE_INLINE void  onutDrawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) { onutGL.DrawElementsInstancedANGLE(mode, count, type, indices, primcount); }
ONUT_FORCE_INLINE void  onutDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) { onutGL.DrawElementsInstancedARB(mode, count, type, indices, primcount); }
ONUT_FORCE_INLINE void  onutDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance) { onutGL.DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance); }
ONUT_FORCE_INLINE void  onutDrawElementsInstancedBaseInstanceEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance) { onutGL.DrawElementsInstancedBaseInstanceEXT(mode, count, type, indices, instancecount, baseinstance); }
ONUT_FORCE_INLINE void  onutDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) { onutGL.DrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex); }
ONUT_FORCE_INLINE void  onutDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) { onutGL.DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance); }
ONUT_FORCE_INLINE void  onutDrawElementsInstancedBaseVertexBaseInstanceEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) { onutGL.DrawElementsInstancedBaseVertexBaseInstanceEXT(mode, count, type, indices, instancecount, basevertex, baseinstance); }
ONUT_FORCE_INLINE void  onutDrawElementsInstancedBaseVertexEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) { onutGL.DrawElementsInstancedBaseVertexEXT(mode, count, type, indices, instancecount, basevertex); }
ONUT_FORCE_INLINE void  onutDrawElementsInstancedBaseVertexOES(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) { onutGL.DrawElementsInstancedBaseVertexOES(mode, count, type, indices, instancecount, basevertex); }
ONUT_FORCE_INLINE void  onutDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) { onutGL.DrawElementsInstancedEXT(mode, count, type, indices, primcount); }
ONUT_FORCE_INLINE void  onutDrawElementsInstancedNV(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) { onutGL.DrawElementsInstancedNV(mode, count, type, indices, primcount); }
ONUT_FORCE_INLINE void  onutDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width) { onutGL.DrawMeshArraysSUN(mode, first, count, width); }
ONUT_FORCE_INLINE void  onutDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { onutGL.DrawPixels(width, height, format, type, pixels); }
ONUT_FORCE_INLINE void  onutDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count) { onutGL.DrawRangeElementArrayAPPLE(mode, start, end, first, count); }
ONUT_FORCE_INLINE void  onutDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count) { onutGL.DrawRangeElementArrayATI(mode, start, end, count); }
ONUT_FORCE_INLINE void  onutDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) { onutGL.DrawRangeElements(mode, start, end, count, type, indices); }
ONUT_FORCE_INLINE void  onutDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) { onutGL.DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex); }
ONUT_FORCE_INLINE void  onutDrawRangeElementsBaseVertexEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) { onutGL.DrawRangeElementsBaseVertexEXT(mode, start, end, count, type, indices, basevertex); }
ONUT_FORCE_INLINE void  onutDrawRangeElementsBaseVertexOES(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) { onutGL.DrawRangeElementsBaseVertexOES(mode, start, end, count, type, indices, basevertex); }
ONUT_FORCE_INLINE void  onutDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) { onutGL.DrawRangeElementsEXT(mode, start, end, count, type, indices); }
ONUT_FORCE_INLINE void  onutDrawTexfOES(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height) { onutGL.DrawTexfOES(x, y, z, width, height); }
ONUT_FORCE_INLINE void  onutDrawTexfvOES(const GLfloat * coords) { onutGL.DrawTexfvOES(coords); }
ONUT_FORCE_INLINE void  onutDrawTexiOES(GLint x, GLint y, GLint z, GLint width, GLint height) { onutGL.DrawTexiOES(x, y, z, width, height); }
ONUT_FORCE_INLINE void  onutDrawTexivOES(const GLint * coords) { onutGL.DrawTexivOES(coords); }
ONUT_FORCE_INLINE void  onutDrawTexsOES(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height) { onutGL.DrawTexsOES(x, y, z, width, height); }
ONUT_FORCE_INLINE void  onutDrawTexsvOES(const GLshort * coords) { onutGL.DrawTexsvOES(coords); }
ONUT_FORCE_INLINE void  onutDrawTextureNV(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) { onutGL.DrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1); }
ONUT_FORCE_INLINE void  onutDrawTexxOES(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height) { onutGL.DrawTexxOES(x, y, z, width, height); }
ONUT_FORCE_INLINE void  onutDrawTexxvOES(const GLfixed * coords) { onutGL.DrawTexxvOES(coords); }
ONUT_FORCE_INLINE void  onutDrawTransformFeedback(GLenum mode, GLuint id) { onutGL.DrawTransformFeedback(mode, id); }
ONUT_FORCE_INLINE void  onutDrawTransformFeedbackEXT(GLenum mode, GLuint id) { onutGL.DrawTransformFeedbackEXT(mode, id); }
ONUT_FORCE_INLINE void  onutDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount) { onutGL.DrawTransformFeedbackInstanced(mode, id, instancecount); }
ONUT_FORCE_INLINE void  onutDrawTransformFeedbackInstancedEXT(GLenum mode, GLuint id, GLsizei instancecount) { onutGL.DrawTransformFeedbackInstancedEXT(mode, id, instancecount); }
ONUT_FORCE_INLINE void  onutDrawTransformFeedbackNV(GLenum mode, GLuint id) { onutGL.DrawTransformFeedbackNV(mode, id); }
ONUT_FORCE_INLINE void  onutDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream) { onutGL.DrawTransformFeedbackStream(mode, id, stream); }
ONUT_FORCE_INLINE void  onutDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) { onutGL.DrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount); }
ONUT_FORCE_INLINE void  onutDrawVkImageNV(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) { onutGL.DrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1); }
ONUT_FORCE_INLINE void  onutEGLImageTargetRenderbufferStorageOES(GLenum target, GLeglImageOES image) { onutGL.EGLImageTargetRenderbufferStorageOES(target, image); }
ONUT_FORCE_INLINE void  onutEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image) { onutGL.EGLImageTargetTexture2DOES(target, image); }
ONUT_FORCE_INLINE void  onutEdgeFlag(GLboolean flag) { onutGL.EdgeFlag(flag); }
ONUT_FORCE_INLINE void  onutEdgeFlagFormatNV(GLsizei stride) { onutGL.EdgeFlagFormatNV(stride); }
ONUT_FORCE_INLINE void  onutEdgeFlagPointer(GLsizei stride, const void * pointer) { onutGL.EdgeFlagPointer(stride, pointer); }
ONUT_FORCE_INLINE void  onutEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean * pointer) { onutGL.EdgeFlagPointerEXT(stride, count, pointer); }
ONUT_FORCE_INLINE void  onutEdgeFlagPointerListIBM(GLint stride, const GLboolean ** pointer, GLint ptrstride) { onutGL.EdgeFlagPointerListIBM(stride, pointer, ptrstride); }
ONUT_FORCE_INLINE void  onutEdgeFlagv(const GLboolean * flag) { onutGL.EdgeFlagv(flag); }
ONUT_FORCE_INLINE void  onutElementPointerAPPLE(GLenum type, const void * pointer) { onutGL.ElementPointerAPPLE(type, pointer); }
ONUT_FORCE_INLINE void  onutElementPointerATI(GLenum type, const void * pointer) { onutGL.ElementPointerATI(type, pointer); }
ONUT_FORCE_INLINE void  onutEnable(GLenum cap) { onutGL.Enable(cap); }
ONUT_FORCE_INLINE void  onutEnableClientState(GLenum array) { onutGL.EnableClientState(array); }
ONUT_FORCE_INLINE void  onutEnableClientStateIndexedEXT(GLenum array, GLuint index) { onutGL.EnableClientStateIndexedEXT(array, index); }
ONUT_FORCE_INLINE void  onutEnableClientStateiEXT(GLenum array, GLuint index) { onutGL.EnableClientStateiEXT(array, index); }
ONUT_FORCE_INLINE void  onutEnableDriverControlQCOM(GLuint driverControl) { onutGL.EnableDriverControlQCOM(driverControl); }
ONUT_FORCE_INLINE void  onutEnableIndexedEXT(GLenum target, GLuint index) { onutGL.EnableIndexedEXT(target, index); }
ONUT_FORCE_INLINE void  onutEnableVariantClientStateEXT(GLuint id) { onutGL.EnableVariantClientStateEXT(id); }
ONUT_FORCE_INLINE void  onutEnableVertexArrayAttrib(GLuint vaobj, GLuint index) { onutGL.EnableVertexArrayAttrib(vaobj, index); }
ONUT_FORCE_INLINE void  onutEnableVertexArrayAttribEXT(GLuint vaobj, GLuint index) { onutGL.EnableVertexArrayAttribEXT(vaobj, index); }
ONUT_FORCE_INLINE void  onutEnableVertexArrayEXT(GLuint vaobj, GLenum array) { onutGL.EnableVertexArrayEXT(vaobj, array); }
ONUT_FORCE_INLINE void  onutEnableVertexAttribAPPLE(GLuint index, GLenum pname) { onutGL.EnableVertexAttribAPPLE(index, pname); }
ONUT_FORCE_INLINE void  onutEnableVertexAttribArray(GLuint index) { onutGL.EnableVertexAttribArray(index); }
ONUT_FORCE_INLINE void  onutEnableVertexAttribArrayARB(GLuint index) { onutGL.EnableVertexAttribArrayARB(index); }
ONUT_FORCE_INLINE void  onutEnablei(GLenum target, GLuint index) { onutGL.Enablei(target, index); }
ONUT_FORCE_INLINE void  onutEnableiEXT(GLenum target, GLuint index) { onutGL.EnableiEXT(target, index); }
ONUT_FORCE_INLINE void  onutEnableiNV(GLenum target, GLuint index) { onutGL.EnableiNV(target, index); }
ONUT_FORCE_INLINE void  onutEnableiOES(GLenum target, GLuint index) { onutGL.EnableiOES(target, index); }
ONUT_FORCE_INLINE void  onutEnd(void) { onutGL.End(); }
ONUT_FORCE_INLINE void  onutEndConditionalRender(void) { onutGL.EndConditionalRender(); }
ONUT_FORCE_INLINE void  onutEndConditionalRenderNV(void) { onutGL.EndConditionalRenderNV(); }
ONUT_FORCE_INLINE void  onutEndConditionalRenderNVX(void) { onutGL.EndConditionalRenderNVX(); }
ONUT_FORCE_INLINE void  onutEndFragmentShaderATI(void) { onutGL.EndFragmentShaderATI(); }
ONUT_FORCE_INLINE void  onutEndList(void) { onutGL.EndList(); }
ONUT_FORCE_INLINE void  onutEndOcclusionQueryNV(void) { onutGL.EndOcclusionQueryNV(); }
ONUT_FORCE_INLINE void  onutEndPerfMonitorAMD(GLuint monitor) { onutGL.EndPerfMonitorAMD(monitor); }
ONUT_FORCE_INLINE void  onutEndPerfQueryINTEL(GLuint queryHandle) { onutGL.EndPerfQueryINTEL(queryHandle); }
ONUT_FORCE_INLINE void  onutEndQuery(GLenum target) { onutGL.EndQuery(target); }
ONUT_FORCE_INLINE void  onutEndQueryARB(GLenum target) { onutGL.EndQueryARB(target); }
ONUT_FORCE_INLINE void  onutEndQueryEXT(GLenum target) { onutGL.EndQueryEXT(target); }
ONUT_FORCE_INLINE void  onutEndQueryIndexed(GLenum target, GLuint index) { onutGL.EndQueryIndexed(target, index); }
ONUT_FORCE_INLINE void  onutEndTilingQCOM(GLbitfield preserveMask) { onutGL.EndTilingQCOM(preserveMask); }
ONUT_FORCE_INLINE void  onutEndTransformFeedback(void) { onutGL.EndTransformFeedback(); }
ONUT_FORCE_INLINE void  onutEndTransformFeedbackEXT(void) { onutGL.EndTransformFeedbackEXT(); }
ONUT_FORCE_INLINE void  onutEndTransformFeedbackNV(void) { onutGL.EndTransformFeedbackNV(); }
ONUT_FORCE_INLINE void  onutEndVertexShaderEXT(void) { onutGL.EndVertexShaderEXT(); }
ONUT_FORCE_INLINE void  onutEndVideoCaptureNV(GLuint video_capture_slot) { onutGL.EndVideoCaptureNV(video_capture_slot); }
ONUT_FORCE_INLINE void  onutEvalCoord1d(GLdouble u) { onutGL.EvalCoord1d(u); }
ONUT_FORCE_INLINE void  onutEvalCoord1dv(const GLdouble * u) { onutGL.EvalCoord1dv(u); }
ONUT_FORCE_INLINE void  onutEvalCoord1f(GLfloat u) { onutGL.EvalCoord1f(u); }
ONUT_FORCE_INLINE void  onutEvalCoord1fv(const GLfloat * u) { onutGL.EvalCoord1fv(u); }
ONUT_FORCE_INLINE void  onutEvalCoord1xOES(GLfixed u) { onutGL.EvalCoord1xOES(u); }
ONUT_FORCE_INLINE void  onutEvalCoord1xvOES(const GLfixed * coords) { onutGL.EvalCoord1xvOES(coords); }
ONUT_FORCE_INLINE void  onutEvalCoord2d(GLdouble u, GLdouble v) { onutGL.EvalCoord2d(u, v); }
ONUT_FORCE_INLINE void  onutEvalCoord2dv(const GLdouble * u) { onutGL.EvalCoord2dv(u); }
ONUT_FORCE_INLINE void  onutEvalCoord2f(GLfloat u, GLfloat v) { onutGL.EvalCoord2f(u, v); }
ONUT_FORCE_INLINE void  onutEvalCoord2fv(const GLfloat * u) { onutGL.EvalCoord2fv(u); }
ONUT_FORCE_INLINE void  onutEvalCoord2xOES(GLfixed u, GLfixed v) { onutGL.EvalCoord2xOES(u, v); }
ONUT_FORCE_INLINE void  onutEvalCoord2xvOES(const GLfixed * coords) { onutGL.EvalCoord2xvOES(coords); }
ONUT_FORCE_INLINE void  onutEvalMapsNV(GLenum target, GLenum mode) { onutGL.EvalMapsNV(target, mode); }
ONUT_FORCE_INLINE void  onutEvalMesh1(GLenum mode, GLint i1, GLint i2) { onutGL.EvalMesh1(mode, i1, i2); }
ONUT_FORCE_INLINE void  onutEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) { onutGL.EvalMesh2(mode, i1, i2, j1, j2); }
ONUT_FORCE_INLINE void  onutEvalPoint1(GLint i) { onutGL.EvalPoint1(i); }
ONUT_FORCE_INLINE void  onutEvalPoint2(GLint i, GLint j) { onutGL.EvalPoint2(i, j); }
ONUT_FORCE_INLINE void  onutEvaluateDepthValuesARB(void) { onutGL.EvaluateDepthValuesARB(); }
ONUT_FORCE_INLINE void  onutExecuteProgramNV(GLenum target, GLuint id, const GLfloat * params) { onutGL.ExecuteProgramNV(target, id, params); }
ONUT_FORCE_INLINE void  onutExtGetBufferPointervQCOM(GLenum target, void ** params) { onutGL.ExtGetBufferPointervQCOM(target, params); }
ONUT_FORCE_INLINE void  onutExtGetBuffersQCOM(GLuint * buffers, GLint maxBuffers, GLint * numBuffers) { onutGL.ExtGetBuffersQCOM(buffers, maxBuffers, numBuffers); }
ONUT_FORCE_INLINE void  onutExtGetFramebuffersQCOM(GLuint * framebuffers, GLint maxFramebuffers, GLint * numFramebuffers) { onutGL.ExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers); }
ONUT_FORCE_INLINE void  onutExtGetProgramBinarySourceQCOM(GLuint program, GLenum shadertype, GLchar * source, GLint * length) { onutGL.ExtGetProgramBinarySourceQCOM(program, shadertype, source, length); }
ONUT_FORCE_INLINE void  onutExtGetProgramsQCOM(GLuint * programs, GLint maxPrograms, GLint * numPrograms) { onutGL.ExtGetProgramsQCOM(programs, maxPrograms, numPrograms); }
ONUT_FORCE_INLINE void  onutExtGetRenderbuffersQCOM(GLuint * renderbuffers, GLint maxRenderbuffers, GLint * numRenderbuffers) { onutGL.ExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers); }
ONUT_FORCE_INLINE void  onutExtGetShadersQCOM(GLuint * shaders, GLint maxShaders, GLint * numShaders) { onutGL.ExtGetShadersQCOM(shaders, maxShaders, numShaders); }
ONUT_FORCE_INLINE void  onutExtGetTexLevelParameterivQCOM(GLuint texture, GLenum face, GLint level, GLenum pname, GLint * params) { onutGL.ExtGetTexLevelParameterivQCOM(texture, face, level, pname, params); }
ONUT_FORCE_INLINE void  onutExtGetTexSubImageQCOM(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void * texels) { onutGL.ExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels); }
ONUT_FORCE_INLINE void  onutExtGetTexturesQCOM(GLuint * textures, GLint maxTextures, GLint * numTextures) { onutGL.ExtGetTexturesQCOM(textures, maxTextures, numTextures); }
ONUT_FORCE_INLINE GLboolean onutExtIsProgramBinaryQCOM(GLuint program) { return onutGL.ExtIsProgramBinaryQCOM(program); }
ONUT_FORCE_INLINE void  onutExtTexObjectStateOverrideiQCOM(GLenum target, GLenum pname, GLint param) { onutGL.ExtTexObjectStateOverrideiQCOM(target, pname, param); }
ONUT_FORCE_INLINE void  onutExtractComponentEXT(GLuint res, GLuint src, GLuint num) { onutGL.ExtractComponentEXT(res, src, num); }
ONUT_FORCE_INLINE void  onutFeedbackBuffer(GLsizei size, GLenum type, GLfloat * buffer) { onutGL.FeedbackBuffer(size, type, buffer); }
ONUT_FORCE_INLINE void  onutFeedbackBufferxOES(GLsizei n, GLenum type, const GLfixed * buffer) { onutGL.FeedbackBufferxOES(n, type, buffer); }
ONUT_FORCE_INLINE GLsync onutFenceSync(GLenum condition, GLbitfield flags) { return onutGL.FenceSync(condition, flags); }
ONUT_FORCE_INLINE GLsync onutFenceSyncAPPLE(GLenum condition, GLbitfield flags) { return onutGL.FenceSyncAPPLE(condition, flags); }
ONUT_FORCE_INLINE void  onutFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) { onutGL.FinalCombinerInputNV(variable, input, mapping, componentUsage); }
ONUT_FORCE_INLINE void  onutFinish(void) { onutGL.Finish(); }
ONUT_FORCE_INLINE GLint onutFinishAsyncSGIX(GLuint * markerp) { return onutGL.FinishAsyncSGIX(markerp); }
ONUT_FORCE_INLINE void  onutFinishFenceAPPLE(GLuint fence) { onutGL.FinishFenceAPPLE(fence); }
ONUT_FORCE_INLINE void  onutFinishFenceNV(GLuint fence) { onutGL.FinishFenceNV(fence); }
ONUT_FORCE_INLINE void  onutFinishObjectAPPLE(GLenum object, GLint name) { onutGL.FinishObjectAPPLE(object, name); }
ONUT_FORCE_INLINE void  onutFinishTextureSUNX(void) { onutGL.FinishTextureSUNX(); }
ONUT_FORCE_INLINE void  onutFlush(void) { onutGL.Flush(); }
ONUT_FORCE_INLINE void  onutFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) { onutGL.FlushMappedBufferRange(target, offset, length); }
ONUT_FORCE_INLINE void  onutFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size) { onutGL.FlushMappedBufferRangeAPPLE(target, offset, size); }
ONUT_FORCE_INLINE void  onutFlushMappedBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length) { onutGL.FlushMappedBufferRangeEXT(target, offset, length); }
ONUT_FORCE_INLINE void  onutFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length) { onutGL.FlushMappedNamedBufferRange(buffer, offset, length); }
ONUT_FORCE_INLINE void  onutFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length) { onutGL.FlushMappedNamedBufferRangeEXT(buffer, offset, length); }
ONUT_FORCE_INLINE void  onutFlushPixelDataRangeNV(GLenum target) { onutGL.FlushPixelDataRangeNV(target); }
ONUT_FORCE_INLINE void  onutFlushRasterSGIX(void) { onutGL.FlushRasterSGIX(); }
ONUT_FORCE_INLINE void  onutFlushStaticDataIBM(GLenum target) { onutGL.FlushStaticDataIBM(target); }
ONUT_FORCE_INLINE void  onutFlushVertexArrayRangeAPPLE(GLsizei length, void * pointer) { onutGL.FlushVertexArrayRangeAPPLE(length, pointer); }
ONUT_FORCE_INLINE void  onutFlushVertexArrayRangeNV(void) { onutGL.FlushVertexArrayRangeNV(); }
ONUT_FORCE_INLINE void  onutFogCoordFormatNV(GLenum type, GLsizei stride) { onutGL.FogCoordFormatNV(type, stride); }
ONUT_FORCE_INLINE void  onutFogCoordPointer(GLenum type, GLsizei stride, const void * pointer) { onutGL.FogCoordPointer(type, stride, pointer); }
ONUT_FORCE_INLINE void  onutFogCoordPointerEXT(GLenum type, GLsizei stride, const void * pointer) { onutGL.FogCoordPointerEXT(type, stride, pointer); }
ONUT_FORCE_INLINE void  onutFogCoordPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { onutGL.FogCoordPointerListIBM(type, stride, pointer, ptrstride); }
ONUT_FORCE_INLINE void  onutFogCoordd(GLdouble coord) { onutGL.FogCoordd(coord); }
ONUT_FORCE_INLINE void  onutFogCoorddEXT(GLdouble coord) { onutGL.FogCoorddEXT(coord); }
ONUT_FORCE_INLINE void  onutFogCoorddv(const GLdouble * coord) { onutGL.FogCoorddv(coord); }
ONUT_FORCE_INLINE void  onutFogCoorddvEXT(const GLdouble * coord) { onutGL.FogCoorddvEXT(coord); }
ONUT_FORCE_INLINE void  onutFogCoordf(GLfloat coord) { onutGL.FogCoordf(coord); }
ONUT_FORCE_INLINE void  onutFogCoordfEXT(GLfloat coord) { onutGL.FogCoordfEXT(coord); }
ONUT_FORCE_INLINE void  onutFogCoordfv(const GLfloat * coord) { onutGL.FogCoordfv(coord); }
ONUT_FORCE_INLINE void  onutFogCoordfvEXT(const GLfloat * coord) { onutGL.FogCoordfvEXT(coord); }
ONUT_FORCE_INLINE void  onutFogCoordhNV(GLhalfNV fog) { onutGL.FogCoordhNV(fog); }
ONUT_FORCE_INLINE void  onutFogCoordhvNV(const GLhalfNV * fog) { onutGL.FogCoordhvNV(fog); }
ONUT_FORCE_INLINE void  onutFogFuncSGIS(GLsizei n, const GLfloat * points) { onutGL.FogFuncSGIS(n, points); }
ONUT_FORCE_INLINE void  onutFogf(GLenum pname, GLfloat param) { onutGL.Fogf(pname, param); }
ONUT_FORCE_INLINE void  onutFogfv(GLenum pname, const GLfloat * params) { onutGL.Fogfv(pname, params); }
ONUT_FORCE_INLINE void  onutFogi(GLenum pname, GLint param) { onutGL.Fogi(pname, param); }
ONUT_FORCE_INLINE void  onutFogiv(GLenum pname, const GLint * params) { onutGL.Fogiv(pname, params); }
ONUT_FORCE_INLINE void  onutFogx(GLenum pname, GLfixed param) { onutGL.Fogx(pname, param); }
ONUT_FORCE_INLINE void  onutFogxOES(GLenum pname, GLfixed param) { onutGL.FogxOES(pname, param); }
ONUT_FORCE_INLINE void  onutFogxv(GLenum pname, const GLfixed * param) { onutGL.Fogxv(pname, param); }
ONUT_FORCE_INLINE void  onutFogxvOES(GLenum pname, const GLfixed * param) { onutGL.FogxvOES(pname, param); }
ONUT_FORCE_INLINE void  onutFragmentColorMaterialSGIX(GLenum face, GLenum mode) { onutGL.FragmentColorMaterialSGIX(face, mode); }
ONUT_FORCE_INLINE void  onutFragmentCoverageColorNV(GLuint color) { onutGL.FragmentCoverageColorNV(color); }
ONUT_FORCE_INLINE void  onutFragmentLightModelfSGIX(GLenum pname, GLfloat param) { onutGL.FragmentLightModelfSGIX(pname, param); }
ONUT_FORCE_INLINE void  onutFragmentLightModelfvSGIX(GLenum pname, const GLfloat * params) { onutGL.FragmentLightModelfvSGIX(pname, params); }
ONUT_FORCE_INLINE void  onutFragmentLightModeliSGIX(GLenum pname, GLint param) { onutGL.FragmentLightModeliSGIX(pname, param); }
ONUT_FORCE_INLINE void  onutFragmentLightModelivSGIX(GLenum pname, const GLint * params) { onutGL.FragmentLightModelivSGIX(pname, params); }
ONUT_FORCE_INLINE void  onutFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param) { onutGL.FragmentLightfSGIX(light, pname, param); }
ONUT_FORCE_INLINE void  onutFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat * params) { onutGL.FragmentLightfvSGIX(light, pname, params); }
ONUT_FORCE_INLINE void  onutFragmentLightiSGIX(GLenum light, GLenum pname, GLint param) { onutGL.FragmentLightiSGIX(light, pname, param); }
ONUT_FORCE_INLINE void  onutFragmentLightivSGIX(GLenum light, GLenum pname, const GLint * params) { onutGL.FragmentLightivSGIX(light, pname, params); }
ONUT_FORCE_INLINE void  onutFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param) { onutGL.FragmentMaterialfSGIX(face, pname, param); }
ONUT_FORCE_INLINE void  onutFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat * params) { onutGL.FragmentMaterialfvSGIX(face, pname, params); }
ONUT_FORCE_INLINE void  onutFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param) { onutGL.FragmentMaterialiSGIX(face, pname, param); }
ONUT_FORCE_INLINE void  onutFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint * params) { onutGL.FragmentMaterialivSGIX(face, pname, params); }
ONUT_FORCE_INLINE void  onutFrameTerminatorGREMEDY(void) { onutGL.FrameTerminatorGREMEDY(); }
ONUT_FORCE_INLINE void  onutFrameZoomSGIX(GLint factor) { onutGL.FrameZoomSGIX(factor); }
ONUT_FORCE_INLINE void  onutFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode) { onutGL.FramebufferDrawBufferEXT(framebuffer, mode); }
ONUT_FORCE_INLINE void  onutFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum * bufs) { onutGL.FramebufferDrawBuffersEXT(framebuffer, n, bufs); }
ONUT_FORCE_INLINE void  onutFramebufferFetchBarrierQCOM(void) { onutGL.FramebufferFetchBarrierQCOM(); }
ONUT_FORCE_INLINE void  onutFramebufferFoveationConfigQCOM(GLuint framebuffer, GLuint numLayers, GLuint focalPointsPerLayer, GLuint requestedFeatures, GLuint * providedFeatures) { onutGL.FramebufferFoveationConfigQCOM(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures); }
ONUT_FORCE_INLINE void  onutFramebufferFoveationParametersQCOM(GLuint framebuffer, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea) { onutGL.FramebufferFoveationParametersQCOM(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea); }
ONUT_FORCE_INLINE void  onutFramebufferParameteri(GLenum target, GLenum pname, GLint param) { onutGL.FramebufferParameteri(target, pname, param); }
ONUT_FORCE_INLINE void  onutFramebufferPixelLocalStorageSizeEXT(GLuint target, GLsizei size) { onutGL.FramebufferPixelLocalStorageSizeEXT(target, size); }
ONUT_FORCE_INLINE void  onutFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode) { onutGL.FramebufferReadBufferEXT(framebuffer, mode); }
ONUT_FORCE_INLINE void  onutFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { onutGL.FramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer); }
ONUT_FORCE_INLINE void  onutFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { onutGL.FramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer); }
ONUT_FORCE_INLINE void  onutFramebufferRenderbufferOES(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { onutGL.FramebufferRenderbufferOES(target, attachment, renderbuffertarget, renderbuffer); }
ONUT_FORCE_INLINE void  onutFramebufferSampleLocationsfvARB(GLenum target, GLuint start, GLsizei count, const GLfloat * v) { onutGL.FramebufferSampleLocationsfvARB(target, start, count, v); }
ONUT_FORCE_INLINE void  onutFramebufferSampleLocationsfvNV(GLenum target, GLuint start, GLsizei count, const GLfloat * v) { onutGL.FramebufferSampleLocationsfvNV(target, start, count, v); }
ONUT_FORCE_INLINE void  onutFramebufferSamplePositionsfvAMD(GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat * values) { onutGL.FramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values); }
ONUT_FORCE_INLINE void  onutFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level) { onutGL.FramebufferTexture(target, attachment, texture, level); }
ONUT_FORCE_INLINE void  onutFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { onutGL.FramebufferTexture1D(target, attachment, textarget, texture, level); }
ONUT_FORCE_INLINE void  onutFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { onutGL.FramebufferTexture1DEXT(target, attachment, textarget, texture, level); }
ONUT_FORCE_INLINE void  onutFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { onutGL.FramebufferTexture2D(target, attachment, textarget, texture, level); }
ONUT_FORCE_INLINE void  onutFramebufferTexture2DDownsampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint xscale, GLint yscale) { onutGL.FramebufferTexture2DDownsampleIMG(target, attachment, textarget, texture, level, xscale, yscale); }
ONUT_FORCE_INLINE void  onutFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { onutGL.FramebufferTexture2DEXT(target, attachment, textarget, texture, level); }
ONUT_FORCE_INLINE void  onutFramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) { onutGL.FramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples); }
ONUT_FORCE_INLINE void  onutFramebufferTexture2DMultisampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) { onutGL.FramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples); }
ONUT_FORCE_INLINE void  onutFramebufferTexture2DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { onutGL.FramebufferTexture2DOES(target, attachment, textarget, texture, level); }
ONUT_FORCE_INLINE void  onutFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { onutGL.FramebufferTexture3D(target, attachment, textarget, texture, level, zoffset); }
ONUT_FORCE_INLINE void  onutFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { onutGL.FramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset); }
ONUT_FORCE_INLINE void  onutFramebufferTexture3DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { onutGL.FramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset); }
ONUT_FORCE_INLINE void  onutFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level) { onutGL.FramebufferTextureARB(target, attachment, texture, level); }
ONUT_FORCE_INLINE void  onutFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level) { onutGL.FramebufferTextureEXT(target, attachment, texture, level); }
ONUT_FORCE_INLINE void  onutFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) { onutGL.FramebufferTextureFaceARB(target, attachment, texture, level, face); }
ONUT_FORCE_INLINE void  onutFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) { onutGL.FramebufferTextureFaceEXT(target, attachment, texture, level, face); }
ONUT_FORCE_INLINE void  onutFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { onutGL.FramebufferTextureLayer(target, attachment, texture, level, layer); }
ONUT_FORCE_INLINE void  onutFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { onutGL.FramebufferTextureLayerARB(target, attachment, texture, level, layer); }
ONUT_FORCE_INLINE void  onutFramebufferTextureLayerDownsampleIMG(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale) { onutGL.FramebufferTextureLayerDownsampleIMG(target, attachment, texture, level, layer, xscale, yscale); }
ONUT_FORCE_INLINE void  onutFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { onutGL.FramebufferTextureLayerEXT(target, attachment, texture, level, layer); }
ONUT_FORCE_INLINE void  onutFramebufferTextureMultisampleMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews) { onutGL.FramebufferTextureMultisampleMultiviewOVR(target, attachment, texture, level, samples, baseViewIndex, numViews); }
ONUT_FORCE_INLINE void  onutFramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) { onutGL.FramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews); }
ONUT_FORCE_INLINE void  onutFramebufferTextureOES(GLenum target, GLenum attachment, GLuint texture, GLint level) { onutGL.FramebufferTextureOES(target, attachment, texture, level); }
ONUT_FORCE_INLINE void  onutFreeObjectBufferATI(GLuint buffer) { onutGL.FreeObjectBufferATI(buffer); }
ONUT_FORCE_INLINE void  onutFrontFace(GLenum mode) { onutGL.FrontFace(mode); }
ONUT_FORCE_INLINE void  onutFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { onutGL.Frustum(left, right, bottom, top, zNear, zFar); }
ONUT_FORCE_INLINE void  onutFrustumf(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { onutGL.Frustumf(l, r, b, t, n, f); }
ONUT_FORCE_INLINE void  onutFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { onutGL.FrustumfOES(l, r, b, t, n, f); }
ONUT_FORCE_INLINE void  onutFrustumx(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { onutGL.Frustumx(l, r, b, t, n, f); }
ONUT_FORCE_INLINE void  onutFrustumxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { onutGL.FrustumxOES(l, r, b, t, n, f); }
ONUT_FORCE_INLINE GLuint onutGenAsyncMarkersSGIX(GLsizei range) { return onutGL.GenAsyncMarkersSGIX(range); }
ONUT_FORCE_INLINE void  onutGenBuffers(GLsizei n, GLuint * buffers) { onutGL.GenBuffers(n, buffers); }
ONUT_FORCE_INLINE void  onutGenBuffersARB(GLsizei n, GLuint * buffers) { onutGL.GenBuffersARB(n, buffers); }
ONUT_FORCE_INLINE void  onutGenFencesAPPLE(GLsizei n, GLuint * fences) { onutGL.GenFencesAPPLE(n, fences); }
ONUT_FORCE_INLINE void  onutGenFencesNV(GLsizei n, GLuint * fences) { onutGL.GenFencesNV(n, fences); }
ONUT_FORCE_INLINE GLuint onutGenFragmentShadersATI(GLuint range) { return onutGL.GenFragmentShadersATI(range); }
ONUT_FORCE_INLINE void  onutGenFramebuffers(GLsizei n, GLuint * framebuffers) { onutGL.GenFramebuffers(n, framebuffers); }
ONUT_FORCE_INLINE void  onutGenFramebuffersEXT(GLsizei n, GLuint * framebuffers) { onutGL.GenFramebuffersEXT(n, framebuffers); }
ONUT_FORCE_INLINE void  onutGenFramebuffersOES(GLsizei n, GLuint * framebuffers) { onutGL.GenFramebuffersOES(n, framebuffers); }
ONUT_FORCE_INLINE GLuint onutGenLists(GLsizei range) { return onutGL.GenLists(range); }
ONUT_FORCE_INLINE void  onutGenNamesAMD(GLenum identifier, GLuint num, GLuint * names) { onutGL.GenNamesAMD(identifier, num, names); }
ONUT_FORCE_INLINE void  onutGenOcclusionQueriesNV(GLsizei n, GLuint * ids) { onutGL.GenOcclusionQueriesNV(n, ids); }
ONUT_FORCE_INLINE GLuint onutGenPathsNV(GLsizei range) { return onutGL.GenPathsNV(range); }
ONUT_FORCE_INLINE void  onutGenPerfMonitorsAMD(GLsizei n, GLuint * monitors) { onutGL.GenPerfMonitorsAMD(n, monitors); }
ONUT_FORCE_INLINE void  onutGenProgramPipelines(GLsizei n, GLuint * pipelines) { onutGL.GenProgramPipelines(n, pipelines); }
ONUT_FORCE_INLINE void  onutGenProgramPipelinesEXT(GLsizei n, GLuint * pipelines) { onutGL.GenProgramPipelinesEXT(n, pipelines); }
ONUT_FORCE_INLINE void  onutGenProgramsARB(GLsizei n, GLuint * programs) { onutGL.GenProgramsARB(n, programs); }
ONUT_FORCE_INLINE void  onutGenProgramsNV(GLsizei n, GLuint * programs) { onutGL.GenProgramsNV(n, programs); }
ONUT_FORCE_INLINE void  onutGenQueries(GLsizei n, GLuint * ids) { onutGL.GenQueries(n, ids); }
ONUT_FORCE_INLINE void  onutGenQueriesARB(GLsizei n, GLuint * ids) { onutGL.GenQueriesARB(n, ids); }
ONUT_FORCE_INLINE void  onutGenQueriesEXT(GLsizei n, GLuint * ids) { onutGL.GenQueriesEXT(n, ids); }
ONUT_FORCE_INLINE void  onutGenRenderbuffers(GLsizei n, GLuint * renderbuffers) { onutGL.GenRenderbuffers(n, renderbuffers); }
ONUT_FORCE_INLINE void  onutGenRenderbuffersEXT(GLsizei n, GLuint * renderbuffers) { onutGL.GenRenderbuffersEXT(n, renderbuffers); }
ONUT_FORCE_INLINE void  onutGenRenderbuffersOES(GLsizei n, GLuint * renderbuffers) { onutGL.GenRenderbuffersOES(n, renderbuffers); }
ONUT_FORCE_INLINE void  onutGenSamplers(GLsizei count, GLuint * samplers) { onutGL.GenSamplers(count, samplers); }
ONUT_FORCE_INLINE void  onutGenSemaphoresEXT(GLsizei n, GLuint * semaphores) { onutGL.GenSemaphoresEXT(n, semaphores); }
ONUT_FORCE_INLINE GLuint onutGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components) { return onutGL.GenSymbolsEXT(datatype, storagetype, range, components); }
ONUT_FORCE_INLINE void  onutGenTextures(GLsizei n, GLuint * textures) { onutGL.GenTextures(n, textures); }
ONUT_FORCE_INLINE void  onutGenTexturesEXT(GLsizei n, GLuint * textures) { onutGL.GenTexturesEXT(n, textures); }
ONUT_FORCE_INLINE void  onutGenTransformFeedbacks(GLsizei n, GLuint * ids) { onutGL.GenTransformFeedbacks(n, ids); }
ONUT_FORCE_INLINE void  onutGenTransformFeedbacksNV(GLsizei n, GLuint * ids) { onutGL.GenTransformFeedbacksNV(n, ids); }
ONUT_FORCE_INLINE void  onutGenVertexArrays(GLsizei n, GLuint * arrays) { onutGL.GenVertexArrays(n, arrays); }
ONUT_FORCE_INLINE void  onutGenVertexArraysAPPLE(GLsizei n, GLuint * arrays) { onutGL.GenVertexArraysAPPLE(n, arrays); }
ONUT_FORCE_INLINE void  onutGenVertexArraysOES(GLsizei n, GLuint * arrays) { onutGL.GenVertexArraysOES(n, arrays); }
ONUT_FORCE_INLINE GLuint onutGenVertexShadersEXT(GLuint range) { return onutGL.GenVertexShadersEXT(range); }
ONUT_FORCE_INLINE void  onutGenerateMipmap(GLenum target) { onutGL.GenerateMipmap(target); }
ONUT_FORCE_INLINE void  onutGenerateMipmapEXT(GLenum target) { onutGL.GenerateMipmapEXT(target); }
ONUT_FORCE_INLINE void  onutGenerateMipmapOES(GLenum target) { onutGL.GenerateMipmapOES(target); }
ONUT_FORCE_INLINE void  onutGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target) { onutGL.GenerateMultiTexMipmapEXT(texunit, target); }
ONUT_FORCE_INLINE void  onutGenerateTextureMipmap(GLuint texture) { onutGL.GenerateTextureMipmap(texture); }
ONUT_FORCE_INLINE void  onutGenerateTextureMipmapEXT(GLuint texture, GLenum target) { onutGL.GenerateTextureMipmapEXT(texture, target); }
ONUT_FORCE_INLINE void  onutGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params) { onutGL.GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params); }
ONUT_FORCE_INLINE void  onutGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) { onutGL.GetActiveAttrib(program, index, bufSize, length, size, type, name); }
ONUT_FORCE_INLINE void  onutGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name) { onutGL.GetActiveAttribARB(programObj, index, maxLength, length, size, type, name); }
ONUT_FORCE_INLINE void  onutGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name) { onutGL.GetActiveSubroutineName(program, shadertype, index, bufsize, length, name); }
ONUT_FORCE_INLINE void  onutGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name) { onutGL.GetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name); }
ONUT_FORCE_INLINE void  onutGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values) { onutGL.GetActiveSubroutineUniformiv(program, shadertype, index, pname, values); }
ONUT_FORCE_INLINE void  onutGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) { onutGL.GetActiveUniform(program, index, bufSize, length, size, type, name); }
ONUT_FORCE_INLINE void  onutGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name) { onutGL.GetActiveUniformARB(programObj, index, maxLength, length, size, type, name); }
ONUT_FORCE_INLINE void  onutGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName) { onutGL.GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName); }
ONUT_FORCE_INLINE void  onutGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params) { onutGL.GetActiveUniformBlockiv(program, uniformBlockIndex, pname, params); }
ONUT_FORCE_INLINE void  onutGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName) { onutGL.GetActiveUniformName(program, uniformIndex, bufSize, length, uniformName); }
ONUT_FORCE_INLINE void  onutGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params) { onutGL.GetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params); }
ONUT_FORCE_INLINE void  onutGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) { onutGL.GetActiveVaryingNV(program, index, bufSize, length, size, type, name); }
ONUT_FORCE_INLINE void  onutGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat * params) { onutGL.GetArrayObjectfvATI(array, pname, params); }
ONUT_FORCE_INLINE void  onutGetArrayObjectivATI(GLenum array, GLenum pname, GLint * params) { onutGL.GetArrayObjectivATI(array, pname, params); }
ONUT_FORCE_INLINE void  onutGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj) { onutGL.GetAttachedObjectsARB(containerObj, maxCount, count, obj); }
ONUT_FORCE_INLINE void  onutGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders) { onutGL.GetAttachedShaders(program, maxCount, count, shaders); }
ONUT_FORCE_INLINE GLint onutGetAttribLocation(GLuint program, const GLchar * name) { return onutGL.GetAttribLocation(program, name); }
ONUT_FORCE_INLINE GLint onutGetAttribLocationARB(GLhandleARB programObj, const GLcharARB * name) { return onutGL.GetAttribLocationARB(programObj, name); }
ONUT_FORCE_INLINE void  onutGetBooleanIndexedvEXT(GLenum target, GLuint index, GLboolean * data) { onutGL.GetBooleanIndexedvEXT(target, index, data); }
ONUT_FORCE_INLINE void  onutGetBooleani_v(GLenum target, GLuint index, GLboolean * data) { onutGL.GetBooleani_v(target, index, data); }
ONUT_FORCE_INLINE void  onutGetBooleanv(GLenum pname, GLboolean * data) { onutGL.GetBooleanv(pname, data); }
ONUT_FORCE_INLINE void  onutGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 * params) { onutGL.GetBufferParameteri64v(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetBufferParameteriv(GLenum target, GLenum pname, GLint * params) { onutGL.GetBufferParameteriv(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetBufferParameterivARB(GLenum target, GLenum pname, GLint * params) { onutGL.GetBufferParameterivARB(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT * params) { onutGL.GetBufferParameterui64vNV(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetBufferPointerv(GLenum target, GLenum pname, void ** params) { onutGL.GetBufferPointerv(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetBufferPointervARB(GLenum target, GLenum pname, void ** params) { onutGL.GetBufferPointervARB(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetBufferPointervOES(GLenum target, GLenum pname, void ** params) { onutGL.GetBufferPointervOES(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void * data) { onutGL.GetBufferSubData(target, offset, size, data); }
ONUT_FORCE_INLINE void  onutGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data) { onutGL.GetBufferSubDataARB(target, offset, size, data); }
ONUT_FORCE_INLINE void  onutGetClipPlane(GLenum plane, GLdouble * equation) { onutGL.GetClipPlane(plane, equation); }
ONUT_FORCE_INLINE void  onutGetClipPlanef(GLenum plane, GLfloat * equation) { onutGL.GetClipPlanef(plane, equation); }
ONUT_FORCE_INLINE void  onutGetClipPlanefOES(GLenum plane, GLfloat * equation) { onutGL.GetClipPlanefOES(plane, equation); }
ONUT_FORCE_INLINE void  onutGetClipPlanex(GLenum plane, GLfixed * equation) { onutGL.GetClipPlanex(plane, equation); }
ONUT_FORCE_INLINE void  onutGetClipPlanexOES(GLenum plane, GLfixed * equation) { onutGL.GetClipPlanexOES(plane, equation); }
ONUT_FORCE_INLINE void  onutGetColorTable(GLenum target, GLenum format, GLenum type, void * table) { onutGL.GetColorTable(target, format, type, table); }
ONUT_FORCE_INLINE void  onutGetColorTableEXT(GLenum target, GLenum format, GLenum type, void * data) { onutGL.GetColorTableEXT(target, format, type, data); }
ONUT_FORCE_INLINE void  onutGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat * params) { onutGL.GetColorTableParameterfv(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { onutGL.GetColorTableParameterfvEXT(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat * params) { onutGL.GetColorTableParameterfvSGI(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetColorTableParameteriv(GLenum target, GLenum pname, GLint * params) { onutGL.GetColorTableParameteriv(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint * params) { onutGL.GetColorTableParameterivEXT(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint * params) { onutGL.GetColorTableParameterivSGI(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetColorTableSGI(GLenum target, GLenum format, GLenum type, void * table) { onutGL.GetColorTableSGI(target, format, type, table); }
ONUT_FORCE_INLINE void  onutGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params) { onutGL.GetCombinerInputParameterfvNV(stage, portion, variable, pname, params); }
ONUT_FORCE_INLINE void  onutGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params) { onutGL.GetCombinerInputParameterivNV(stage, portion, variable, pname, params); }
ONUT_FORCE_INLINE void  onutGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat * params) { onutGL.GetCombinerOutputParameterfvNV(stage, portion, pname, params); }
ONUT_FORCE_INLINE void  onutGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint * params) { onutGL.GetCombinerOutputParameterivNV(stage, portion, pname, params); }
ONUT_FORCE_INLINE void  onutGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat * params) { onutGL.GetCombinerStageParameterfvNV(stage, pname, params); }
ONUT_FORCE_INLINE GLuint onutGetCommandHeaderNV(GLenum tokenID, GLuint size) { return onutGL.GetCommandHeaderNV(tokenID, size); }
ONUT_FORCE_INLINE void  onutGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, void * img) { onutGL.GetCompressedMultiTexImageEXT(texunit, target, lod, img); }
ONUT_FORCE_INLINE void  onutGetCompressedTexImage(GLenum target, GLint level, void * img) { onutGL.GetCompressedTexImage(target, level, img); }
ONUT_FORCE_INLINE void  onutGetCompressedTexImageARB(GLenum target, GLint level, void * img) { onutGL.GetCompressedTexImageARB(target, level, img); }
ONUT_FORCE_INLINE void  onutGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void * pixels) { onutGL.GetCompressedTextureImage(texture, level, bufSize, pixels); }
ONUT_FORCE_INLINE void  onutGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, void * img) { onutGL.GetCompressedTextureImageEXT(texture, target, lod, img); }
ONUT_FORCE_INLINE void  onutGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels) { onutGL.GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels); }
ONUT_FORCE_INLINE void  onutGetConvolutionFilter(GLenum target, GLenum format, GLenum type, void * image) { onutGL.GetConvolutionFilter(target, format, type, image); }
ONUT_FORCE_INLINE void  onutGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, void * image) { onutGL.GetConvolutionFilterEXT(target, format, type, image); }
ONUT_FORCE_INLINE void  onutGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat * params) { onutGL.GetConvolutionParameterfv(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { onutGL.GetConvolutionParameterfvEXT(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetConvolutionParameteriv(GLenum target, GLenum pname, GLint * params) { onutGL.GetConvolutionParameteriv(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint * params) { onutGL.GetConvolutionParameterivEXT(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetConvolutionParameterxvOES(GLenum target, GLenum pname, GLfixed * params) { onutGL.GetConvolutionParameterxvOES(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetCoverageModulationTableNV(GLsizei bufsize, GLfloat * v) { onutGL.GetCoverageModulationTableNV(bufsize, v); }
ONUT_FORCE_INLINE GLuint onutGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) { return onutGL.GetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog); }
ONUT_FORCE_INLINE GLuint onutGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum * categories, GLuint * severities, GLuint * ids, GLsizei * lengths, GLchar * message) { return onutGL.GetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message); }
ONUT_FORCE_INLINE GLuint onutGetDebugMessageLogARB(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) { return onutGL.GetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog); }
ONUT_FORCE_INLINE GLuint onutGetDebugMessageLogKHR(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) { return onutGL.GetDebugMessageLogKHR(count, bufSize, sources, types, ids, severities, lengths, messageLog); }
ONUT_FORCE_INLINE void  onutGetDetailTexFuncSGIS(GLenum target, GLfloat * points) { onutGL.GetDetailTexFuncSGIS(target, points); }
ONUT_FORCE_INLINE void  onutGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble * data) { onutGL.GetDoubleIndexedvEXT(target, index, data); }
ONUT_FORCE_INLINE void  onutGetDoublei_v(GLenum target, GLuint index, GLdouble * data) { onutGL.GetDoublei_v(target, index, data); }
ONUT_FORCE_INLINE void  onutGetDoublei_vEXT(GLenum pname, GLuint index, GLdouble * params) { onutGL.GetDoublei_vEXT(pname, index, params); }
ONUT_FORCE_INLINE void  onutGetDoublev(GLenum pname, GLdouble * data) { onutGL.GetDoublev(pname, data); }
ONUT_FORCE_INLINE void  onutGetDriverControlStringQCOM(GLuint driverControl, GLsizei bufSize, GLsizei * length, GLchar * driverControlString) { onutGL.GetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString); }
ONUT_FORCE_INLINE void  onutGetDriverControlsQCOM(GLint * num, GLsizei size, GLuint * driverControls) { onutGL.GetDriverControlsQCOM(num, size, driverControls); }
ONUT_FORCE_INLINE GLenum onutGetError(void) { return onutGL.GetError(); }
ONUT_FORCE_INLINE void  onutGetFenceivNV(GLuint fence, GLenum pname, GLint * params) { onutGL.GetFenceivNV(fence, pname, params); }
ONUT_FORCE_INLINE void  onutGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat * params) { onutGL.GetFinalCombinerInputParameterfvNV(variable, pname, params); }
ONUT_FORCE_INLINE void  onutGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint * params) { onutGL.GetFinalCombinerInputParameterivNV(variable, pname, params); }
ONUT_FORCE_INLINE void  onutGetFirstPerfQueryIdINTEL(GLuint * queryId) { onutGL.GetFirstPerfQueryIdINTEL(queryId); }
ONUT_FORCE_INLINE void  onutGetFixedv(GLenum pname, GLfixed * params) { onutGL.GetFixedv(pname, params); }
ONUT_FORCE_INLINE void  onutGetFixedvOES(GLenum pname, GLfixed * params) { onutGL.GetFixedvOES(pname, params); }
ONUT_FORCE_INLINE void  onutGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat * data) { onutGL.GetFloatIndexedvEXT(target, index, data); }
ONUT_FORCE_INLINE void  onutGetFloati_v(GLenum target, GLuint index, GLfloat * data) { onutGL.GetFloati_v(target, index, data); }
ONUT_FORCE_INLINE void  onutGetFloati_vEXT(GLenum pname, GLuint index, GLfloat * params) { onutGL.GetFloati_vEXT(pname, index, params); }
ONUT_FORCE_INLINE void  onutGetFloati_vNV(GLenum target, GLuint index, GLfloat * data) { onutGL.GetFloati_vNV(target, index, data); }
ONUT_FORCE_INLINE void  onutGetFloati_vOES(GLenum target, GLuint index, GLfloat * data) { onutGL.GetFloati_vOES(target, index, data); }
ONUT_FORCE_INLINE void  onutGetFloatv(GLenum pname, GLfloat * data) { onutGL.GetFloatv(pname, data); }
ONUT_FORCE_INLINE void  onutGetFogFuncSGIS(GLfloat * points) { onutGL.GetFogFuncSGIS(points); }
ONUT_FORCE_INLINE GLint onutGetFragDataIndex(GLuint program, const GLchar * name) { return onutGL.GetFragDataIndex(program, name); }
ONUT_FORCE_INLINE GLint onutGetFragDataIndexEXT(GLuint program, const GLchar * name) { return onutGL.GetFragDataIndexEXT(program, name); }
ONUT_FORCE_INLINE GLint onutGetFragDataLocation(GLuint program, const GLchar * name) { return onutGL.GetFragDataLocation(program, name); }
ONUT_FORCE_INLINE GLint onutGetFragDataLocationEXT(GLuint program, const GLchar * name) { return onutGL.GetFragDataLocationEXT(program, name); }
ONUT_FORCE_INLINE void  onutGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat * params) { onutGL.GetFragmentLightfvSGIX(light, pname, params); }
ONUT_FORCE_INLINE void  onutGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint * params) { onutGL.GetFragmentLightivSGIX(light, pname, params); }
ONUT_FORCE_INLINE void  onutGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat * params) { onutGL.GetFragmentMaterialfvSGIX(face, pname, params); }
ONUT_FORCE_INLINE void  onutGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint * params) { onutGL.GetFragmentMaterialivSGIX(face, pname, params); }
ONUT_FORCE_INLINE void  onutGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint * params) { onutGL.GetFramebufferAttachmentParameteriv(target, attachment, pname, params); }
ONUT_FORCE_INLINE void  onutGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint * params) { onutGL.GetFramebufferAttachmentParameterivEXT(target, attachment, pname, params); }
ONUT_FORCE_INLINE void  onutGetFramebufferAttachmentParameterivOES(GLenum target, GLenum attachment, GLenum pname, GLint * params) { onutGL.GetFramebufferAttachmentParameterivOES(target, attachment, pname, params); }
ONUT_FORCE_INLINE void  onutGetFramebufferParameterfvAMD(GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat * values) { onutGL.GetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values); }
ONUT_FORCE_INLINE void  onutGetFramebufferParameteriv(GLenum target, GLenum pname, GLint * params) { onutGL.GetFramebufferParameteriv(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint * params) { onutGL.GetFramebufferParameterivEXT(framebuffer, pname, params); }
ONUT_FORCE_INLINE GLsizei onutGetFramebufferPixelLocalStorageSizeEXT(GLuint target) { return onutGL.GetFramebufferPixelLocalStorageSizeEXT(target); }
ONUT_FORCE_INLINE GLenum onutGetGraphicsResetStatus(void) { return onutGL.GetGraphicsResetStatus(); }
ONUT_FORCE_INLINE GLenum onutGetGraphicsResetStatusARB(void) { return onutGL.GetGraphicsResetStatusARB(); }
ONUT_FORCE_INLINE GLenum onutGetGraphicsResetStatusEXT(void) { return onutGL.GetGraphicsResetStatusEXT(); }
ONUT_FORCE_INLINE GLenum onutGetGraphicsResetStatusKHR(void) { return onutGL.GetGraphicsResetStatusKHR(); }
ONUT_FORCE_INLINE GLhandleARB onutGetHandleARB(GLenum pname) { return onutGL.GetHandleARB(pname); }
ONUT_FORCE_INLINE void  onutGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { onutGL.GetHistogram(target, reset, format, type, values); }
ONUT_FORCE_INLINE void  onutGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { onutGL.GetHistogramEXT(target, reset, format, type, values); }
ONUT_FORCE_INLINE void  onutGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat * params) { onutGL.GetHistogramParameterfv(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { onutGL.GetHistogramParameterfvEXT(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetHistogramParameteriv(GLenum target, GLenum pname, GLint * params) { onutGL.GetHistogramParameteriv(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint * params) { onutGL.GetHistogramParameterivEXT(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetHistogramParameterxvOES(GLenum target, GLenum pname, GLfixed * params) { onutGL.GetHistogramParameterxvOES(target, pname, params); }
ONUT_FORCE_INLINE GLuint64 onutGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) { return onutGL.GetImageHandleARB(texture, level, layered, layer, format); }
ONUT_FORCE_INLINE GLuint64 onutGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) { return onutGL.GetImageHandleNV(texture, level, layered, layer, format); }
ONUT_FORCE_INLINE void  onutGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat * params) { onutGL.GetImageTransformParameterfvHP(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint * params) { onutGL.GetImageTransformParameterivHP(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog) { onutGL.GetInfoLogARB(obj, maxLength, length, infoLog); }
ONUT_FORCE_INLINE GLint onutGetInstrumentsSGIX(void) { return onutGL.GetInstrumentsSGIX(); }
ONUT_FORCE_INLINE void  onutGetInteger64i_v(GLenum target, GLuint index, GLint64 * data) { onutGL.GetInteger64i_v(target, index, data); }
ONUT_FORCE_INLINE void  onutGetInteger64v(GLenum pname, GLint64 * data) { onutGL.GetInteger64v(pname, data); }
ONUT_FORCE_INLINE void  onutGetInteger64vAPPLE(GLenum pname, GLint64 * params) { onutGL.GetInteger64vAPPLE(pname, params); }
ONUT_FORCE_INLINE void  onutGetIntegerIndexedvEXT(GLenum target, GLuint index, GLint * data) { onutGL.GetIntegerIndexedvEXT(target, index, data); }
ONUT_FORCE_INLINE void  onutGetIntegeri_v(GLenum target, GLuint index, GLint * data) { onutGL.GetIntegeri_v(target, index, data); }
ONUT_FORCE_INLINE void  onutGetIntegeri_vEXT(GLenum target, GLuint index, GLint * data) { onutGL.GetIntegeri_vEXT(target, index, data); }
ONUT_FORCE_INLINE void  onutGetIntegerui64i_vNV(GLenum value, GLuint index, GLuint64EXT * result) { onutGL.GetIntegerui64i_vNV(value, index, result); }
ONUT_FORCE_INLINE void  onutGetIntegerui64vNV(GLenum value, GLuint64EXT * result) { onutGL.GetIntegerui64vNV(value, result); }
ONUT_FORCE_INLINE void  onutGetIntegerv(GLenum pname, GLint * data) { onutGL.GetIntegerv(pname, data); }
ONUT_FORCE_INLINE void  onutGetInternalformatSampleivNV(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint * params) { onutGL.GetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params); }
ONUT_FORCE_INLINE void  onutGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 * params) { onutGL.GetInternalformati64v(target, internalformat, pname, bufSize, params); }
ONUT_FORCE_INLINE void  onutGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params) { onutGL.GetInternalformativ(target, internalformat, pname, bufSize, params); }
ONUT_FORCE_INLINE void  onutGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean * data) { onutGL.GetInvariantBooleanvEXT(id, value, data); }
ONUT_FORCE_INLINE void  onutGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat * data) { onutGL.GetInvariantFloatvEXT(id, value, data); }
ONUT_FORCE_INLINE void  onutGetInvariantIntegervEXT(GLuint id, GLenum value, GLint * data) { onutGL.GetInvariantIntegervEXT(id, value, data); }
ONUT_FORCE_INLINE void  onutGetLightfv(GLenum light, GLenum pname, GLfloat * params) { onutGL.GetLightfv(light, pname, params); }
ONUT_FORCE_INLINE void  onutGetLightiv(GLenum light, GLenum pname, GLint * params) { onutGL.GetLightiv(light, pname, params); }
ONUT_FORCE_INLINE void  onutGetLightxOES(GLenum light, GLenum pname, GLfixed * params) { onutGL.GetLightxOES(light, pname, params); }
ONUT_FORCE_INLINE void  onutGetLightxv(GLenum light, GLenum pname, GLfixed * params) { onutGL.GetLightxv(light, pname, params); }
ONUT_FORCE_INLINE void  onutGetLightxvOES(GLenum light, GLenum pname, GLfixed * params) { onutGL.GetLightxvOES(light, pname, params); }
ONUT_FORCE_INLINE void  onutGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat * params) { onutGL.GetListParameterfvSGIX(list, pname, params); }
ONUT_FORCE_INLINE void  onutGetListParameterivSGIX(GLuint list, GLenum pname, GLint * params) { onutGL.GetListParameterivSGIX(list, pname, params); }
ONUT_FORCE_INLINE void  onutGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean * data) { onutGL.GetLocalConstantBooleanvEXT(id, value, data); }
ONUT_FORCE_INLINE void  onutGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat * data) { onutGL.GetLocalConstantFloatvEXT(id, value, data); }
ONUT_FORCE_INLINE void  onutGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint * data) { onutGL.GetLocalConstantIntegervEXT(id, value, data); }
ONUT_FORCE_INLINE void  onutGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat * params) { onutGL.GetMapAttribParameterfvNV(target, index, pname, params); }
ONUT_FORCE_INLINE void  onutGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint * params) { onutGL.GetMapAttribParameterivNV(target, index, pname, params); }
ONUT_FORCE_INLINE void  onutGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void * points) { onutGL.GetMapControlPointsNV(target, index, type, ustride, vstride, packed, points); }
ONUT_FORCE_INLINE void  onutGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat * params) { onutGL.GetMapParameterfvNV(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetMapParameterivNV(GLenum target, GLenum pname, GLint * params) { onutGL.GetMapParameterivNV(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetMapdv(GLenum target, GLenum query, GLdouble * v) { onutGL.GetMapdv(target, query, v); }
ONUT_FORCE_INLINE void  onutGetMapfv(GLenum target, GLenum query, GLfloat * v) { onutGL.GetMapfv(target, query, v); }
ONUT_FORCE_INLINE void  onutGetMapiv(GLenum target, GLenum query, GLint * v) { onutGL.GetMapiv(target, query, v); }
ONUT_FORCE_INLINE void  onutGetMapxvOES(GLenum target, GLenum query, GLfixed * v) { onutGL.GetMapxvOES(target, query, v); }
ONUT_FORCE_INLINE void  onutGetMaterialfv(GLenum face, GLenum pname, GLfloat * params) { onutGL.GetMaterialfv(face, pname, params); }
ONUT_FORCE_INLINE void  onutGetMaterialiv(GLenum face, GLenum pname, GLint * params) { onutGL.GetMaterialiv(face, pname, params); }
ONUT_FORCE_INLINE void  onutGetMaterialxOES(GLenum face, GLenum pname, GLfixed param) { onutGL.GetMaterialxOES(face, pname, param); }
ONUT_FORCE_INLINE void  onutGetMaterialxv(GLenum face, GLenum pname, GLfixed * params) { onutGL.GetMaterialxv(face, pname, params); }
ONUT_FORCE_INLINE void  onutGetMaterialxvOES(GLenum face, GLenum pname, GLfixed * params) { onutGL.GetMaterialxvOES(face, pname, params); }
ONUT_FORCE_INLINE void  onutGetMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, GLint * params) { onutGL.GetMemoryObjectParameterivEXT(memoryObject, pname, params); }
ONUT_FORCE_INLINE void  onutGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { onutGL.GetMinmax(target, reset, format, type, values); }
ONUT_FORCE_INLINE void  onutGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { onutGL.GetMinmaxEXT(target, reset, format, type, values); }
ONUT_FORCE_INLINE void  onutGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat * params) { onutGL.GetMinmaxParameterfv(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { onutGL.GetMinmaxParameterfvEXT(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetMinmaxParameteriv(GLenum target, GLenum pname, GLint * params) { onutGL.GetMinmaxParameteriv(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint * params) { onutGL.GetMinmaxParameterivEXT(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat * params) { onutGL.GetMultiTexEnvfvEXT(texunit, target, pname, params); }
ONUT_FORCE_INLINE void  onutGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) { onutGL.GetMultiTexEnvivEXT(texunit, target, pname, params); }
ONUT_FORCE_INLINE void  onutGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble * params) { onutGL.GetMultiTexGendvEXT(texunit, coord, pname, params); }
ONUT_FORCE_INLINE void  onutGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat * params) { onutGL.GetMultiTexGenfvEXT(texunit, coord, pname, params); }
ONUT_FORCE_INLINE void  onutGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint * params) { onutGL.GetMultiTexGenivEXT(texunit, coord, pname, params); }
ONUT_FORCE_INLINE void  onutGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void * pixels) { onutGL.GetMultiTexImageEXT(texunit, target, level, format, type, pixels); }
ONUT_FORCE_INLINE void  onutGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat * params) { onutGL.GetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params); }
ONUT_FORCE_INLINE void  onutGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint * params) { onutGL.GetMultiTexLevelParameterivEXT(texunit, target, level, pname, params); }
ONUT_FORCE_INLINE void  onutGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) { onutGL.GetMultiTexParameterIivEXT(texunit, target, pname, params); }
ONUT_FORCE_INLINE void  onutGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint * params) { onutGL.GetMultiTexParameterIuivEXT(texunit, target, pname, params); }
ONUT_FORCE_INLINE void  onutGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat * params) { onutGL.GetMultiTexParameterfvEXT(texunit, target, pname, params); }
ONUT_FORCE_INLINE void  onutGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) { onutGL.GetMultiTexParameterivEXT(texunit, target, pname, params); }
ONUT_FORCE_INLINE void  onutGetMultisamplefv(GLenum pname, GLuint index, GLfloat * val) { onutGL.GetMultisamplefv(pname, index, val); }
ONUT_FORCE_INLINE void  onutGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat * val) { onutGL.GetMultisamplefvNV(pname, index, val); }
ONUT_FORCE_INLINE void  onutGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 * params) { onutGL.GetNamedBufferParameteri64v(buffer, pname, params); }
ONUT_FORCE_INLINE void  onutGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint * params) { onutGL.GetNamedBufferParameteriv(buffer, pname, params); }
ONUT_FORCE_INLINE void  onutGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint * params) { onutGL.GetNamedBufferParameterivEXT(buffer, pname, params); }
ONUT_FORCE_INLINE void  onutGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT * params) { onutGL.GetNamedBufferParameterui64vNV(buffer, pname, params); }
ONUT_FORCE_INLINE void  onutGetNamedBufferPointerv(GLuint buffer, GLenum pname, void ** params) { onutGL.GetNamedBufferPointerv(buffer, pname, params); }
ONUT_FORCE_INLINE void  onutGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, void ** params) { onutGL.GetNamedBufferPointervEXT(buffer, pname, params); }
ONUT_FORCE_INLINE void  onutGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data) { onutGL.GetNamedBufferSubData(buffer, offset, size, data); }
ONUT_FORCE_INLINE void  onutGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data) { onutGL.GetNamedBufferSubDataEXT(buffer, offset, size, data); }
ONUT_FORCE_INLINE void  onutGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params) { onutGL.GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params); }
ONUT_FORCE_INLINE void  onutGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params) { onutGL.GetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params); }
ONUT_FORCE_INLINE void  onutGetNamedFramebufferParameterfvAMD(GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat * values) { onutGL.GetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values); }
ONUT_FORCE_INLINE void  onutGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint * param) { onutGL.GetNamedFramebufferParameteriv(framebuffer, pname, param); }
ONUT_FORCE_INLINE void  onutGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint * params) { onutGL.GetNamedFramebufferParameterivEXT(framebuffer, pname, params); }
ONUT_FORCE_INLINE void  onutGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint * params) { onutGL.GetNamedProgramLocalParameterIivEXT(program, target, index, params); }
ONUT_FORCE_INLINE void  onutGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint * params) { onutGL.GetNamedProgramLocalParameterIuivEXT(program, target, index, params); }
ONUT_FORCE_INLINE void  onutGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble * params) { onutGL.GetNamedProgramLocalParameterdvEXT(program, target, index, params); }
ONUT_FORCE_INLINE void  onutGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat * params) { onutGL.GetNamedProgramLocalParameterfvEXT(program, target, index, params); }
ONUT_FORCE_INLINE void  onutGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, void * string) { onutGL.GetNamedProgramStringEXT(program, target, pname, string); }
ONUT_FORCE_INLINE void  onutGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint * params) { onutGL.GetNamedProgramivEXT(program, target, pname, params); }
ONUT_FORCE_INLINE void  onutGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint * params) { onutGL.GetNamedRenderbufferParameteriv(renderbuffer, pname, params); }
ONUT_FORCE_INLINE void  onutGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint * params) { onutGL.GetNamedRenderbufferParameterivEXT(renderbuffer, pname, params); }
ONUT_FORCE_INLINE void  onutGetNamedStringARB(GLint namelen, const GLchar * name, GLsizei bufSize, GLint * stringlen, GLchar * string) { onutGL.GetNamedStringARB(namelen, name, bufSize, stringlen, string); }
ONUT_FORCE_INLINE void  onutGetNamedStringivARB(GLint namelen, const GLchar * name, GLenum pname, GLint * params) { onutGL.GetNamedStringivARB(namelen, name, pname, params); }
ONUT_FORCE_INLINE void  onutGetNextPerfQueryIdINTEL(GLuint queryId, GLuint * nextQueryId) { onutGL.GetNextPerfQueryIdINTEL(queryId, nextQueryId); }
ONUT_FORCE_INLINE void  onutGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat * params) { onutGL.GetObjectBufferfvATI(buffer, pname, params); }
ONUT_FORCE_INLINE void  onutGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint * params) { onutGL.GetObjectBufferivATI(buffer, pname, params); }
ONUT_FORCE_INLINE void  onutGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label) { onutGL.GetObjectLabel(identifier, name, bufSize, length, label); }
ONUT_FORCE_INLINE void  onutGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei * length, GLchar * label) { onutGL.GetObjectLabelEXT(type, object, bufSize, length, label); }
ONUT_FORCE_INLINE void  onutGetObjectLabelKHR(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label) { onutGL.GetObjectLabelKHR(identifier, name, bufSize, length, label); }
ONUT_FORCE_INLINE void  onutGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat * params) { onutGL.GetObjectParameterfvARB(obj, pname, params); }
ONUT_FORCE_INLINE void  onutGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint * params) { onutGL.GetObjectParameterivAPPLE(objectType, name, pname, params); }
ONUT_FORCE_INLINE void  onutGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint * params) { onutGL.GetObjectParameterivARB(obj, pname, params); }
ONUT_FORCE_INLINE void  onutGetObjectPtrLabel(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label) { onutGL.GetObjectPtrLabel(ptr, bufSize, length, label); }
ONUT_FORCE_INLINE void  onutGetObjectPtrLabelKHR(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label) { onutGL.GetObjectPtrLabelKHR(ptr, bufSize, length, label); }
ONUT_FORCE_INLINE void  onutGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint * params) { onutGL.GetOcclusionQueryivNV(id, pname, params); }
ONUT_FORCE_INLINE void  onutGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint * params) { onutGL.GetOcclusionQueryuivNV(id, pname, params); }
ONUT_FORCE_INLINE void  onutGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat * value) { onutGL.GetPathColorGenfvNV(color, pname, value); }
ONUT_FORCE_INLINE void  onutGetPathColorGenivNV(GLenum color, GLenum pname, GLint * value) { onutGL.GetPathColorGenivNV(color, pname, value); }
ONUT_FORCE_INLINE void  onutGetPathCommandsNV(GLuint path, GLubyte * commands) { onutGL.GetPathCommandsNV(path, commands); }
ONUT_FORCE_INLINE void  onutGetPathCoordsNV(GLuint path, GLfloat * coords) { onutGL.GetPathCoordsNV(path, coords); }
ONUT_FORCE_INLINE void  onutGetPathDashArrayNV(GLuint path, GLfloat * dashArray) { onutGL.GetPathDashArrayNV(path, dashArray); }
ONUT_FORCE_INLINE GLfloat onutGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments) { return onutGL.GetPathLengthNV(path, startSegment, numSegments); }
ONUT_FORCE_INLINE void  onutGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat * metrics) { onutGL.GetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics); }
ONUT_FORCE_INLINE void  onutGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLsizei stride, GLfloat * metrics) { onutGL.GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics); }
ONUT_FORCE_INLINE void  onutGetPathParameterfvNV(GLuint path, GLenum pname, GLfloat * value) { onutGL.GetPathParameterfvNV(path, pname, value); }
ONUT_FORCE_INLINE void  onutGetPathParameterivNV(GLuint path, GLenum pname, GLint * value) { onutGL.GetPathParameterivNV(path, pname, value); }
ONUT_FORCE_INLINE void  onutGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat * returnedSpacing) { onutGL.GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing); }
ONUT_FORCE_INLINE void  onutGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat * value) { onutGL.GetPathTexGenfvNV(texCoordSet, pname, value); }
ONUT_FORCE_INLINE void  onutGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint * value) { onutGL.GetPathTexGenivNV(texCoordSet, pname, value); }
ONUT_FORCE_INLINE void  onutGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar * counterName, GLuint counterDescLength, GLchar * counterDesc, GLuint * counterOffset, GLuint * counterDataSize, GLuint * counterTypeEnum, GLuint * counterDataTypeEnum, GLuint64 * rawCounterMaxValue) { onutGL.GetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue); }
ONUT_FORCE_INLINE void  onutGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint * data, GLint * bytesWritten) { onutGL.GetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten); }
ONUT_FORCE_INLINE void  onutGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void * data) { onutGL.GetPerfMonitorCounterInfoAMD(group, counter, pname, data); }
ONUT_FORCE_INLINE void  onutGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei * length, GLchar * counterString) { onutGL.GetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString); }
ONUT_FORCE_INLINE void  onutGetPerfMonitorCountersAMD(GLuint group, GLint * numCounters, GLint * maxActiveCounters, GLsizei counterSize, GLuint * counters) { onutGL.GetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters); }
ONUT_FORCE_INLINE void  onutGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei * length, GLchar * groupString) { onutGL.GetPerfMonitorGroupStringAMD(group, bufSize, length, groupString); }
ONUT_FORCE_INLINE void  onutGetPerfMonitorGroupsAMD(GLint * numGroups, GLsizei groupsSize, GLuint * groups) { onutGL.GetPerfMonitorGroupsAMD(numGroups, groupsSize, groups); }
ONUT_FORCE_INLINE void  onutGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid * data, GLuint * bytesWritten) { onutGL.GetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten); }
ONUT_FORCE_INLINE void  onutGetPerfQueryIdByNameINTEL(GLchar * queryName, GLuint * queryId) { onutGL.GetPerfQueryIdByNameINTEL(queryName, queryId); }
ONUT_FORCE_INLINE void  onutGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar * queryName, GLuint * dataSize, GLuint * noCounters, GLuint * noInstances, GLuint * capsMask) { onutGL.GetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask); }
ONUT_FORCE_INLINE void  onutGetPixelMapfv(GLenum map, GLfloat * values) { onutGL.GetPixelMapfv(map, values); }
ONUT_FORCE_INLINE void  onutGetPixelMapuiv(GLenum map, GLuint * values) { onutGL.GetPixelMapuiv(map, values); }
ONUT_FORCE_INLINE void  onutGetPixelMapusv(GLenum map, GLushort * values) { onutGL.GetPixelMapusv(map, values); }
ONUT_FORCE_INLINE void  onutGetPixelMapxv(GLenum map, GLint size, GLfixed * values) { onutGL.GetPixelMapxv(map, size, values); }
ONUT_FORCE_INLINE void  onutGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat * params) { onutGL.GetPixelTexGenParameterfvSGIS(pname, params); }
ONUT_FORCE_INLINE void  onutGetPixelTexGenParameterivSGIS(GLenum pname, GLint * params) { onutGL.GetPixelTexGenParameterivSGIS(pname, params); }
ONUT_FORCE_INLINE void  onutGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { onutGL.GetPixelTransformParameterfvEXT(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint * params) { onutGL.GetPixelTransformParameterivEXT(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetPointerIndexedvEXT(GLenum target, GLuint index, void ** data) { onutGL.GetPointerIndexedvEXT(target, index, data); }
ONUT_FORCE_INLINE void  onutGetPointeri_vEXT(GLenum pname, GLuint index, void ** params) { onutGL.GetPointeri_vEXT(pname, index, params); }
ONUT_FORCE_INLINE void  onutGetPointerv(GLenum pname, void ** params) { onutGL.GetPointerv(pname, params); }
ONUT_FORCE_INLINE void  onutGetPointervEXT(GLenum pname, void ** params) { onutGL.GetPointervEXT(pname, params); }
ONUT_FORCE_INLINE void  onutGetPointervKHR(GLenum pname, void ** params) { onutGL.GetPointervKHR(pname, params); }
ONUT_FORCE_INLINE void  onutGetPolygonStipple(GLubyte * mask) { onutGL.GetPolygonStipple(mask); }
ONUT_FORCE_INLINE void  onutGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary) { onutGL.GetProgramBinary(program, bufSize, length, binaryFormat, binary); }
ONUT_FORCE_INLINE void  onutGetProgramBinaryOES(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary) { onutGL.GetProgramBinaryOES(program, bufSize, length, binaryFormat, binary); }
ONUT_FORCE_INLINE void  onutGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint * params) { onutGL.GetProgramEnvParameterIivNV(target, index, params); }
ONUT_FORCE_INLINE void  onutGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint * params) { onutGL.GetProgramEnvParameterIuivNV(target, index, params); }
ONUT_FORCE_INLINE void  onutGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble * params) { onutGL.GetProgramEnvParameterdvARB(target, index, params); }
ONUT_FORCE_INLINE void  onutGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat * params) { onutGL.GetProgramEnvParameterfvARB(target, index, params); }
ONUT_FORCE_INLINE void  onutGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { onutGL.GetProgramInfoLog(program, bufSize, length, infoLog); }
ONUT_FORCE_INLINE void  onutGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint * params) { onutGL.GetProgramInterfaceiv(program, programInterface, pname, params); }
ONUT_FORCE_INLINE void  onutGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint * params) { onutGL.GetProgramLocalParameterIivNV(target, index, params); }
ONUT_FORCE_INLINE void  onutGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint * params) { onutGL.GetProgramLocalParameterIuivNV(target, index, params); }
ONUT_FORCE_INLINE void  onutGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble * params) { onutGL.GetProgramLocalParameterdvARB(target, index, params); }
ONUT_FORCE_INLINE void  onutGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat * params) { onutGL.GetProgramLocalParameterfvARB(target, index, params); }
ONUT_FORCE_INLINE void  onutGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble * params) { onutGL.GetProgramNamedParameterdvNV(id, len, name, params); }
ONUT_FORCE_INLINE void  onutGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat * params) { onutGL.GetProgramNamedParameterfvNV(id, len, name, params); }
ONUT_FORCE_INLINE void  onutGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble * params) { onutGL.GetProgramParameterdvNV(target, index, pname, params); }
ONUT_FORCE_INLINE void  onutGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat * params) { onutGL.GetProgramParameterfvNV(target, index, pname, params); }
ONUT_FORCE_INLINE void  onutGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { onutGL.GetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog); }
ONUT_FORCE_INLINE void  onutGetProgramPipelineInfoLogEXT(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { onutGL.GetProgramPipelineInfoLogEXT(pipeline, bufSize, length, infoLog); }
ONUT_FORCE_INLINE void  onutGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint * params) { onutGL.GetProgramPipelineiv(pipeline, pname, params); }
ONUT_FORCE_INLINE void  onutGetProgramPipelineivEXT(GLuint pipeline, GLenum pname, GLint * params) { if (onutGLSupport(GL_ES_VERSION_2_0) && (pname == GL_CURRENT_PROGRAM)) { pname = GL_ACTIVE_PROGRAM; } else if (onutGLSupport(GL_VERSION_1_0) && (pname == GL_ACTIVE_PROGRAM)) { pname = GL_CURRENT_PROGRAM; } onutGL.GetProgramPipelineivEXT(pipeline, pname, params); }
ONUT_FORCE_INLINE GLuint onutGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar * name) { return onutGL.GetProgramResourceIndex(program, programInterface, name); }
ONUT_FORCE_INLINE GLint onutGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar * name) { return onutGL.GetProgramResourceLocation(program, programInterface, name); }
ONUT_FORCE_INLINE GLint onutGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar * name) { return onutGL.GetProgramResourceLocationIndex(program, programInterface, name); }
ONUT_FORCE_INLINE GLint onutGetProgramResourceLocationIndexEXT(GLuint program, GLenum programInterface, const GLchar * name) { return onutGL.GetProgramResourceLocationIndexEXT(program, programInterface, name); }
ONUT_FORCE_INLINE void  onutGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name) { onutGL.GetProgramResourceName(program, programInterface, index, bufSize, length, name); }
ONUT_FORCE_INLINE void  onutGetProgramResourcefvNV(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLfloat * params) { onutGL.GetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params); }
ONUT_FORCE_INLINE void  onutGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params) { onutGL.GetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params); }
ONUT_FORCE_INLINE void  onutGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint * values) { onutGL.GetProgramStageiv(program, shadertype, pname, values); }
ONUT_FORCE_INLINE void  onutGetProgramStringARB(GLenum target, GLenum pname, void * string) { onutGL.GetProgramStringARB(target, pname, string); }
ONUT_FORCE_INLINE void  onutGetProgramStringNV(GLuint id, GLenum pname, GLubyte * program) { onutGL.GetProgramStringNV(id, pname, program); }
ONUT_FORCE_INLINE void  onutGetProgramSubroutineParameteruivNV(GLenum target, GLuint index, GLuint * param) { onutGL.GetProgramSubroutineParameteruivNV(target, index, param); }
ONUT_FORCE_INLINE void  onutGetProgramiv(GLuint program, GLenum pname, GLint * params) { onutGL.GetProgramiv(program, pname, params); }
ONUT_FORCE_INLINE void  onutGetProgramivARB(GLenum target, GLenum pname, GLint * params) { onutGL.GetProgramivARB(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetProgramivNV(GLuint id, GLenum pname, GLint * params) { onutGL.GetProgramivNV(id, pname, params); }
ONUT_FORCE_INLINE void  onutGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { onutGL.GetQueryBufferObjecti64v(id, buffer, pname, offset); }
ONUT_FORCE_INLINE void  onutGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { onutGL.GetQueryBufferObjectiv(id, buffer, pname, offset); }
ONUT_FORCE_INLINE void  onutGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { onutGL.GetQueryBufferObjectui64v(id, buffer, pname, offset); }
ONUT_FORCE_INLINE void  onutGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { onutGL.GetQueryBufferObjectuiv(id, buffer, pname, offset); }
ONUT_FORCE_INLINE void  onutGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint * params) { onutGL.GetQueryIndexediv(target, index, pname, params); }
ONUT_FORCE_INLINE void  onutGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 * params) { onutGL.GetQueryObjecti64v(id, pname, params); }
ONUT_FORCE_INLINE void  onutGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64 * params) { onutGL.GetQueryObjecti64vEXT(id, pname, params); }
ONUT_FORCE_INLINE void  onutGetQueryObjectiv(GLuint id, GLenum pname, GLint * params) { onutGL.GetQueryObjectiv(id, pname, params); }
ONUT_FORCE_INLINE void  onutGetQueryObjectivARB(GLuint id, GLenum pname, GLint * params) { onutGL.GetQueryObjectivARB(id, pname, params); }
ONUT_FORCE_INLINE void  onutGetQueryObjectivEXT(GLuint id, GLenum pname, GLint * params) { onutGL.GetQueryObjectivEXT(id, pname, params); }
ONUT_FORCE_INLINE void  onutGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 * params) { onutGL.GetQueryObjectui64v(id, pname, params); }
ONUT_FORCE_INLINE void  onutGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64 * params) { onutGL.GetQueryObjectui64vEXT(id, pname, params); }
ONUT_FORCE_INLINE void  onutGetQueryObjectuiv(GLuint id, GLenum pname, GLuint * params) { onutGL.GetQueryObjectuiv(id, pname, params); }
ONUT_FORCE_INLINE void  onutGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint * params) { onutGL.GetQueryObjectuivARB(id, pname, params); }
ONUT_FORCE_INLINE void  onutGetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint * params) { onutGL.GetQueryObjectuivEXT(id, pname, params); }
ONUT_FORCE_INLINE void  onutGetQueryiv(GLenum target, GLenum pname, GLint * params) { onutGL.GetQueryiv(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetQueryivARB(GLenum target, GLenum pname, GLint * params) { onutGL.GetQueryivARB(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetQueryivEXT(GLenum target, GLenum pname, GLint * params) { onutGL.GetQueryivEXT(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint * params) { onutGL.GetRenderbufferParameteriv(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint * params) { onutGL.GetRenderbufferParameterivEXT(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetRenderbufferParameterivOES(GLenum target, GLenum pname, GLint * params) { onutGL.GetRenderbufferParameterivOES(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint * params) { onutGL.GetSamplerParameterIiv(sampler, pname, params); }
ONUT_FORCE_INLINE void  onutGetSamplerParameterIivEXT(GLuint sampler, GLenum pname, GLint * params) { onutGL.GetSamplerParameterIivEXT(sampler, pname, params); }
ONUT_FORCE_INLINE void  onutGetSamplerParameterIivOES(GLuint sampler, GLenum pname, GLint * params) { onutGL.GetSamplerParameterIivOES(sampler, pname, params); }
ONUT_FORCE_INLINE void  onutGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint * params) { onutGL.GetSamplerParameterIuiv(sampler, pname, params); }
ONUT_FORCE_INLINE void  onutGetSamplerParameterIuivEXT(GLuint sampler, GLenum pname, GLuint * params) { onutGL.GetSamplerParameterIuivEXT(sampler, pname, params); }
ONUT_FORCE_INLINE void  onutGetSamplerParameterIuivOES(GLuint sampler, GLenum pname, GLuint * params) { onutGL.GetSamplerParameterIuivOES(sampler, pname, params); }
ONUT_FORCE_INLINE void  onutGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat * params) { onutGL.GetSamplerParameterfv(sampler, pname, params); }
ONUT_FORCE_INLINE void  onutGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint * params) { onutGL.GetSamplerParameteriv(sampler, pname, params); }
ONUT_FORCE_INLINE void  onutGetSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, GLuint64 * params) { onutGL.GetSemaphoreParameterui64vEXT(semaphore, pname, params); }
ONUT_FORCE_INLINE void  onutGetSeparableFilter(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span) { onutGL.GetSeparableFilter(target, format, type, row, column, span); }
ONUT_FORCE_INLINE void  onutGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span) { onutGL.GetSeparableFilterEXT(target, format, type, row, column, span); }
ONUT_FORCE_INLINE void  onutGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { onutGL.GetShaderInfoLog(shader, bufSize, length, infoLog); }
ONUT_FORCE_INLINE void  onutGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision) { onutGL.GetShaderPrecisionFormat(shadertype, precisiontype, range, precision); }
ONUT_FORCE_INLINE void  onutGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source) { onutGL.GetShaderSource(shader, bufSize, length, source); }
ONUT_FORCE_INLINE void  onutGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * source) { onutGL.GetShaderSourceARB(obj, maxLength, length, source); }
ONUT_FORCE_INLINE void  onutGetShaderiv(GLuint shader, GLenum pname, GLint * params) { onutGL.GetShaderiv(shader, pname, params); }
ONUT_FORCE_INLINE void  onutGetSharpenTexFuncSGIS(GLenum target, GLfloat * points) { onutGL.GetSharpenTexFuncSGIS(target, points); }
ONUT_FORCE_INLINE GLushort onutGetStageIndexNV(GLenum shadertype) { return onutGL.GetStageIndexNV(shadertype); }
ONUT_FORCE_INLINE const GLubyte * onutGetString(GLenum name) { return onutGL.GetString(name); }
ONUT_FORCE_INLINE const GLubyte * onutGetStringi(GLenum name, GLuint index) { return onutGL.GetStringi(name, index); }
ONUT_FORCE_INLINE GLuint onutGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar * name) { return onutGL.GetSubroutineIndex(program, shadertype, name); }
ONUT_FORCE_INLINE GLint onutGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar * name) { return onutGL.GetSubroutineUniformLocation(program, shadertype, name); }
ONUT_FORCE_INLINE void  onutGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values) { onutGL.GetSynciv(sync, pname, bufSize, length, values); }
ONUT_FORCE_INLINE void  onutGetSyncivAPPLE(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values) { onutGL.GetSyncivAPPLE(sync, pname, bufSize, length, values); }
ONUT_FORCE_INLINE void  onutGetTexBumpParameterfvATI(GLenum pname, GLfloat * param) { onutGL.GetTexBumpParameterfvATI(pname, param); }
ONUT_FORCE_INLINE void  onutGetTexBumpParameterivATI(GLenum pname, GLint * param) { onutGL.GetTexBumpParameterivATI(pname, param); }
ONUT_FORCE_INLINE void  onutGetTexEnvfv(GLenum target, GLenum pname, GLfloat * params) { onutGL.GetTexEnvfv(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexEnviv(GLenum target, GLenum pname, GLint * params) { onutGL.GetTexEnviv(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexEnvxv(GLenum target, GLenum pname, GLfixed * params) { onutGL.GetTexEnvxv(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexEnvxvOES(GLenum target, GLenum pname, GLfixed * params) { onutGL.GetTexEnvxvOES(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat * weights) { onutGL.GetTexFilterFuncSGIS(target, filter, weights); }
ONUT_FORCE_INLINE void  onutGetTexGendv(GLenum coord, GLenum pname, GLdouble * params) { onutGL.GetTexGendv(coord, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexGenfv(GLenum coord, GLenum pname, GLfloat * params) { onutGL.GetTexGenfv(coord, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexGenfvOES(GLenum coord, GLenum pname, GLfloat * params) { onutGL.GetTexGenfvOES(coord, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexGeniv(GLenum coord, GLenum pname, GLint * params) { onutGL.GetTexGeniv(coord, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexGenivOES(GLenum coord, GLenum pname, GLint * params) { onutGL.GetTexGenivOES(coord, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed * params) { onutGL.GetTexGenxvOES(coord, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void * pixels) { onutGL.GetTexImage(target, level, format, type, pixels); }
ONUT_FORCE_INLINE void  onutGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params) { onutGL.GetTexLevelParameterfv(target, level, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params) { onutGL.GetTexLevelParameteriv(target, level, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexLevelParameterxvOES(GLenum target, GLint level, GLenum pname, GLfixed * params) { onutGL.GetTexLevelParameterxvOES(target, level, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexParameterIiv(GLenum target, GLenum pname, GLint * params) { onutGL.GetTexParameterIiv(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexParameterIivEXT(GLenum target, GLenum pname, GLint * params) { onutGL.GetTexParameterIivEXT(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexParameterIivOES(GLenum target, GLenum pname, GLint * params) { onutGL.GetTexParameterIivOES(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexParameterIuiv(GLenum target, GLenum pname, GLuint * params) { onutGL.GetTexParameterIuiv(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint * params) { onutGL.GetTexParameterIuivEXT(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexParameterIuivOES(GLenum target, GLenum pname, GLuint * params) { onutGL.GetTexParameterIuivOES(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexParameterPointervAPPLE(GLenum target, GLenum pname, void ** params) { onutGL.GetTexParameterPointervAPPLE(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params) { onutGL.GetTexParameterfv(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexParameteriv(GLenum target, GLenum pname, GLint * params) { onutGL.GetTexParameteriv(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexParameterxv(GLenum target, GLenum pname, GLfixed * params) { onutGL.GetTexParameterxv(target, pname, params); }
ONUT_FORCE_INLINE void  onutGetTexParameterxvOES(GLenum target, GLenum pname, GLfixed * params) { onutGL.GetTexParameterxvOES(target, pname, params); }
ONUT_FORCE_INLINE GLuint64 onutGetTextureHandleARB(GLuint texture) { return onutGL.GetTextureHandleARB(texture); }
ONUT_FORCE_INLINE GLuint64 onutGetTextureHandleIMG(GLuint texture) { return onutGL.GetTextureHandleIMG(texture); }
ONUT_FORCE_INLINE GLuint64 onutGetTextureHandleNV(GLuint texture) { return onutGL.GetTextureHandleNV(texture); }
ONUT_FORCE_INLINE void  onutGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels) { onutGL.GetTextureImage(texture, level, format, type, bufSize, pixels); }
ONUT_FORCE_INLINE void  onutGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void * pixels) { onutGL.GetTextureImageEXT(texture, target, level, format, type, pixels); }
ONUT_FORCE_INLINE void  onutGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat * params) { onutGL.GetTextureLevelParameterfv(texture, level, pname, params); }
ONUT_FORCE_INLINE void  onutGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat * params) { onutGL.GetTextureLevelParameterfvEXT(texture, target, level, pname, params); }
ONUT_FORCE_INLINE void  onutGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint * params) { onutGL.GetTextureLevelParameteriv(texture, level, pname, params); }
ONUT_FORCE_INLINE void  onutGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint * params) { onutGL.GetTextureLevelParameterivEXT(texture, target, level, pname, params); }
ONUT_FORCE_INLINE void  onutGetTextureParameterIiv(GLuint texture, GLenum pname, GLint * params) { onutGL.GetTextureParameterIiv(texture, pname, params); }
ONUT_FORCE_INLINE void  onutGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint * params) { onutGL.GetTextureParameterIivEXT(texture, target, pname, params); }
ONUT_FORCE_INLINE void  onutGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint * params) { onutGL.GetTextureParameterIuiv(texture, pname, params); }
ONUT_FORCE_INLINE void  onutGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint * params) { onutGL.GetTextureParameterIuivEXT(texture, target, pname, params); }
ONUT_FORCE_INLINE void  onutGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat * params) { onutGL.GetTextureParameterfv(texture, pname, params); }
ONUT_FORCE_INLINE void  onutGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat * params) { onutGL.GetTextureParameterfvEXT(texture, target, pname, params); }
ONUT_FORCE_INLINE void  onutGetTextureParameteriv(GLuint texture, GLenum pname, GLint * params) { onutGL.GetTextureParameteriv(texture, pname, params); }
ONUT_FORCE_INLINE void  onutGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint * params) { onutGL.GetTextureParameterivEXT(texture, target, pname, params); }
ONUT_FORCE_INLINE GLuint64 onutGetTextureSamplerHandleARB(GLuint texture, GLuint sampler) { return onutGL.GetTextureSamplerHandleARB(texture, sampler); }
ONUT_FORCE_INLINE GLuint64 onutGetTextureSamplerHandleIMG(GLuint texture, GLuint sampler) { return onutGL.GetTextureSamplerHandleIMG(texture, sampler); }
ONUT_FORCE_INLINE GLuint64 onutGetTextureSamplerHandleNV(GLuint texture, GLuint sampler) { return onutGL.GetTextureSamplerHandleNV(texture, sampler); }
ONUT_FORCE_INLINE void  onutGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels) { onutGL.GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels); }
ONUT_FORCE_INLINE void  onutGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint * params) { onutGL.GetTrackMatrixivNV(target, address, pname, params); }
ONUT_FORCE_INLINE void  onutGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) { onutGL.GetTransformFeedbackVarying(program, index, bufSize, length, size, type, name); }
ONUT_FORCE_INLINE void  onutGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) { onutGL.GetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name); }
ONUT_FORCE_INLINE void  onutGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint * location) { onutGL.GetTransformFeedbackVaryingNV(program, index, location); }
ONUT_FORCE_INLINE void  onutGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 * param) { onutGL.GetTransformFeedbacki64_v(xfb, pname, index, param); }
ONUT_FORCE_INLINE void  onutGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint * param) { onutGL.GetTransformFeedbacki_v(xfb, pname, index, param); }
ONUT_FORCE_INLINE void  onutGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint * param) { onutGL.GetTransformFeedbackiv(xfb, pname, param); }
ONUT_FORCE_INLINE void  onutGetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufsize, GLsizei * length, GLchar * source) { onutGL.GetTranslatedShaderSourceANGLE(shader, bufsize, length, source); }
ONUT_FORCE_INLINE GLuint onutGetUniformBlockIndex(GLuint program, const GLchar * uniformBlockName) { return onutGL.GetUniformBlockIndex(program, uniformBlockName); }
ONUT_FORCE_INLINE GLint onutGetUniformBufferSizeEXT(GLuint program, GLint location) { return onutGL.GetUniformBufferSizeEXT(program, location); }
ONUT_FORCE_INLINE void  onutGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices) { onutGL.GetUniformIndices(program, uniformCount, uniformNames, uniformIndices); }
ONUT_FORCE_INLINE GLint onutGetUniformLocation(GLuint program, const GLchar * name) { return onutGL.GetUniformLocation(program, name); }
ONUT_FORCE_INLINE GLint onutGetUniformLocationARB(GLhandleARB programObj, const GLcharARB * name) { return onutGL.GetUniformLocationARB(programObj, name); }
ONUT_FORCE_INLINE GLintptr onutGetUniformOffsetEXT(GLuint program, GLint location) { return onutGL.GetUniformOffsetEXT(program, location); }
ONUT_FORCE_INLINE void  onutGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint * params) { onutGL.GetUniformSubroutineuiv(shadertype, location, params); }
ONUT_FORCE_INLINE void  onutGetUniformdv(GLuint program, GLint location, GLdouble * params) { onutGL.GetUniformdv(program, location, params); }
ONUT_FORCE_INLINE void  onutGetUniformfv(GLuint program, GLint location, GLfloat * params) { onutGL.GetUniformfv(program, location, params); }
ONUT_FORCE_INLINE void  onutGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat * params) { onutGL.GetUniformfvARB(programObj, location, params); }
ONUT_FORCE_INLINE void  onutGetUniformi64vARB(GLuint program, GLint location, GLint64 * params) { onutGL.GetUniformi64vARB(program, location, params); }
ONUT_FORCE_INLINE void  onutGetUniformi64vNV(GLuint program, GLint location, GLint64EXT * params) { onutGL.GetUniformi64vNV(program, location, params); }
ONUT_FORCE_INLINE void  onutGetUniformiv(GLuint program, GLint location, GLint * params) { onutGL.GetUniformiv(program, location, params); }
ONUT_FORCE_INLINE void  onutGetUniformivARB(GLhandleARB programObj, GLint location, GLint * params) { onutGL.GetUniformivARB(programObj, location, params); }
ONUT_FORCE_INLINE void  onutGetUniformui64vARB(GLuint program, GLint location, GLuint64 * params) { onutGL.GetUniformui64vARB(program, location, params); }
ONUT_FORCE_INLINE void  onutGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT * params) { onutGL.GetUniformui64vNV(program, location, params); }
ONUT_FORCE_INLINE void  onutGetUniformuiv(GLuint program, GLint location, GLuint * params) { onutGL.GetUniformuiv(program, location, params); }
ONUT_FORCE_INLINE void  onutGetUniformuivEXT(GLuint program, GLint location, GLuint * params) { onutGL.GetUniformuivEXT(program, location, params); }
ONUT_FORCE_INLINE void  onutGetUnsignedBytei_vEXT(GLenum target, GLuint index, GLubyte * data) { onutGL.GetUnsignedBytei_vEXT(target, index, data); }
ONUT_FORCE_INLINE void  onutGetUnsignedBytevEXT(GLenum pname, GLubyte * data) { onutGL.GetUnsignedBytevEXT(pname, data); }
ONUT_FORCE_INLINE void  onutGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat * params) { onutGL.GetVariantArrayObjectfvATI(id, pname, params); }
ONUT_FORCE_INLINE void  onutGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint * params) { onutGL.GetVariantArrayObjectivATI(id, pname, params); }
ONUT_FORCE_INLINE void  onutGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean * data) { onutGL.GetVariantBooleanvEXT(id, value, data); }
ONUT_FORCE_INLINE void  onutGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat * data) { onutGL.GetVariantFloatvEXT(id, value, data); }
ONUT_FORCE_INLINE void  onutGetVariantIntegervEXT(GLuint id, GLenum value, GLint * data) { onutGL.GetVariantIntegervEXT(id, value, data); }
ONUT_FORCE_INLINE void  onutGetVariantPointervEXT(GLuint id, GLenum value, void ** data) { onutGL.GetVariantPointervEXT(id, value, data); }
ONUT_FORCE_INLINE GLint onutGetVaryingLocationNV(GLuint program, const GLchar * name) { return onutGL.GetVaryingLocationNV(program, name); }
ONUT_FORCE_INLINE void  onutGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 * param) { onutGL.GetVertexArrayIndexed64iv(vaobj, index, pname, param); }
ONUT_FORCE_INLINE void  onutGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint * param) { onutGL.GetVertexArrayIndexediv(vaobj, index, pname, param); }
ONUT_FORCE_INLINE void  onutGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint * param) { onutGL.GetVertexArrayIntegeri_vEXT(vaobj, index, pname, param); }
ONUT_FORCE_INLINE void  onutGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint * param) { onutGL.GetVertexArrayIntegervEXT(vaobj, pname, param); }
ONUT_FORCE_INLINE void  onutGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, void ** param) { onutGL.GetVertexArrayPointeri_vEXT(vaobj, index, pname, param); }
ONUT_FORCE_INLINE void  onutGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, void ** param) { onutGL.GetVertexArrayPointervEXT(vaobj, pname, param); }
ONUT_FORCE_INLINE void  onutGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint * param) { onutGL.GetVertexArrayiv(vaobj, pname, param); }
ONUT_FORCE_INLINE void  onutGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat * params) { onutGL.GetVertexAttribArrayObjectfvATI(index, pname, params); }
ONUT_FORCE_INLINE void  onutGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint * params) { onutGL.GetVertexAttribArrayObjectivATI(index, pname, params); }
ONUT_FORCE_INLINE void  onutGetVertexAttribIiv(GLuint index, GLenum pname, GLint * params) { onutGL.GetVertexAttribIiv(index, pname, params); }
ONUT_FORCE_INLINE void  onutGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint * params) { onutGL.GetVertexAttribIivEXT(index, pname, params); }
ONUT_FORCE_INLINE void  onutGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint * params) { onutGL.GetVertexAttribIuiv(index, pname, params); }
ONUT_FORCE_INLINE void  onutGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint * params) { onutGL.GetVertexAttribIuivEXT(index, pname, params); }
ONUT_FORCE_INLINE void  onutGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble * params) { onutGL.GetVertexAttribLdv(index, pname, params); }
ONUT_FORCE_INLINE void  onutGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble * params) { onutGL.GetVertexAttribLdvEXT(index, pname, params); }
ONUT_FORCE_INLINE void  onutGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT * params) { onutGL.GetVertexAttribLi64vNV(index, pname, params); }
ONUT_FORCE_INLINE void  onutGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT * params) { onutGL.GetVertexAttribLui64vARB(index, pname, params); }
ONUT_FORCE_INLINE void  onutGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT * params) { onutGL.GetVertexAttribLui64vNV(index, pname, params); }
ONUT_FORCE_INLINE void  onutGetVertexAttribPointerv(GLuint index, GLenum pname, void ** pointer) { onutGL.GetVertexAttribPointerv(index, pname, pointer); }
ONUT_FORCE_INLINE void  onutGetVertexAttribPointervARB(GLuint index, GLenum pname, void ** pointer) { onutGL.GetVertexAttribPointervARB(index, pname, pointer); }
ONUT_FORCE_INLINE void  onutGetVertexAttribPointervNV(GLuint index, GLenum pname, void ** pointer) { onutGL.GetVertexAttribPointervNV(index, pname, pointer); }
ONUT_FORCE_INLINE void  onutGetVertexAttribdv(GLuint index, GLenum pname, GLdouble * params) { onutGL.GetVertexAttribdv(index, pname, params); }
ONUT_FORCE_INLINE void  onutGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble * params) { onutGL.GetVertexAttribdvARB(index, pname, params); }
ONUT_FORCE_INLINE void  onutGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble * params) { onutGL.GetVertexAttribdvNV(index, pname, params); }
ONUT_FORCE_INLINE void  onutGetVertexAttribfv(GLuint index, GLenum pname, GLfloat * params) { onutGL.GetVertexAttribfv(index, pname, params); }
ONUT_FORCE_INLINE void  onutGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat * params) { onutGL.GetVertexAttribfvARB(index, pname, params); }
ONUT_FORCE_INLINE void  onutGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat * params) { onutGL.GetVertexAttribfvNV(index, pname, params); }
ONUT_FORCE_INLINE void  onutGetVertexAttribiv(GLuint index, GLenum pname, GLint * params) { onutGL.GetVertexAttribiv(index, pname, params); }
ONUT_FORCE_INLINE void  onutGetVertexAttribivARB(GLuint index, GLenum pname, GLint * params) { onutGL.GetVertexAttribivARB(index, pname, params); }
ONUT_FORCE_INLINE void  onutGetVertexAttribivNV(GLuint index, GLenum pname, GLint * params) { onutGL.GetVertexAttribivNV(index, pname, params); }
ONUT_FORCE_INLINE void  onutGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble * params) { onutGL.GetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params); }
ONUT_FORCE_INLINE void  onutGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat * params) { onutGL.GetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params); }
ONUT_FORCE_INLINE void  onutGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint * params) { onutGL.GetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params); }
ONUT_FORCE_INLINE void  onutGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint * params) { onutGL.GetVideoCaptureivNV(video_capture_slot, pname, params); }
ONUT_FORCE_INLINE void  onutGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT * params) { onutGL.GetVideoi64vNV(video_slot, pname, params); }
ONUT_FORCE_INLINE void  onutGetVideoivNV(GLuint video_slot, GLenum pname, GLint * params) { onutGL.GetVideoivNV(video_slot, pname, params); }
ONUT_FORCE_INLINE void  onutGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT * params) { onutGL.GetVideoui64vNV(video_slot, pname, params); }
ONUT_FORCE_INLINE void  onutGetVideouivNV(GLuint video_slot, GLenum pname, GLuint * params) { onutGL.GetVideouivNV(video_slot, pname, params); }
ONUT_FORCE_INLINE GLVULKANPROCNV onutGetVkProcAddrNV(const GLchar * name) { return onutGL.GetVkProcAddrNV(name); }
ONUT_FORCE_INLINE void  onutGetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table) { onutGL.GetnColorTable(target, format, type, bufSize, table); }
ONUT_FORCE_INLINE void  onutGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table) { onutGL.GetnColorTableARB(target, format, type, bufSize, table); }
ONUT_FORCE_INLINE void  onutGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void * pixels) { onutGL.GetnCompressedTexImage(target, lod, bufSize, pixels); }
ONUT_FORCE_INLINE void  onutGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void * img) { onutGL.GetnCompressedTexImageARB(target, lod, bufSize, img); }
ONUT_FORCE_INLINE void  onutGetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image) { onutGL.GetnConvolutionFilter(target, format, type, bufSize, image); }
ONUT_FORCE_INLINE void  onutGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image) { onutGL.GetnConvolutionFilterARB(target, format, type, bufSize, image); }
ONUT_FORCE_INLINE void  onutGetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { onutGL.GetnHistogram(target, reset, format, type, bufSize, values); }
ONUT_FORCE_INLINE void  onutGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { onutGL.GetnHistogramARB(target, reset, format, type, bufSize, values); }
ONUT_FORCE_INLINE void  onutGetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v) { onutGL.GetnMapdv(target, query, bufSize, v); }
ONUT_FORCE_INLINE void  onutGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v) { onutGL.GetnMapdvARB(target, query, bufSize, v); }
ONUT_FORCE_INLINE void  onutGetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v) { onutGL.GetnMapfv(target, query, bufSize, v); }
ONUT_FORCE_INLINE void  onutGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v) { onutGL.GetnMapfvARB(target, query, bufSize, v); }
ONUT_FORCE_INLINE void  onutGetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint * v) { onutGL.GetnMapiv(target, query, bufSize, v); }
ONUT_FORCE_INLINE void  onutGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint * v) { onutGL.GetnMapivARB(target, query, bufSize, v); }
ONUT_FORCE_INLINE void  onutGetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { onutGL.GetnMinmax(target, reset, format, type, bufSize, values); }
ONUT_FORCE_INLINE void  onutGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { onutGL.GetnMinmaxARB(target, reset, format, type, bufSize, values); }
ONUT_FORCE_INLINE void  onutGetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat * values) { onutGL.GetnPixelMapfv(map, bufSize, values); }
ONUT_FORCE_INLINE void  onutGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat * values) { onutGL.GetnPixelMapfvARB(map, bufSize, values); }
ONUT_FORCE_INLINE void  onutGetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint * values) { onutGL.GetnPixelMapuiv(map, bufSize, values); }
ONUT_FORCE_INLINE void  onutGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint * values) { onutGL.GetnPixelMapuivARB(map, bufSize, values); }
ONUT_FORCE_INLINE void  onutGetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort * values) { onutGL.GetnPixelMapusv(map, bufSize, values); }
ONUT_FORCE_INLINE void  onutGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort * values) { onutGL.GetnPixelMapusvARB(map, bufSize, values); }
ONUT_FORCE_INLINE void  onutGetnPolygonStipple(GLsizei bufSize, GLubyte * pattern) { onutGL.GetnPolygonStipple(bufSize, pattern); }
ONUT_FORCE_INLINE void  onutGetnPolygonStippleARB(GLsizei bufSize, GLubyte * pattern) { onutGL.GetnPolygonStippleARB(bufSize, pattern); }
ONUT_FORCE_INLINE void  onutGetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span) { onutGL.GetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span); }
ONUT_FORCE_INLINE void  onutGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span) { onutGL.GetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span); }
ONUT_FORCE_INLINE void  onutGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels) { onutGL.GetnTexImage(target, level, format, type, bufSize, pixels); }
ONUT_FORCE_INLINE void  onutGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * img) { onutGL.GetnTexImageARB(target, level, format, type, bufSize, img); }
ONUT_FORCE_INLINE void  onutGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble * params) { onutGL.GetnUniformdv(program, location, bufSize, params); }
ONUT_FORCE_INLINE void  onutGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble * params) { onutGL.GetnUniformdvARB(program, location, bufSize, params); }
ONUT_FORCE_INLINE void  onutGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { onutGL.GetnUniformfv(program, location, bufSize, params); }
ONUT_FORCE_INLINE void  onutGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { onutGL.GetnUniformfvARB(program, location, bufSize, params); }
ONUT_FORCE_INLINE void  onutGetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { onutGL.GetnUniformfvEXT(program, location, bufSize, params); }
ONUT_FORCE_INLINE void  onutGetnUniformfvKHR(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { onutGL.GetnUniformfvKHR(program, location, bufSize, params); }
ONUT_FORCE_INLINE void  onutGetnUniformi64vARB(GLuint program, GLint location, GLsizei bufSize, GLint64 * params) { onutGL.GetnUniformi64vARB(program, location, bufSize, params); }
ONUT_FORCE_INLINE void  onutGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint * params) { onutGL.GetnUniformiv(program, location, bufSize, params); }
ONUT_FORCE_INLINE void  onutGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint * params) { onutGL.GetnUniformivARB(program, location, bufSize, params); }
ONUT_FORCE_INLINE void  onutGetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint * params) { onutGL.GetnUniformivEXT(program, location, bufSize, params); }
ONUT_FORCE_INLINE void  onutGetnUniformivKHR(GLuint program, GLint location, GLsizei bufSize, GLint * params) { onutGL.GetnUniformivKHR(program, location, bufSize, params); }
ONUT_FORCE_INLINE void  onutGetnUniformui64vARB(GLuint program, GLint location, GLsizei bufSize, GLuint64 * params) { onutGL.GetnUniformui64vARB(program, location, bufSize, params); }
ONUT_FORCE_INLINE void  onutGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint * params) { onutGL.GetnUniformuiv(program, location, bufSize, params); }
ONUT_FORCE_INLINE void  onutGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint * params) { onutGL.GetnUniformuivARB(program, location, bufSize, params); }
ONUT_FORCE_INLINE void  onutGetnUniformuivKHR(GLuint program, GLint location, GLsizei bufSize, GLuint * params) { onutGL.GetnUniformuivKHR(program, location, bufSize, params); }
ONUT_FORCE_INLINE void  onutGlobalAlphaFactorbSUN(GLbyte factor) { onutGL.GlobalAlphaFactorbSUN(factor); }
ONUT_FORCE_INLINE void  onutGlobalAlphaFactordSUN(GLdouble factor) { onutGL.GlobalAlphaFactordSUN(factor); }
ONUT_FORCE_INLINE void  onutGlobalAlphaFactorfSUN(GLfloat factor) { onutGL.GlobalAlphaFactorfSUN(factor); }
ONUT_FORCE_INLINE void  onutGlobalAlphaFactoriSUN(GLint factor) { onutGL.GlobalAlphaFactoriSUN(factor); }
ONUT_FORCE_INLINE void  onutGlobalAlphaFactorsSUN(GLshort factor) { onutGL.GlobalAlphaFactorsSUN(factor); }
ONUT_FORCE_INLINE void  onutGlobalAlphaFactorubSUN(GLubyte factor) { onutGL.GlobalAlphaFactorubSUN(factor); }
ONUT_FORCE_INLINE void  onutGlobalAlphaFactoruiSUN(GLuint factor) { onutGL.GlobalAlphaFactoruiSUN(factor); }
ONUT_FORCE_INLINE void  onutGlobalAlphaFactorusSUN(GLushort factor) { onutGL.GlobalAlphaFactorusSUN(factor); }
ONUT_FORCE_INLINE void  onutHint(GLenum target, GLenum mode) { onutGL.Hint(target, mode); }
ONUT_FORCE_INLINE void  onutHintPGI(GLenum target, GLint mode) { onutGL.HintPGI(target, mode); }
ONUT_FORCE_INLINE void  onutHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) { onutGL.Histogram(target, width, internalformat, sink); }
ONUT_FORCE_INLINE void  onutHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) { onutGL.HistogramEXT(target, width, internalformat, sink); }
ONUT_FORCE_INLINE void  onutIglooInterfaceSGIX(GLenum pname, const void * params) { onutGL.IglooInterfaceSGIX(pname, params); }
ONUT_FORCE_INLINE void  onutImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param) { onutGL.ImageTransformParameterfHP(target, pname, param); }
ONUT_FORCE_INLINE void  onutImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat * params) { onutGL.ImageTransformParameterfvHP(target, pname, params); }
ONUT_FORCE_INLINE void  onutImageTransformParameteriHP(GLenum target, GLenum pname, GLint param) { onutGL.ImageTransformParameteriHP(target, pname, param); }
ONUT_FORCE_INLINE void  onutImageTransformParameterivHP(GLenum target, GLenum pname, const GLint * params) { onutGL.ImageTransformParameterivHP(target, pname, params); }
ONUT_FORCE_INLINE void  onutImportMemoryFdEXT(GLuint memory, GLuint64 size, GLenum handleType, GLint fd) { onutGL.ImportMemoryFdEXT(memory, size, handleType, fd); }
ONUT_FORCE_INLINE void  onutImportMemoryWin32HandleEXT(GLuint memory, GLuint64 size, GLenum handleType, void * handle) { onutGL.ImportMemoryWin32HandleEXT(memory, size, handleType, handle); }
ONUT_FORCE_INLINE void  onutImportMemoryWin32NameEXT(GLuint memory, GLuint64 size, GLenum handleType, const void * name) { onutGL.ImportMemoryWin32NameEXT(memory, size, handleType, name); }
ONUT_FORCE_INLINE void  onutImportSemaphoreFdEXT(GLuint semaphore, GLenum handleType, GLint fd) { onutGL.ImportSemaphoreFdEXT(semaphore, handleType, fd); }
ONUT_FORCE_INLINE void  onutImportSemaphoreWin32HandleEXT(GLuint semaphore, GLenum handleType, void * handle) { onutGL.ImportSemaphoreWin32HandleEXT(semaphore, handleType, handle); }
ONUT_FORCE_INLINE void  onutImportSemaphoreWin32NameEXT(GLuint semaphore, GLenum handleType, const void * name) { onutGL.ImportSemaphoreWin32NameEXT(semaphore, handleType, name); }
ONUT_FORCE_INLINE GLsync onutImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags) { return onutGL.ImportSyncEXT(external_sync_type, external_sync, flags); }
ONUT_FORCE_INLINE void  onutIndexFormatNV(GLenum type, GLsizei stride) { onutGL.IndexFormatNV(type, stride); }
ONUT_FORCE_INLINE void  onutIndexFuncEXT(GLenum func, GLclampf ref) { onutGL.IndexFuncEXT(func, ref); }
ONUT_FORCE_INLINE void  onutIndexMask(GLuint mask) { onutGL.IndexMask(mask); }
ONUT_FORCE_INLINE void  onutIndexMaterialEXT(GLenum face, GLenum mode) { onutGL.IndexMaterialEXT(face, mode); }
ONUT_FORCE_INLINE void  onutIndexPointer(GLenum type, GLsizei stride, const void * pointer) { onutGL.IndexPointer(type, stride, pointer); }
ONUT_FORCE_INLINE void  onutIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void * pointer) { onutGL.IndexPointerEXT(type, stride, count, pointer); }
ONUT_FORCE_INLINE void  onutIndexPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { onutGL.IndexPointerListIBM(type, stride, pointer, ptrstride); }
ONUT_FORCE_INLINE void  onutIndexd(GLdouble c) { onutGL.Indexd(c); }
ONUT_FORCE_INLINE void  onutIndexdv(const GLdouble * c) { onutGL.Indexdv(c); }
ONUT_FORCE_INLINE void  onutIndexf(GLfloat c) { onutGL.Indexf(c); }
ONUT_FORCE_INLINE void  onutIndexfv(const GLfloat * c) { onutGL.Indexfv(c); }
ONUT_FORCE_INLINE void  onutIndexi(GLint c) { onutGL.Indexi(c); }
ONUT_FORCE_INLINE void  onutIndexiv(const GLint * c) { onutGL.Indexiv(c); }
ONUT_FORCE_INLINE void  onutIndexs(GLshort c) { onutGL.Indexs(c); }
ONUT_FORCE_INLINE void  onutIndexsv(const GLshort * c) { onutGL.Indexsv(c); }
ONUT_FORCE_INLINE void  onutIndexub(GLubyte c) { onutGL.Indexub(c); }
ONUT_FORCE_INLINE void  onutIndexubv(const GLubyte * c) { onutGL.Indexubv(c); }
ONUT_FORCE_INLINE void  onutIndexxOES(GLfixed component) { onutGL.IndexxOES(component); }
ONUT_FORCE_INLINE void  onutIndexxvOES(const GLfixed * component) { onutGL.IndexxvOES(component); }
ONUT_FORCE_INLINE void  onutInitNames(void) { onutGL.InitNames(); }
ONUT_FORCE_INLINE void  onutInsertComponentEXT(GLuint res, GLuint src, GLuint num) { onutGL.InsertComponentEXT(res, src, num); }
ONUT_FORCE_INLINE void  onutInsertEventMarkerEXT(GLsizei length, const GLchar * marker) { onutGL.InsertEventMarkerEXT(length, marker); }
ONUT_FORCE_INLINE void  onutInstrumentsBufferSGIX(GLsizei size, GLint * buffer) { onutGL.InstrumentsBufferSGIX(size, buffer); }
ONUT_FORCE_INLINE void  onutInterleavedArrays(GLenum format, GLsizei stride, const void * pointer) { onutGL.InterleavedArrays(format, stride, pointer); }
ONUT_FORCE_INLINE void  onutInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) { onutGL.InterpolatePathsNV(resultPath, pathA, pathB, weight); }
ONUT_FORCE_INLINE void  onutInvalidateBufferData(GLuint buffer) { onutGL.InvalidateBufferData(buffer); }
ONUT_FORCE_INLINE void  onutInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length) { onutGL.InvalidateBufferSubData(buffer, offset, length); }
ONUT_FORCE_INLINE void  onutInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments) { onutGL.InvalidateFramebuffer(target, numAttachments, attachments); }
ONUT_FORCE_INLINE void  onutInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments) { onutGL.InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments); }
ONUT_FORCE_INLINE void  onutInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) { onutGL.InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height); }
ONUT_FORCE_INLINE void  onutInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) { onutGL.InvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height); }
ONUT_FORCE_INLINE void  onutInvalidateTexImage(GLuint texture, GLint level) { onutGL.InvalidateTexImage(texture, level); }
ONUT_FORCE_INLINE void  onutInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) { onutGL.InvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth); }
ONUT_FORCE_INLINE GLboolean onutIsAsyncMarkerSGIX(GLuint marker) { return onutGL.IsAsyncMarkerSGIX(marker); }
ONUT_FORCE_INLINE GLboolean onutIsBuffer(GLuint buffer) { return onutGL.IsBuffer(buffer); }
ONUT_FORCE_INLINE GLboolean onutIsBufferARB(GLuint buffer) { return onutGL.IsBufferARB(buffer); }
ONUT_FORCE_INLINE GLboolean onutIsBufferResidentNV(GLenum target) { return onutGL.IsBufferResidentNV(target); }
ONUT_FORCE_INLINE GLboolean onutIsCommandListNV(GLuint list) { return onutGL.IsCommandListNV(list); }
ONUT_FORCE_INLINE GLboolean onutIsEnabled(GLenum cap) { return onutGL.IsEnabled(cap); }
ONUT_FORCE_INLINE GLboolean onutIsEnabledIndexedEXT(GLenum target, GLuint index) { return onutGL.IsEnabledIndexedEXT(target, index); }
ONUT_FORCE_INLINE GLboolean onutIsEnabledi(GLenum target, GLuint index) { return onutGL.IsEnabledi(target, index); }
ONUT_FORCE_INLINE GLboolean onutIsEnablediEXT(GLenum target, GLuint index) { return onutGL.IsEnablediEXT(target, index); }
ONUT_FORCE_INLINE GLboolean onutIsEnablediNV(GLenum target, GLuint index) { return onutGL.IsEnablediNV(target, index); }
ONUT_FORCE_INLINE GLboolean onutIsEnablediOES(GLenum target, GLuint index) { return onutGL.IsEnablediOES(target, index); }
ONUT_FORCE_INLINE GLboolean onutIsFenceAPPLE(GLuint fence) { return onutGL.IsFenceAPPLE(fence); }
ONUT_FORCE_INLINE GLboolean onutIsFenceNV(GLuint fence) { return onutGL.IsFenceNV(fence); }
ONUT_FORCE_INLINE GLboolean onutIsFramebuffer(GLuint framebuffer) { return onutGL.IsFramebuffer(framebuffer); }
ONUT_FORCE_INLINE GLboolean onutIsFramebufferEXT(GLuint framebuffer) { return onutGL.IsFramebufferEXT(framebuffer); }
ONUT_FORCE_INLINE GLboolean onutIsFramebufferOES(GLuint framebuffer) { return onutGL.IsFramebufferOES(framebuffer); }
ONUT_FORCE_INLINE GLboolean onutIsImageHandleResidentARB(GLuint64 handle) { return onutGL.IsImageHandleResidentARB(handle); }
ONUT_FORCE_INLINE GLboolean onutIsImageHandleResidentNV(GLuint64 handle) { return onutGL.IsImageHandleResidentNV(handle); }
ONUT_FORCE_INLINE GLboolean onutIsList(GLuint list) { return onutGL.IsList(list); }
ONUT_FORCE_INLINE GLboolean onutIsMemoryObjectEXT(GLuint memoryObject) { return onutGL.IsMemoryObjectEXT(memoryObject); }
ONUT_FORCE_INLINE GLboolean onutIsNameAMD(GLenum identifier, GLuint name) { return onutGL.IsNameAMD(identifier, name); }
ONUT_FORCE_INLINE GLboolean onutIsNamedBufferResidentNV(GLuint buffer) { return onutGL.IsNamedBufferResidentNV(buffer); }
ONUT_FORCE_INLINE GLboolean onutIsNamedStringARB(GLint namelen, const GLchar * name) { return onutGL.IsNamedStringARB(namelen, name); }
ONUT_FORCE_INLINE GLboolean onutIsObjectBufferATI(GLuint buffer) { return onutGL.IsObjectBufferATI(buffer); }
ONUT_FORCE_INLINE GLboolean onutIsOcclusionQueryNV(GLuint id) { return onutGL.IsOcclusionQueryNV(id); }
ONUT_FORCE_INLINE GLboolean onutIsPathNV(GLuint path) { return onutGL.IsPathNV(path); }
ONUT_FORCE_INLINE GLboolean onutIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y) { return onutGL.IsPointInFillPathNV(path, mask, x, y); }
ONUT_FORCE_INLINE GLboolean onutIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y) { return onutGL.IsPointInStrokePathNV(path, x, y); }
ONUT_FORCE_INLINE GLboolean onutIsProgram(GLuint program) { return onutGL.IsProgram(program); }
ONUT_FORCE_INLINE GLboolean onutIsProgramARB(GLuint program) { return onutGL.IsProgramARB(program); }
ONUT_FORCE_INLINE GLboolean onutIsProgramNV(GLuint id) { return onutGL.IsProgramNV(id); }
ONUT_FORCE_INLINE GLboolean onutIsProgramPipeline(GLuint pipeline) { return onutGL.IsProgramPipeline(pipeline); }
ONUT_FORCE_INLINE GLboolean onutIsProgramPipelineEXT(GLuint pipeline) { return onutGL.IsProgramPipelineEXT(pipeline); }
ONUT_FORCE_INLINE GLboolean onutIsQuery(GLuint id) { return onutGL.IsQuery(id); }
ONUT_FORCE_INLINE GLboolean onutIsQueryARB(GLuint id) { return onutGL.IsQueryARB(id); }
ONUT_FORCE_INLINE GLboolean onutIsQueryEXT(GLuint id) { return onutGL.IsQueryEXT(id); }
ONUT_FORCE_INLINE GLboolean onutIsRenderbuffer(GLuint renderbuffer) { return onutGL.IsRenderbuffer(renderbuffer); }
ONUT_FORCE_INLINE GLboolean onutIsRenderbufferEXT(GLuint renderbuffer) { return onutGL.IsRenderbufferEXT(renderbuffer); }
ONUT_FORCE_INLINE GLboolean onutIsRenderbufferOES(GLuint renderbuffer) { return onutGL.IsRenderbufferOES(renderbuffer); }
ONUT_FORCE_INLINE GLboolean onutIsSampler(GLuint sampler) { return onutGL.IsSampler(sampler); }
ONUT_FORCE_INLINE GLboolean onutIsSemaphoreEXT(GLuint semaphore) { return onutGL.IsSemaphoreEXT(semaphore); }
ONUT_FORCE_INLINE GLboolean onutIsShader(GLuint shader) { return onutGL.IsShader(shader); }
ONUT_FORCE_INLINE GLboolean onutIsStateNV(GLuint state) { return onutGL.IsStateNV(state); }
ONUT_FORCE_INLINE GLboolean onutIsSync(GLsync sync) { return onutGL.IsSync(sync); }
ONUT_FORCE_INLINE GLboolean onutIsSyncAPPLE(GLsync sync) { return onutGL.IsSyncAPPLE(sync); }
ONUT_FORCE_INLINE GLboolean onutIsTexture(GLuint texture) { return onutGL.IsTexture(texture); }
ONUT_FORCE_INLINE GLboolean onutIsTextureEXT(GLuint texture) { return onutGL.IsTextureEXT(texture); }
ONUT_FORCE_INLINE GLboolean onutIsTextureHandleResidentARB(GLuint64 handle) { return onutGL.IsTextureHandleResidentARB(handle); }
ONUT_FORCE_INLINE GLboolean onutIsTextureHandleResidentNV(GLuint64 handle) { return onutGL.IsTextureHandleResidentNV(handle); }
ONUT_FORCE_INLINE GLboolean onutIsTransformFeedback(GLuint id) { return onutGL.IsTransformFeedback(id); }
ONUT_FORCE_INLINE GLboolean onutIsTransformFeedbackNV(GLuint id) { return onutGL.IsTransformFeedbackNV(id); }
ONUT_FORCE_INLINE GLboolean onutIsVariantEnabledEXT(GLuint id, GLenum cap) { return onutGL.IsVariantEnabledEXT(id, cap); }
ONUT_FORCE_INLINE GLboolean onutIsVertexArray(GLuint array) { return onutGL.IsVertexArray(array); }
ONUT_FORCE_INLINE GLboolean onutIsVertexArrayAPPLE(GLuint array) { return onutGL.IsVertexArrayAPPLE(array); }
ONUT_FORCE_INLINE GLboolean onutIsVertexArrayOES(GLuint array) { return onutGL.IsVertexArrayOES(array); }
ONUT_FORCE_INLINE GLboolean onutIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname) { return onutGL.IsVertexAttribEnabledAPPLE(index, pname); }
ONUT_FORCE_INLINE void  onutLGPUCopyImageSubDataNVX(GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) { onutGL.LGPUCopyImageSubDataNVX(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth); }
ONUT_FORCE_INLINE void  onutLGPUInterlockNVX(void) { onutGL.LGPUInterlockNVX(); }
ONUT_FORCE_INLINE void  onutLGPUNamedBufferSubDataNVX(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { onutGL.LGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data); }
ONUT_FORCE_INLINE void  onutLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar * label) { onutGL.LabelObjectEXT(type, object, length, label); }
ONUT_FORCE_INLINE void  onutLightEnviSGIX(GLenum pname, GLint param) { onutGL.LightEnviSGIX(pname, param); }
ONUT_FORCE_INLINE void  onutLightModelf(GLenum pname, GLfloat param) { onutGL.LightModelf(pname, param); }
ONUT_FORCE_INLINE void  onutLightModelfv(GLenum pname, const GLfloat * params) { onutGL.LightModelfv(pname, params); }
ONUT_FORCE_INLINE void  onutLightModeli(GLenum pname, GLint param) { onutGL.LightModeli(pname, param); }
ONUT_FORCE_INLINE void  onutLightModeliv(GLenum pname, const GLint * params) { onutGL.LightModeliv(pname, params); }
ONUT_FORCE_INLINE void  onutLightModelx(GLenum pname, GLfixed param) { onutGL.LightModelx(pname, param); }
ONUT_FORCE_INLINE void  onutLightModelxOES(GLenum pname, GLfixed param) { onutGL.LightModelxOES(pname, param); }
ONUT_FORCE_INLINE void  onutLightModelxv(GLenum pname, const GLfixed * param) { onutGL.LightModelxv(pname, param); }
ONUT_FORCE_INLINE void  onutLightModelxvOES(GLenum pname, const GLfixed * param) { onutGL.LightModelxvOES(pname, param); }
ONUT_FORCE_INLINE void  onutLightf(GLenum light, GLenum pname, GLfloat param) { onutGL.Lightf(light, pname, param); }
ONUT_FORCE_INLINE void  onutLightfv(GLenum light, GLenum pname, const GLfloat * params) { onutGL.Lightfv(light, pname, params); }
ONUT_FORCE_INLINE void  onutLighti(GLenum light, GLenum pname, GLint param) { onutGL.Lighti(light, pname, param); }
ONUT_FORCE_INLINE void  onutLightiv(GLenum light, GLenum pname, const GLint * params) { onutGL.Lightiv(light, pname, params); }
ONUT_FORCE_INLINE void  onutLightx(GLenum light, GLenum pname, GLfixed param) { onutGL.Lightx(light, pname, param); }
ONUT_FORCE_INLINE void  onutLightxOES(GLenum light, GLenum pname, GLfixed param) { onutGL.LightxOES(light, pname, param); }
ONUT_FORCE_INLINE void  onutLightxv(GLenum light, GLenum pname, const GLfixed * params) { onutGL.Lightxv(light, pname, params); }
ONUT_FORCE_INLINE void  onutLightxvOES(GLenum light, GLenum pname, const GLfixed * params) { onutGL.LightxvOES(light, pname, params); }
ONUT_FORCE_INLINE void  onutLineStipple(GLint factor, GLushort pattern) { onutGL.LineStipple(factor, pattern); }
ONUT_FORCE_INLINE void  onutLineWidth(GLfloat width) { onutGL.LineWidth(width); }
ONUT_FORCE_INLINE void  onutLineWidthx(GLfixed width) { onutGL.LineWidthx(width); }
ONUT_FORCE_INLINE void  onutLineWidthxOES(GLfixed width) { onutGL.LineWidthxOES(width); }
ONUT_FORCE_INLINE void  onutLinkProgram(GLuint program) { onutGL.LinkProgram(program); }
ONUT_FORCE_INLINE void  onutLinkProgramARB(GLhandleARB programObj) { onutGL.LinkProgramARB(programObj); }
ONUT_FORCE_INLINE void  onutListBase(GLuint base) { onutGL.ListBase(base); }
ONUT_FORCE_INLINE void  onutListDrawCommandsStatesClientNV(GLuint list, GLuint segment, const void ** indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) { onutGL.ListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos, count); }
ONUT_FORCE_INLINE void  onutListParameterfSGIX(GLuint list, GLenum pname, GLfloat param) { onutGL.ListParameterfSGIX(list, pname, param); }
ONUT_FORCE_INLINE void  onutListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat * params) { onutGL.ListParameterfvSGIX(list, pname, params); }
ONUT_FORCE_INLINE void  onutListParameteriSGIX(GLuint list, GLenum pname, GLint param) { onutGL.ListParameteriSGIX(list, pname, param); }
ONUT_FORCE_INLINE void  onutListParameterivSGIX(GLuint list, GLenum pname, const GLint * params) { onutGL.ListParameterivSGIX(list, pname, params); }
ONUT_FORCE_INLINE void  onutLoadIdentity(void) { onutGL.LoadIdentity(); }
ONUT_FORCE_INLINE void  onutLoadIdentityDeformationMapSGIX(GLbitfield mask) { onutGL.LoadIdentityDeformationMapSGIX(mask); }
ONUT_FORCE_INLINE void  onutLoadMatrixd(const GLdouble * m) { onutGL.LoadMatrixd(m); }
ONUT_FORCE_INLINE void  onutLoadMatrixf(const GLfloat * m) { onutGL.LoadMatrixf(m); }
ONUT_FORCE_INLINE void  onutLoadMatrixx(const GLfixed * m) { onutGL.LoadMatrixx(m); }
ONUT_FORCE_INLINE void  onutLoadMatrixxOES(const GLfixed * m) { onutGL.LoadMatrixxOES(m); }
ONUT_FORCE_INLINE void  onutLoadName(GLuint name) { onutGL.LoadName(name); }
ONUT_FORCE_INLINE void  onutLoadPaletteFromModelViewMatrixOES(void) { onutGL.LoadPaletteFromModelViewMatrixOES(); }
ONUT_FORCE_INLINE void  onutLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte * program) { onutGL.LoadProgramNV(target, id, len, program); }
ONUT_FORCE_INLINE void  onutLoadTransposeMatrixd(const GLdouble * m) { onutGL.LoadTransposeMatrixd(m); }
ONUT_FORCE_INLINE void  onutLoadTransposeMatrixdARB(const GLdouble * m) { onutGL.LoadTransposeMatrixdARB(m); }
ONUT_FORCE_INLINE void  onutLoadTransposeMatrixf(const GLfloat * m) { onutGL.LoadTransposeMatrixf(m); }
ONUT_FORCE_INLINE void  onutLoadTransposeMatrixfARB(const GLfloat * m) { onutGL.LoadTransposeMatrixfARB(m); }
ONUT_FORCE_INLINE void  onutLoadTransposeMatrixxOES(const GLfixed * m) { onutGL.LoadTransposeMatrixxOES(m); }
ONUT_FORCE_INLINE void  onutLockArraysEXT(GLint first, GLsizei count) { onutGL.LockArraysEXT(first, count); }
ONUT_FORCE_INLINE void  onutLogicOp(GLenum opcode) { onutGL.LogicOp(opcode); }
ONUT_FORCE_INLINE void  onutMakeBufferNonResidentNV(GLenum target) { onutGL.MakeBufferNonResidentNV(target); }
ONUT_FORCE_INLINE void  onutMakeBufferResidentNV(GLenum target, GLenum access) { onutGL.MakeBufferResidentNV(target, access); }
ONUT_FORCE_INLINE void  onutMakeImageHandleNonResidentARB(GLuint64 handle) { onutGL.MakeImageHandleNonResidentARB(handle); }
ONUT_FORCE_INLINE void  onutMakeImageHandleNonResidentNV(GLuint64 handle) { onutGL.MakeImageHandleNonResidentNV(handle); }
ONUT_FORCE_INLINE void  onutMakeImageHandleResidentARB(GLuint64 handle, GLenum access) { onutGL.MakeImageHandleResidentARB(handle, access); }
ONUT_FORCE_INLINE void  onutMakeImageHandleResidentNV(GLuint64 handle, GLenum access) { onutGL.MakeImageHandleResidentNV(handle, access); }
ONUT_FORCE_INLINE void  onutMakeNamedBufferNonResidentNV(GLuint buffer) { onutGL.MakeNamedBufferNonResidentNV(buffer); }
ONUT_FORCE_INLINE void  onutMakeNamedBufferResidentNV(GLuint buffer, GLenum access) { onutGL.MakeNamedBufferResidentNV(buffer, access); }
ONUT_FORCE_INLINE void  onutMakeTextureHandleNonResidentARB(GLuint64 handle) { onutGL.MakeTextureHandleNonResidentARB(handle); }
ONUT_FORCE_INLINE void  onutMakeTextureHandleNonResidentNV(GLuint64 handle) { onutGL.MakeTextureHandleNonResidentNV(handle); }
ONUT_FORCE_INLINE void  onutMakeTextureHandleResidentARB(GLuint64 handle) { onutGL.MakeTextureHandleResidentARB(handle); }
ONUT_FORCE_INLINE void  onutMakeTextureHandleResidentNV(GLuint64 handle) { onutGL.MakeTextureHandleResidentNV(handle); }
ONUT_FORCE_INLINE void  onutMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) { onutGL.Map1d(target, u1, u2, stride, order, points); }
ONUT_FORCE_INLINE void  onutMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) { onutGL.Map1f(target, u1, u2, stride, order, points); }
ONUT_FORCE_INLINE void  onutMap1xOES(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points) { onutGL.Map1xOES(target, u1, u2, stride, order, points); }
ONUT_FORCE_INLINE void  onutMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) { onutGL.Map2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
ONUT_FORCE_INLINE void  onutMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) { onutGL.Map2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
ONUT_FORCE_INLINE void  onutMap2xOES(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points) { onutGL.Map2xOES(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
ONUT_FORCE_INLINE void * onutMapBuffer(GLenum target, GLenum access) { return onutGL.MapBuffer(target, access); }
ONUT_FORCE_INLINE void * onutMapBufferARB(GLenum target, GLenum access) { return onutGL.MapBufferARB(target, access); }
ONUT_FORCE_INLINE void * onutMapBufferOES(GLenum target, GLenum access) { return onutGL.MapBufferOES(target, access); }
ONUT_FORCE_INLINE void * onutMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) { return onutGL.MapBufferRange(target, offset, length, access); }
ONUT_FORCE_INLINE void * onutMapBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) { return onutGL.MapBufferRangeEXT(target, offset, length, access); }
ONUT_FORCE_INLINE void  onutMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void * points) { onutGL.MapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points); }
ONUT_FORCE_INLINE void  onutMapGrid1d(GLint un, GLdouble u1, GLdouble u2) { onutGL.MapGrid1d(un, u1, u2); }
ONUT_FORCE_INLINE void  onutMapGrid1f(GLint un, GLfloat u1, GLfloat u2) { onutGL.MapGrid1f(un, u1, u2); }
ONUT_FORCE_INLINE void  onutMapGrid1xOES(GLint n, GLfixed u1, GLfixed u2) { onutGL.MapGrid1xOES(n, u1, u2); }
ONUT_FORCE_INLINE void  onutMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) { onutGL.MapGrid2d(un, u1, u2, vn, v1, v2); }
ONUT_FORCE_INLINE void  onutMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) { onutGL.MapGrid2f(un, u1, u2, vn, v1, v2); }
ONUT_FORCE_INLINE void  onutMapGrid2xOES(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2) { onutGL.MapGrid2xOES(n, u1, u2, v1, v2); }
ONUT_FORCE_INLINE void * onutMapNamedBuffer(GLuint buffer, GLenum access) { return onutGL.MapNamedBuffer(buffer, access); }
ONUT_FORCE_INLINE void * onutMapNamedBufferEXT(GLuint buffer, GLenum access) { return onutGL.MapNamedBufferEXT(buffer, access); }
ONUT_FORCE_INLINE void * onutMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) { return onutGL.MapNamedBufferRange(buffer, offset, length, access); }
ONUT_FORCE_INLINE void * onutMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) { return onutGL.MapNamedBufferRangeEXT(buffer, offset, length, access); }
ONUT_FORCE_INLINE void * onutMapObjectBufferATI(GLuint buffer) { return onutGL.MapObjectBufferATI(buffer); }
ONUT_FORCE_INLINE void  onutMapParameterfvNV(GLenum target, GLenum pname, const GLfloat * params) { onutGL.MapParameterfvNV(target, pname, params); }
ONUT_FORCE_INLINE void  onutMapParameterivNV(GLenum target, GLenum pname, const GLint * params) { onutGL.MapParameterivNV(target, pname, params); }
ONUT_FORCE_INLINE void * onutMapTexture2DINTEL(GLuint texture, GLint level, GLbitfield access, GLint * stride, GLenum * layout) { return onutGL.MapTexture2DINTEL(texture, level, access, stride, layout); }
ONUT_FORCE_INLINE void  onutMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) { onutGL.MapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points); }
ONUT_FORCE_INLINE void  onutMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) { onutGL.MapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points); }
ONUT_FORCE_INLINE void  onutMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) { onutGL.MapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
ONUT_FORCE_INLINE void  onutMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) { onutGL.MapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
ONUT_FORCE_INLINE void  onutMaterialf(GLenum face, GLenum pname, GLfloat param) { onutGL.Materialf(face, pname, param); }
ONUT_FORCE_INLINE void  onutMaterialfv(GLenum face, GLenum pname, const GLfloat * params) { onutGL.Materialfv(face, pname, params); }
ONUT_FORCE_INLINE void  onutMateriali(GLenum face, GLenum pname, GLint param) { onutGL.Materiali(face, pname, param); }
ONUT_FORCE_INLINE void  onutMaterialiv(GLenum face, GLenum pname, const GLint * params) { onutGL.Materialiv(face, pname, params); }
ONUT_FORCE_INLINE void  onutMaterialx(GLenum face, GLenum pname, GLfixed param) { onutGL.Materialx(face, pname, param); }
ONUT_FORCE_INLINE void  onutMaterialxOES(GLenum face, GLenum pname, GLfixed param) { onutGL.MaterialxOES(face, pname, param); }
ONUT_FORCE_INLINE void  onutMaterialxv(GLenum face, GLenum pname, const GLfixed * param) { onutGL.Materialxv(face, pname, param); }
ONUT_FORCE_INLINE void  onutMaterialxvOES(GLenum face, GLenum pname, const GLfixed * param) { onutGL.MaterialxvOES(face, pname, param); }
ONUT_FORCE_INLINE void  onutMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { onutGL.MatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar); }
ONUT_FORCE_INLINE void  onutMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const void * pointer) { onutGL.MatrixIndexPointerARB(size, type, stride, pointer); }
ONUT_FORCE_INLINE void  onutMatrixIndexPointerOES(GLint size, GLenum type, GLsizei stride, const void * pointer) { onutGL.MatrixIndexPointerOES(size, type, stride, pointer); }
ONUT_FORCE_INLINE void  onutMatrixIndexubvARB(GLint size, const GLubyte * indices) { onutGL.MatrixIndexubvARB(size, indices); }
ONUT_FORCE_INLINE void  onutMatrixIndexuivARB(GLint size, const GLuint * indices) { onutGL.MatrixIndexuivARB(size, indices); }
ONUT_FORCE_INLINE void  onutMatrixIndexusvARB(GLint size, const GLushort * indices) { onutGL.MatrixIndexusvARB(size, indices); }
ONUT_FORCE_INLINE void  onutMatrixLoad3x2fNV(GLenum matrixMode, const GLfloat * m) { onutGL.MatrixLoad3x2fNV(matrixMode, m); }
ONUT_FORCE_INLINE void  onutMatrixLoad3x3fNV(GLenum matrixMode, const GLfloat * m) { onutGL.MatrixLoad3x3fNV(matrixMode, m); }
ONUT_FORCE_INLINE void  onutMatrixLoadIdentityEXT(GLenum mode) { onutGL.MatrixLoadIdentityEXT(mode); }
ONUT_FORCE_INLINE void  onutMatrixLoadTranspose3x3fNV(GLenum matrixMode, const GLfloat * m) { onutGL.MatrixLoadTranspose3x3fNV(matrixMode, m); }
ONUT_FORCE_INLINE void  onutMatrixLoadTransposedEXT(GLenum mode, const GLdouble * m) { onutGL.MatrixLoadTransposedEXT(mode, m); }
ONUT_FORCE_INLINE void  onutMatrixLoadTransposefEXT(GLenum mode, const GLfloat * m) { onutGL.MatrixLoadTransposefEXT(mode, m); }
ONUT_FORCE_INLINE void  onutMatrixLoaddEXT(GLenum mode, const GLdouble * m) { onutGL.MatrixLoaddEXT(mode, m); }
ONUT_FORCE_INLINE void  onutMatrixLoadfEXT(GLenum mode, const GLfloat * m) { onutGL.MatrixLoadfEXT(mode, m); }
ONUT_FORCE_INLINE void  onutMatrixMode(GLenum mode) { onutGL.MatrixMode(mode); }
ONUT_FORCE_INLINE void  onutMatrixMult3x2fNV(GLenum matrixMode, const GLfloat * m) { onutGL.MatrixMult3x2fNV(matrixMode, m); }
ONUT_FORCE_INLINE void  onutMatrixMult3x3fNV(GLenum matrixMode, const GLfloat * m) { onutGL.MatrixMult3x3fNV(matrixMode, m); }
ONUT_FORCE_INLINE void  onutMatrixMultTranspose3x3fNV(GLenum matrixMode, const GLfloat * m) { onutGL.MatrixMultTranspose3x3fNV(matrixMode, m); }
ONUT_FORCE_INLINE void  onutMatrixMultTransposedEXT(GLenum mode, const GLdouble * m) { onutGL.MatrixMultTransposedEXT(mode, m); }
ONUT_FORCE_INLINE void  onutMatrixMultTransposefEXT(GLenum mode, const GLfloat * m) { onutGL.MatrixMultTransposefEXT(mode, m); }
ONUT_FORCE_INLINE void  onutMatrixMultdEXT(GLenum mode, const GLdouble * m) { onutGL.MatrixMultdEXT(mode, m); }
ONUT_FORCE_INLINE void  onutMatrixMultfEXT(GLenum mode, const GLfloat * m) { onutGL.MatrixMultfEXT(mode, m); }
ONUT_FORCE_INLINE void  onutMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { onutGL.MatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar); }
ONUT_FORCE_INLINE void  onutMatrixPopEXT(GLenum mode) { onutGL.MatrixPopEXT(mode); }
ONUT_FORCE_INLINE void  onutMatrixPushEXT(GLenum mode) { onutGL.MatrixPushEXT(mode); }
ONUT_FORCE_INLINE void  onutMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) { onutGL.MatrixRotatedEXT(mode, angle, x, y, z); }
ONUT_FORCE_INLINE void  onutMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) { onutGL.MatrixRotatefEXT(mode, angle, x, y, z); }
ONUT_FORCE_INLINE void  onutMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) { onutGL.MatrixScaledEXT(mode, x, y, z); }
ONUT_FORCE_INLINE void  onutMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) { onutGL.MatrixScalefEXT(mode, x, y, z); }
ONUT_FORCE_INLINE void  onutMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) { onutGL.MatrixTranslatedEXT(mode, x, y, z); }
ONUT_FORCE_INLINE void  onutMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) { onutGL.MatrixTranslatefEXT(mode, x, y, z); }
ONUT_FORCE_INLINE void  onutMaxShaderCompilerThreadsARB(GLuint count) { onutGL.MaxShaderCompilerThreadsARB(count); }
ONUT_FORCE_INLINE void  onutMemoryBarrier(GLbitfield barriers) { onutGL.MemoryBarrier(barriers); }
ONUT_FORCE_INLINE void  onutMemoryBarrierByRegion(GLbitfield barriers) { onutGL.MemoryBarrierByRegion(barriers); }
ONUT_FORCE_INLINE void  onutMemoryBarrierEXT(GLbitfield barriers) { onutGL.MemoryBarrierEXT(barriers); }
ONUT_FORCE_INLINE void  onutMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, const GLint * params) { onutGL.MemoryObjectParameterivEXT(memoryObject, pname, params); }
ONUT_FORCE_INLINE void  onutMinSampleShading(GLfloat value) { onutGL.MinSampleShading(value); }
ONUT_FORCE_INLINE void  onutMinSampleShadingARB(GLfloat value) { onutGL.MinSampleShadingARB(value); }
ONUT_FORCE_INLINE void  onutMinSampleShadingOES(GLfloat value) { onutGL.MinSampleShadingOES(value); }
ONUT_FORCE_INLINE void  onutMinmax(GLenum target, GLenum internalformat, GLboolean sink) { onutGL.Minmax(target, internalformat, sink); }
ONUT_FORCE_INLINE void  onutMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink) { onutGL.MinmaxEXT(target, internalformat, sink); }
ONUT_FORCE_INLINE void  onutMultMatrixd(const GLdouble * m) { onutGL.MultMatrixd(m); }
ONUT_FORCE_INLINE void  onutMultMatrixf(const GLfloat * m) { onutGL.MultMatrixf(m); }
ONUT_FORCE_INLINE void  onutMultMatrixx(const GLfixed * m) { onutGL.MultMatrixx(m); }
ONUT_FORCE_INLINE void  onutMultMatrixxOES(const GLfixed * m) { onutGL.MultMatrixxOES(m); }
ONUT_FORCE_INLINE void  onutMultTransposeMatrixd(const GLdouble * m) { onutGL.MultTransposeMatrixd(m); }
ONUT_FORCE_INLINE void  onutMultTransposeMatrixdARB(const GLdouble * m) { onutGL.MultTransposeMatrixdARB(m); }
ONUT_FORCE_INLINE void  onutMultTransposeMatrixf(const GLfloat * m) { onutGL.MultTransposeMatrixf(m); }
ONUT_FORCE_INLINE void  onutMultTransposeMatrixfARB(const GLfloat * m) { onutGL.MultTransposeMatrixfARB(m); }
ONUT_FORCE_INLINE void  onutMultTransposeMatrixxOES(const GLfixed * m) { onutGL.MultTransposeMatrixxOES(m); }
ONUT_FORCE_INLINE void  onutMultiDrawArrays(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount) { onutGL.MultiDrawArrays(mode, first, count, drawcount); }
ONUT_FORCE_INLINE void  onutMultiDrawArraysEXT(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount) { onutGL.MultiDrawArraysEXT(mode, first, count, primcount); }
ONUT_FORCE_INLINE void  onutMultiDrawArraysIndirect(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride) { onutGL.MultiDrawArraysIndirect(mode, indirect, drawcount, stride); }
ONUT_FORCE_INLINE void  onutMultiDrawArraysIndirectAMD(GLenum mode, const void * indirect, GLsizei primcount, GLsizei stride) { onutGL.MultiDrawArraysIndirectAMD(mode, indirect, primcount, stride); }
ONUT_FORCE_INLINE void  onutMultiDrawArraysIndirectBindlessCountNV(GLenum mode, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) { onutGL.MultiDrawArraysIndirectBindlessCountNV(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount); }
ONUT_FORCE_INLINE void  onutMultiDrawArraysIndirectBindlessNV(GLenum mode, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) { onutGL.MultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount); }
ONUT_FORCE_INLINE void  onutMultiDrawArraysIndirectCountARB(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { onutGL.MultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride); }
ONUT_FORCE_INLINE void  onutMultiDrawArraysIndirectEXT(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride) { onutGL.MultiDrawArraysIndirectEXT(mode, indirect, drawcount, stride); }
ONUT_FORCE_INLINE void  onutMultiDrawElementArrayAPPLE(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount) { onutGL.MultiDrawElementArrayAPPLE(mode, first, count, primcount); }
ONUT_FORCE_INLINE void  onutMultiDrawElements(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount) { onutGL.MultiDrawElements(mode, count, type, indices, drawcount); }
ONUT_FORCE_INLINE void  onutMultiDrawElementsBaseVertex(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex) { onutGL.MultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex); }
ONUT_FORCE_INLINE void  onutMultiDrawElementsBaseVertexEXT(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, const GLint * basevertex) { onutGL.MultiDrawElementsBaseVertexEXT(mode, count, type, indices, primcount, basevertex); }
ONUT_FORCE_INLINE void  onutMultiDrawElementsBaseVertexOES(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, const GLint * basevertex) { onutGL.MultiDrawElementsBaseVertexOES(mode, count, type, indices, primcount, basevertex); }
ONUT_FORCE_INLINE void  onutMultiDrawElementsEXT(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount) { onutGL.MultiDrawElementsEXT(mode, count, type, indices, primcount); }
ONUT_FORCE_INLINE void  onutMultiDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride) { onutGL.MultiDrawElementsIndirect(mode, type, indirect, drawcount, stride); }
ONUT_FORCE_INLINE void  onutMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const void * indirect, GLsizei primcount, GLsizei stride) { onutGL.MultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride); }
ONUT_FORCE_INLINE void  onutMultiDrawElementsIndirectBindlessCountNV(GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) { onutGL.MultiDrawElementsIndirectBindlessCountNV(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount); }
ONUT_FORCE_INLINE void  onutMultiDrawElementsIndirectBindlessNV(GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) { onutGL.MultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount); }
ONUT_FORCE_INLINE void  onutMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { onutGL.MultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride); }
ONUT_FORCE_INLINE void  onutMultiDrawElementsIndirectEXT(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride) { onutGL.MultiDrawElementsIndirectEXT(mode, type, indirect, drawcount, stride); }
ONUT_FORCE_INLINE void  onutMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint * first, const GLsizei * count, GLsizei primcount) { onutGL.MultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount); }
ONUT_FORCE_INLINE void  onutMultiModeDrawArraysIBM(const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei primcount, GLint modestride) { onutGL.MultiModeDrawArraysIBM(mode, first, count, primcount, modestride); }
ONUT_FORCE_INLINE void  onutMultiModeDrawElementsIBM(const GLenum * mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, GLint modestride) { onutGL.MultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride); }
ONUT_FORCE_INLINE void  onutMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) { onutGL.MultiTexBufferEXT(texunit, target, internalformat, buffer); }
ONUT_FORCE_INLINE void  onutMultiTexCoord1bOES(GLenum texture, GLbyte s) { onutGL.MultiTexCoord1bOES(texture, s); }
ONUT_FORCE_INLINE void  onutMultiTexCoord1bvOES(GLenum texture, const GLbyte * coords) { onutGL.MultiTexCoord1bvOES(texture, coords); }
ONUT_FORCE_INLINE void  onutMultiTexCoord1d(GLenum target, GLdouble s) { onutGL.MultiTexCoord1d(target, s); }
ONUT_FORCE_INLINE void  onutMultiTexCoord1dARB(GLenum target, GLdouble s) { onutGL.MultiTexCoord1dARB(target, s); }
ONUT_FORCE_INLINE void  onutMultiTexCoord1dv(GLenum target, const GLdouble * v) { onutGL.MultiTexCoord1dv(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord1dvARB(GLenum target, const GLdouble * v) { onutGL.MultiTexCoord1dvARB(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord1f(GLenum target, GLfloat s) { onutGL.MultiTexCoord1f(target, s); }
ONUT_FORCE_INLINE void  onutMultiTexCoord1fARB(GLenum target, GLfloat s) { onutGL.MultiTexCoord1fARB(target, s); }
ONUT_FORCE_INLINE void  onutMultiTexCoord1fv(GLenum target, const GLfloat * v) { onutGL.MultiTexCoord1fv(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord1fvARB(GLenum target, const GLfloat * v) { onutGL.MultiTexCoord1fvARB(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord1hNV(GLenum target, GLhalfNV s) { onutGL.MultiTexCoord1hNV(target, s); }
ONUT_FORCE_INLINE void  onutMultiTexCoord1hvNV(GLenum target, const GLhalfNV * v) { onutGL.MultiTexCoord1hvNV(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord1i(GLenum target, GLint s) { onutGL.MultiTexCoord1i(target, s); }
ONUT_FORCE_INLINE void  onutMultiTexCoord1iARB(GLenum target, GLint s) { onutGL.MultiTexCoord1iARB(target, s); }
ONUT_FORCE_INLINE void  onutMultiTexCoord1iv(GLenum target, const GLint * v) { onutGL.MultiTexCoord1iv(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord1ivARB(GLenum target, const GLint * v) { onutGL.MultiTexCoord1ivARB(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord1s(GLenum target, GLshort s) { onutGL.MultiTexCoord1s(target, s); }
ONUT_FORCE_INLINE void  onutMultiTexCoord1sARB(GLenum target, GLshort s) { onutGL.MultiTexCoord1sARB(target, s); }
ONUT_FORCE_INLINE void  onutMultiTexCoord1sv(GLenum target, const GLshort * v) { onutGL.MultiTexCoord1sv(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord1svARB(GLenum target, const GLshort * v) { onutGL.MultiTexCoord1svARB(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord1xOES(GLenum texture, GLfixed s) { onutGL.MultiTexCoord1xOES(texture, s); }
ONUT_FORCE_INLINE void  onutMultiTexCoord1xvOES(GLenum texture, const GLfixed * coords) { onutGL.MultiTexCoord1xvOES(texture, coords); }
ONUT_FORCE_INLINE void  onutMultiTexCoord2bOES(GLenum texture, GLbyte s, GLbyte t) { onutGL.MultiTexCoord2bOES(texture, s, t); }
ONUT_FORCE_INLINE void  onutMultiTexCoord2bvOES(GLenum texture, const GLbyte * coords) { onutGL.MultiTexCoord2bvOES(texture, coords); }
ONUT_FORCE_INLINE void  onutMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t) { onutGL.MultiTexCoord2d(target, s, t); }
ONUT_FORCE_INLINE void  onutMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t) { onutGL.MultiTexCoord2dARB(target, s, t); }
ONUT_FORCE_INLINE void  onutMultiTexCoord2dv(GLenum target, const GLdouble * v) { onutGL.MultiTexCoord2dv(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord2dvARB(GLenum target, const GLdouble * v) { onutGL.MultiTexCoord2dvARB(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t) { onutGL.MultiTexCoord2f(target, s, t); }
ONUT_FORCE_INLINE void  onutMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t) { onutGL.MultiTexCoord2fARB(target, s, t); }
ONUT_FORCE_INLINE void  onutMultiTexCoord2fv(GLenum target, const GLfloat * v) { onutGL.MultiTexCoord2fv(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord2fvARB(GLenum target, const GLfloat * v) { onutGL.MultiTexCoord2fvARB(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t) { onutGL.MultiTexCoord2hNV(target, s, t); }
ONUT_FORCE_INLINE void  onutMultiTexCoord2hvNV(GLenum target, const GLhalfNV * v) { onutGL.MultiTexCoord2hvNV(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord2i(GLenum target, GLint s, GLint t) { onutGL.MultiTexCoord2i(target, s, t); }
ONUT_FORCE_INLINE void  onutMultiTexCoord2iARB(GLenum target, GLint s, GLint t) { onutGL.MultiTexCoord2iARB(target, s, t); }
ONUT_FORCE_INLINE void  onutMultiTexCoord2iv(GLenum target, const GLint * v) { onutGL.MultiTexCoord2iv(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord2ivARB(GLenum target, const GLint * v) { onutGL.MultiTexCoord2ivARB(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord2s(GLenum target, GLshort s, GLshort t) { onutGL.MultiTexCoord2s(target, s, t); }
ONUT_FORCE_INLINE void  onutMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t) { onutGL.MultiTexCoord2sARB(target, s, t); }
ONUT_FORCE_INLINE void  onutMultiTexCoord2sv(GLenum target, const GLshort * v) { onutGL.MultiTexCoord2sv(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord2svARB(GLenum target, const GLshort * v) { onutGL.MultiTexCoord2svARB(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord2xOES(GLenum texture, GLfixed s, GLfixed t) { onutGL.MultiTexCoord2xOES(texture, s, t); }
ONUT_FORCE_INLINE void  onutMultiTexCoord2xvOES(GLenum texture, const GLfixed * coords) { onutGL.MultiTexCoord2xvOES(texture, coords); }
ONUT_FORCE_INLINE void  onutMultiTexCoord3bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r) { onutGL.MultiTexCoord3bOES(texture, s, t, r); }
ONUT_FORCE_INLINE void  onutMultiTexCoord3bvOES(GLenum texture, const GLbyte * coords) { onutGL.MultiTexCoord3bvOES(texture, coords); }
ONUT_FORCE_INLINE void  onutMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r) { onutGL.MultiTexCoord3d(target, s, t, r); }
ONUT_FORCE_INLINE void  onutMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r) { onutGL.MultiTexCoord3dARB(target, s, t, r); }
ONUT_FORCE_INLINE void  onutMultiTexCoord3dv(GLenum target, const GLdouble * v) { onutGL.MultiTexCoord3dv(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord3dvARB(GLenum target, const GLdouble * v) { onutGL.MultiTexCoord3dvARB(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r) { onutGL.MultiTexCoord3f(target, s, t, r); }
ONUT_FORCE_INLINE void  onutMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r) { onutGL.MultiTexCoord3fARB(target, s, t, r); }
ONUT_FORCE_INLINE void  onutMultiTexCoord3fv(GLenum target, const GLfloat * v) { onutGL.MultiTexCoord3fv(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord3fvARB(GLenum target, const GLfloat * v) { onutGL.MultiTexCoord3fvARB(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r) { onutGL.MultiTexCoord3hNV(target, s, t, r); }
ONUT_FORCE_INLINE void  onutMultiTexCoord3hvNV(GLenum target, const GLhalfNV * v) { onutGL.MultiTexCoord3hvNV(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r) { onutGL.MultiTexCoord3i(target, s, t, r); }
ONUT_FORCE_INLINE void  onutMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r) { onutGL.MultiTexCoord3iARB(target, s, t, r); }
ONUT_FORCE_INLINE void  onutMultiTexCoord3iv(GLenum target, const GLint * v) { onutGL.MultiTexCoord3iv(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord3ivARB(GLenum target, const GLint * v) { onutGL.MultiTexCoord3ivARB(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r) { onutGL.MultiTexCoord3s(target, s, t, r); }
ONUT_FORCE_INLINE void  onutMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r) { onutGL.MultiTexCoord3sARB(target, s, t, r); }
ONUT_FORCE_INLINE void  onutMultiTexCoord3sv(GLenum target, const GLshort * v) { onutGL.MultiTexCoord3sv(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord3svARB(GLenum target, const GLshort * v) { onutGL.MultiTexCoord3svARB(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord3xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r) { onutGL.MultiTexCoord3xOES(texture, s, t, r); }
ONUT_FORCE_INLINE void  onutMultiTexCoord3xvOES(GLenum texture, const GLfixed * coords) { onutGL.MultiTexCoord3xvOES(texture, coords); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q) { onutGL.MultiTexCoord4bOES(texture, s, t, r, q); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4bvOES(GLenum texture, const GLbyte * coords) { onutGL.MultiTexCoord4bvOES(texture, coords); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) { onutGL.MultiTexCoord4d(target, s, t, r, q); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) { onutGL.MultiTexCoord4dARB(target, s, t, r, q); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4dv(GLenum target, const GLdouble * v) { onutGL.MultiTexCoord4dv(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4dvARB(GLenum target, const GLdouble * v) { onutGL.MultiTexCoord4dvARB(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) { onutGL.MultiTexCoord4f(target, s, t, r, q); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) { onutGL.MultiTexCoord4fARB(target, s, t, r, q); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4fv(GLenum target, const GLfloat * v) { onutGL.MultiTexCoord4fv(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4fvARB(GLenum target, const GLfloat * v) { onutGL.MultiTexCoord4fvARB(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) { onutGL.MultiTexCoord4hNV(target, s, t, r, q); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4hvNV(GLenum target, const GLhalfNV * v) { onutGL.MultiTexCoord4hvNV(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q) { onutGL.MultiTexCoord4i(target, s, t, r, q); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q) { onutGL.MultiTexCoord4iARB(target, s, t, r, q); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4iv(GLenum target, const GLint * v) { onutGL.MultiTexCoord4iv(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4ivARB(GLenum target, const GLint * v) { onutGL.MultiTexCoord4ivARB(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) { onutGL.MultiTexCoord4s(target, s, t, r, q); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) { onutGL.MultiTexCoord4sARB(target, s, t, r, q); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4sv(GLenum target, const GLshort * v) { onutGL.MultiTexCoord4sv(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4svARB(GLenum target, const GLshort * v) { onutGL.MultiTexCoord4svARB(target, v); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4x(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) { onutGL.MultiTexCoord4x(texture, s, t, r, q); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) { onutGL.MultiTexCoord4xOES(texture, s, t, r, q); }
ONUT_FORCE_INLINE void  onutMultiTexCoord4xvOES(GLenum texture, const GLfixed * coords) { onutGL.MultiTexCoord4xvOES(texture, coords); }
ONUT_FORCE_INLINE void  onutMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords) { onutGL.MultiTexCoordP1ui(texture, type, coords); }
ONUT_FORCE_INLINE void  onutMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint * coords) { onutGL.MultiTexCoordP1uiv(texture, type, coords); }
ONUT_FORCE_INLINE void  onutMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords) { onutGL.MultiTexCoordP2ui(texture, type, coords); }
ONUT_FORCE_INLINE void  onutMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint * coords) { onutGL.MultiTexCoordP2uiv(texture, type, coords); }
ONUT_FORCE_INLINE void  onutMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords) { onutGL.MultiTexCoordP3ui(texture, type, coords); }
ONUT_FORCE_INLINE void  onutMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint * coords) { onutGL.MultiTexCoordP3uiv(texture, type, coords); }
ONUT_FORCE_INLINE void  onutMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords) { onutGL.MultiTexCoordP4ui(texture, type, coords); }
ONUT_FORCE_INLINE void  onutMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint * coords) { onutGL.MultiTexCoordP4uiv(texture, type, coords); }
ONUT_FORCE_INLINE void  onutMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void * pointer) { onutGL.MultiTexCoordPointerEXT(texunit, size, type, stride, pointer); }
ONUT_FORCE_INLINE void  onutMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) { onutGL.MultiTexEnvfEXT(texunit, target, pname, param); }
ONUT_FORCE_INLINE void  onutMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params) { onutGL.MultiTexEnvfvEXT(texunit, target, pname, params); }
ONUT_FORCE_INLINE void  onutMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) { onutGL.MultiTexEnviEXT(texunit, target, pname, param); }
ONUT_FORCE_INLINE void  onutMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) { onutGL.MultiTexEnvivEXT(texunit, target, pname, params); }
ONUT_FORCE_INLINE void  onutMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param) { onutGL.MultiTexGendEXT(texunit, coord, pname, param); }
ONUT_FORCE_INLINE void  onutMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble * params) { onutGL.MultiTexGendvEXT(texunit, coord, pname, params); }
ONUT_FORCE_INLINE void  onutMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param) { onutGL.MultiTexGenfEXT(texunit, coord, pname, param); }
ONUT_FORCE_INLINE void  onutMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat * params) { onutGL.MultiTexGenfvEXT(texunit, coord, pname, params); }
ONUT_FORCE_INLINE void  onutMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param) { onutGL.MultiTexGeniEXT(texunit, coord, pname, param); }
ONUT_FORCE_INLINE void  onutMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint * params) { onutGL.MultiTexGenivEXT(texunit, coord, pname, params); }
ONUT_FORCE_INLINE void  onutMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) { onutGL.MultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels); }
ONUT_FORCE_INLINE void  onutMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) { onutGL.MultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels); }
ONUT_FORCE_INLINE void  onutMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { onutGL.MultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels); }
ONUT_FORCE_INLINE void  onutMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) { onutGL.MultiTexParameterIivEXT(texunit, target, pname, params); }
ONUT_FORCE_INLINE void  onutMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint * params) { onutGL.MultiTexParameterIuivEXT(texunit, target, pname, params); }
ONUT_FORCE_INLINE void  onutMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) { onutGL.MultiTexParameterfEXT(texunit, target, pname, param); }
ONUT_FORCE_INLINE void  onutMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params) { onutGL.MultiTexParameterfvEXT(texunit, target, pname, params); }
ONUT_FORCE_INLINE void  onutMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) { onutGL.MultiTexParameteriEXT(texunit, target, pname, param); }
ONUT_FORCE_INLINE void  onutMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) { onutGL.MultiTexParameterivEXT(texunit, target, pname, params); }
ONUT_FORCE_INLINE void  onutMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer) { onutGL.MultiTexRenderbufferEXT(texunit, target, renderbuffer); }
ONUT_FORCE_INLINE void  onutMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { onutGL.MultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels); }
ONUT_FORCE_INLINE void  onutMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { onutGL.MultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels); }
ONUT_FORCE_INLINE void  onutMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { onutGL.MultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
ONUT_FORCE_INLINE void  onutMulticastBarrierNV(void) { onutGL.MulticastBarrierNV(); }
ONUT_FORCE_INLINE void  onutMulticastBlitFramebufferNV(GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { onutGL.MulticastBlitFramebufferNV(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
ONUT_FORCE_INLINE void  onutMulticastBufferSubDataNV(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid * data) { onutGL.MulticastBufferSubDataNV(gpuMask, buffer, offset, size, data); }
ONUT_FORCE_INLINE void  onutMulticastCopyBufferSubDataNV(GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { onutGL.MulticastCopyBufferSubDataNV(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size); }
ONUT_FORCE_INLINE void  onutMulticastCopyImageSubDataNV(GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { onutGL.MulticastCopyImageSubDataNV(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
ONUT_FORCE_INLINE void  onutMulticastFramebufferSampleLocationsfvNV(GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) { onutGL.MulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v); }
ONUT_FORCE_INLINE void  onutMulticastGetQueryObjecti64vNV(GLuint gpu, GLuint id, GLenum pname, GLint64 * params) { onutGL.MulticastGetQueryObjecti64vNV(gpu, id, pname, params); }
ONUT_FORCE_INLINE void  onutMulticastGetQueryObjectivNV(GLuint gpu, GLuint id, GLenum pname, GLint * params) { onutGL.MulticastGetQueryObjectivNV(gpu, id, pname, params); }
ONUT_FORCE_INLINE void  onutMulticastGetQueryObjectui64vNV(GLuint gpu, GLuint id, GLenum pname, GLuint64 * params) { onutGL.MulticastGetQueryObjectui64vNV(gpu, id, pname, params); }
ONUT_FORCE_INLINE void  onutMulticastGetQueryObjectuivNV(GLuint gpu, GLuint id, GLenum pname, GLuint * params) { onutGL.MulticastGetQueryObjectuivNV(gpu, id, pname, params); }
ONUT_FORCE_INLINE void  onutMulticastWaitSyncNV(GLuint signalGpu, GLbitfield waitGpuMask) { onutGL.MulticastWaitSyncNV(signalGpu, waitGpuMask); }
ONUT_FORCE_INLINE void  onutNamedBufferData(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage) { onutGL.NamedBufferData(buffer, size, data, usage); }
ONUT_FORCE_INLINE void  onutNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage) { onutGL.NamedBufferDataEXT(buffer, size, data, usage); }
ONUT_FORCE_INLINE void  onutNamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) { onutGL.NamedBufferPageCommitmentARB(buffer, offset, size, commit); }
ONUT_FORCE_INLINE void  onutNamedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) { onutGL.NamedBufferPageCommitmentEXT(buffer, offset, size, commit); }
ONUT_FORCE_INLINE void  onutNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags) { onutGL.NamedBufferStorage(buffer, size, data, flags); }
ONUT_FORCE_INLINE void  onutNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags) { onutGL.NamedBufferStorageEXT(buffer, size, data, flags); }
ONUT_FORCE_INLINE void  onutNamedBufferStorageExternalEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) { onutGL.NamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer, flags); }
ONUT_FORCE_INLINE void  onutNamedBufferStorageMemEXT(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset) { onutGL.NamedBufferStorageMemEXT(buffer, size, memory, offset); }
ONUT_FORCE_INLINE void  onutNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { onutGL.NamedBufferSubData(buffer, offset, size, data); }
ONUT_FORCE_INLINE void  onutNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { onutGL.NamedBufferSubDataEXT(buffer, offset, size, data); }
ONUT_FORCE_INLINE void  onutNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { onutGL.NamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size); }
ONUT_FORCE_INLINE void  onutNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf) { onutGL.NamedFramebufferDrawBuffer(framebuffer, buf); }
ONUT_FORCE_INLINE void  onutNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum * bufs) { onutGL.NamedFramebufferDrawBuffers(framebuffer, n, bufs); }
ONUT_FORCE_INLINE void  onutNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param) { onutGL.NamedFramebufferParameteri(framebuffer, pname, param); }
ONUT_FORCE_INLINE void  onutNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param) { onutGL.NamedFramebufferParameteriEXT(framebuffer, pname, param); }
ONUT_FORCE_INLINE void  onutNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src) { onutGL.NamedFramebufferReadBuffer(framebuffer, src); }
ONUT_FORCE_INLINE void  onutNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { onutGL.NamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer); }
ONUT_FORCE_INLINE void  onutNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { onutGL.NamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer); }
ONUT_FORCE_INLINE void  onutNamedFramebufferSampleLocationsfvARB(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) { onutGL.NamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v); }
ONUT_FORCE_INLINE void  onutNamedFramebufferSampleLocationsfvNV(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) { onutGL.NamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v); }
ONUT_FORCE_INLINE void  onutNamedFramebufferSamplePositionsfvAMD(GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat * values) { onutGL.NamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values); }
ONUT_FORCE_INLINE void  onutNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) { onutGL.NamedFramebufferTexture(framebuffer, attachment, texture, level); }
ONUT_FORCE_INLINE void  onutNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { onutGL.NamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level); }
ONUT_FORCE_INLINE void  onutNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { onutGL.NamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level); }
ONUT_FORCE_INLINE void  onutNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { onutGL.NamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset); }
ONUT_FORCE_INLINE void  onutNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) { onutGL.NamedFramebufferTextureEXT(framebuffer, attachment, texture, level); }
ONUT_FORCE_INLINE void  onutNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) { onutGL.NamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face); }
ONUT_FORCE_INLINE void  onutNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) { onutGL.NamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer); }
ONUT_FORCE_INLINE void  onutNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) { onutGL.NamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer); }
ONUT_FORCE_INLINE void  onutNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { onutGL.NamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble * params) { onutGL.NamedProgramLocalParameter4dvEXT(program, target, index, params); }
ONUT_FORCE_INLINE void  onutNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { onutGL.NamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat * params) { onutGL.NamedProgramLocalParameter4fvEXT(program, target, index, params); }
ONUT_FORCE_INLINE void  onutNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { onutGL.NamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint * params) { onutGL.NamedProgramLocalParameterI4ivEXT(program, target, index, params); }
ONUT_FORCE_INLINE void  onutNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { onutGL.NamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint * params) { onutGL.NamedProgramLocalParameterI4uivEXT(program, target, index, params); }
ONUT_FORCE_INLINE void  onutNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat * params) { onutGL.NamedProgramLocalParameters4fvEXT(program, target, index, count, params); }
ONUT_FORCE_INLINE void  onutNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint * params) { onutGL.NamedProgramLocalParametersI4ivEXT(program, target, index, count, params); }
ONUT_FORCE_INLINE void  onutNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint * params) { onutGL.NamedProgramLocalParametersI4uivEXT(program, target, index, count, params); }
ONUT_FORCE_INLINE void  onutNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const void * string) { onutGL.NamedProgramStringEXT(program, target, format, len, string); }
ONUT_FORCE_INLINE void  onutNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) { onutGL.NamedRenderbufferStorage(renderbuffer, internalformat, width, height); }
ONUT_FORCE_INLINE void  onutNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) { onutGL.NamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height); }
ONUT_FORCE_INLINE void  onutNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { onutGL.NamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height); }
ONUT_FORCE_INLINE void  onutNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) { onutGL.NamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height); }
ONUT_FORCE_INLINE void  onutNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { onutGL.NamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height); }
ONUT_FORCE_INLINE void  onutNamedStringARB(GLenum type, GLint namelen, const GLchar * name, GLint stringlen, const GLchar * string) { onutGL.NamedStringARB(type, namelen, name, stringlen, string); }
ONUT_FORCE_INLINE GLuint onutNewBufferRegion(GLenum region) { return onutGL.NewBufferRegion(region); }
ONUT_FORCE_INLINE void  onutNewList(GLuint list, GLenum mode) { onutGL.NewList(list, mode); }
ONUT_FORCE_INLINE GLuint onutNewObjectBufferATI(GLsizei size, const void * pointer, GLenum usage) { return onutGL.NewObjectBufferATI(size, pointer, usage); }
ONUT_FORCE_INLINE void  onutNormal3b(GLbyte nx, GLbyte ny, GLbyte nz) { onutGL.Normal3b(nx, ny, nz); }
ONUT_FORCE_INLINE void  onutNormal3bv(const GLbyte * v) { onutGL.Normal3bv(v); }
ONUT_FORCE_INLINE void  onutNormal3d(GLdouble nx, GLdouble ny, GLdouble nz) { onutGL.Normal3d(nx, ny, nz); }
ONUT_FORCE_INLINE void  onutNormal3dv(const GLdouble * v) { onutGL.Normal3dv(v); }
ONUT_FORCE_INLINE void  onutNormal3f(GLfloat nx, GLfloat ny, GLfloat nz) { onutGL.Normal3f(nx, ny, nz); }
ONUT_FORCE_INLINE void  onutNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { onutGL.Normal3fVertex3fSUN(nx, ny, nz, x, y, z); }
ONUT_FORCE_INLINE void  onutNormal3fVertex3fvSUN(const GLfloat * n, const GLfloat * v) { onutGL.Normal3fVertex3fvSUN(n, v); }
ONUT_FORCE_INLINE void  onutNormal3fv(const GLfloat * v) { onutGL.Normal3fv(v); }
ONUT_FORCE_INLINE void  onutNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz) { onutGL.Normal3hNV(nx, ny, nz); }
ONUT_FORCE_INLINE void  onutNormal3hvNV(const GLhalfNV * v) { onutGL.Normal3hvNV(v); }
ONUT_FORCE_INLINE void  onutNormal3i(GLint nx, GLint ny, GLint nz) { onutGL.Normal3i(nx, ny, nz); }
ONUT_FORCE_INLINE void  onutNormal3iv(const GLint * v) { onutGL.Normal3iv(v); }
ONUT_FORCE_INLINE void  onutNormal3s(GLshort nx, GLshort ny, GLshort nz) { onutGL.Normal3s(nx, ny, nz); }
ONUT_FORCE_INLINE void  onutNormal3sv(const GLshort * v) { onutGL.Normal3sv(v); }
ONUT_FORCE_INLINE void  onutNormal3x(GLfixed nx, GLfixed ny, GLfixed nz) { onutGL.Normal3x(nx, ny, nz); }
ONUT_FORCE_INLINE void  onutNormal3xOES(GLfixed nx, GLfixed ny, GLfixed nz) { onutGL.Normal3xOES(nx, ny, nz); }
ONUT_FORCE_INLINE void  onutNormal3xvOES(const GLfixed * coords) { onutGL.Normal3xvOES(coords); }
ONUT_FORCE_INLINE void  onutNormalFormatNV(GLenum type, GLsizei stride) { onutGL.NormalFormatNV(type, stride); }
ONUT_FORCE_INLINE void  onutNormalP3ui(GLenum type, GLuint coords) { onutGL.NormalP3ui(type, coords); }
ONUT_FORCE_INLINE void  onutNormalP3uiv(GLenum type, const GLuint * coords) { onutGL.NormalP3uiv(type, coords); }
ONUT_FORCE_INLINE void  onutNormalPointer(GLenum type, GLsizei stride, const void * pointer) { onutGL.NormalPointer(type, stride, pointer); }
ONUT_FORCE_INLINE void  onutNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void * pointer) { onutGL.NormalPointerEXT(type, stride, count, pointer); }
ONUT_FORCE_INLINE void  onutNormalPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { onutGL.NormalPointerListIBM(type, stride, pointer, ptrstride); }
ONUT_FORCE_INLINE void  onutNormalPointervINTEL(GLenum type, const void ** pointer) { onutGL.NormalPointervINTEL(type, pointer); }
ONUT_FORCE_INLINE void  onutNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz) { onutGL.NormalStream3bATI(stream, nx, ny, nz); }
ONUT_FORCE_INLINE void  onutNormalStream3bvATI(GLenum stream, const GLbyte * coords) { onutGL.NormalStream3bvATI(stream, coords); }
ONUT_FORCE_INLINE void  onutNormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz) { onutGL.NormalStream3dATI(stream, nx, ny, nz); }
ONUT_FORCE_INLINE void  onutNormalStream3dvATI(GLenum stream, const GLdouble * coords) { onutGL.NormalStream3dvATI(stream, coords); }
ONUT_FORCE_INLINE void  onutNormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz) { onutGL.NormalStream3fATI(stream, nx, ny, nz); }
ONUT_FORCE_INLINE void  onutNormalStream3fvATI(GLenum stream, const GLfloat * coords) { onutGL.NormalStream3fvATI(stream, coords); }
ONUT_FORCE_INLINE void  onutNormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz) { onutGL.NormalStream3iATI(stream, nx, ny, nz); }
ONUT_FORCE_INLINE void  onutNormalStream3ivATI(GLenum stream, const GLint * coords) { onutGL.NormalStream3ivATI(stream, coords); }
ONUT_FORCE_INLINE void  onutNormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz) { onutGL.NormalStream3sATI(stream, nx, ny, nz); }
ONUT_FORCE_INLINE void  onutNormalStream3svATI(GLenum stream, const GLshort * coords) { onutGL.NormalStream3svATI(stream, coords); }
ONUT_FORCE_INLINE void  onutObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar * label) { onutGL.ObjectLabel(identifier, name, length, label); }
ONUT_FORCE_INLINE void  onutObjectLabelKHR(GLenum identifier, GLuint name, GLsizei length, const GLchar * label) { onutGL.ObjectLabelKHR(identifier, name, length, label); }
ONUT_FORCE_INLINE void  onutObjectPtrLabel(const void * ptr, GLsizei length, const GLchar * label) { onutGL.ObjectPtrLabel(ptr, length, label); }
ONUT_FORCE_INLINE void  onutObjectPtrLabelKHR(const void * ptr, GLsizei length, const GLchar * label) { onutGL.ObjectPtrLabelKHR(ptr, length, label); }
ONUT_FORCE_INLINE GLenum onutObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option) { return onutGL.ObjectPurgeableAPPLE(objectType, name, option); }
ONUT_FORCE_INLINE GLenum onutObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option) { return onutGL.ObjectUnpurgeableAPPLE(objectType, name, option); }
ONUT_FORCE_INLINE void  onutOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { onutGL.Ortho(left, right, bottom, top, zNear, zFar); }
ONUT_FORCE_INLINE void  onutOrthof(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { onutGL.Orthof(l, r, b, t, n, f); }
ONUT_FORCE_INLINE void  onutOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { onutGL.OrthofOES(l, r, b, t, n, f); }
ONUT_FORCE_INLINE void  onutOrthox(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { onutGL.Orthox(l, r, b, t, n, f); }
ONUT_FORCE_INLINE void  onutOrthoxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { onutGL.OrthoxOES(l, r, b, t, n, f); }
ONUT_FORCE_INLINE void  onutPNTrianglesfATI(GLenum pname, GLfloat param) { onutGL.PNTrianglesfATI(pname, param); }
ONUT_FORCE_INLINE void  onutPNTrianglesiATI(GLenum pname, GLint param) { onutGL.PNTrianglesiATI(pname, param); }
ONUT_FORCE_INLINE void  onutPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle) { onutGL.PassTexCoordATI(dst, coord, swizzle); }
ONUT_FORCE_INLINE void  onutPassThrough(GLfloat token) { onutGL.PassThrough(token); }
ONUT_FORCE_INLINE void  onutPassThroughxOES(GLfixed token) { onutGL.PassThroughxOES(token); }
ONUT_FORCE_INLINE void  onutPatchParameterfv(GLenum pname, const GLfloat * values) { onutGL.PatchParameterfv(pname, values); }
ONUT_FORCE_INLINE void  onutPatchParameteri(GLenum pname, GLint value) { onutGL.PatchParameteri(pname, value); }
ONUT_FORCE_INLINE void  onutPatchParameteriEXT(GLenum pname, GLint value) { onutGL.PatchParameteriEXT(pname, value); }
ONUT_FORCE_INLINE void  onutPatchParameteriOES(GLenum pname, GLint value) { onutGL.PatchParameteriOES(pname, value); }
ONUT_FORCE_INLINE void  onutPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat * coeffs) { onutGL.PathColorGenNV(color, genMode, colorFormat, coeffs); }
ONUT_FORCE_INLINE void  onutPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords) { onutGL.PathCommandsNV(path, numCommands, commands, numCoords, coordType, coords); }
ONUT_FORCE_INLINE void  onutPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void * coords) { onutGL.PathCoordsNV(path, numCoords, coordType, coords); }
ONUT_FORCE_INLINE void  onutPathCoverDepthFuncNV(GLenum func) { onutGL.PathCoverDepthFuncNV(func); }
ONUT_FORCE_INLINE void  onutPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat * dashArray) { onutGL.PathDashArrayNV(path, dashCount, dashArray); }
ONUT_FORCE_INLINE void  onutPathFogGenNV(GLenum genMode) { onutGL.PathFogGenNV(genMode); }
ONUT_FORCE_INLINE GLenum onutPathGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { return onutGL.PathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale); }
ONUT_FORCE_INLINE GLenum onutPathGlyphIndexRangeNV(GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]) { return onutGL.PathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount); }
ONUT_FORCE_INLINE void  onutPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { onutGL.PathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale); }
ONUT_FORCE_INLINE void  onutPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void * charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { onutGL.PathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale); }
ONUT_FORCE_INLINE GLenum onutPathMemoryGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void * fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { return onutGL.PathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale); }
ONUT_FORCE_INLINE void  onutPathParameterfNV(GLuint path, GLenum pname, GLfloat value) { onutGL.PathParameterfNV(path, pname, value); }
ONUT_FORCE_INLINE void  onutPathParameterfvNV(GLuint path, GLenum pname, const GLfloat * value) { onutGL.PathParameterfvNV(path, pname, value); }
ONUT_FORCE_INLINE void  onutPathParameteriNV(GLuint path, GLenum pname, GLint value) { onutGL.PathParameteriNV(path, pname, value); }
ONUT_FORCE_INLINE void  onutPathParameterivNV(GLuint path, GLenum pname, const GLint * value) { onutGL.PathParameterivNV(path, pname, value); }
ONUT_FORCE_INLINE void  onutPathStencilDepthOffsetNV(GLfloat factor, GLfloat units) { onutGL.PathStencilDepthOffsetNV(factor, units); }
ONUT_FORCE_INLINE void  onutPathStencilFuncNV(GLenum func, GLint ref, GLuint mask) { onutGL.PathStencilFuncNV(func, ref, mask); }
ONUT_FORCE_INLINE void  onutPathStringNV(GLuint path, GLenum format, GLsizei length, const void * pathString) { onutGL.PathStringNV(path, format, length, pathString); }
ONUT_FORCE_INLINE void  onutPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords) { onutGL.PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords); }
ONUT_FORCE_INLINE void  onutPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void * coords) { onutGL.PathSubCoordsNV(path, coordStart, numCoords, coordType, coords); }
ONUT_FORCE_INLINE void  onutPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat * coeffs) { onutGL.PathTexGenNV(texCoordSet, genMode, components, coeffs); }
ONUT_FORCE_INLINE void  onutPauseTransformFeedback(void) { onutGL.PauseTransformFeedback(); }
ONUT_FORCE_INLINE void  onutPauseTransformFeedbackNV(void) { onutGL.PauseTransformFeedbackNV(); }
ONUT_FORCE_INLINE void  onutPixelDataRangeNV(GLenum target, GLsizei length, const void * pointer) { onutGL.PixelDataRangeNV(target, length, pointer); }
ONUT_FORCE_INLINE void  onutPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat * values) { onutGL.PixelMapfv(map, mapsize, values); }
ONUT_FORCE_INLINE void  onutPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint * values) { onutGL.PixelMapuiv(map, mapsize, values); }
ONUT_FORCE_INLINE void  onutPixelMapusv(GLenum map, GLsizei mapsize, const GLushort * values) { onutGL.PixelMapusv(map, mapsize, values); }
ONUT_FORCE_INLINE void  onutPixelMapx(GLenum map, GLint size, const GLfixed * values) { onutGL.PixelMapx(map, size, values); }
ONUT_FORCE_INLINE void  onutPixelStoref(GLenum pname, GLfloat param) { onutGL.PixelStoref(pname, param); }
ONUT_FORCE_INLINE void  onutPixelStorei(GLenum pname, GLint param) { onutGL.PixelStorei(pname, param); }
ONUT_FORCE_INLINE void  onutPixelStorex(GLenum pname, GLfixed param) { onutGL.PixelStorex(pname, param); }
ONUT_FORCE_INLINE void  onutPixelTexGenParameterfSGIS(GLenum pname, GLfloat param) { onutGL.PixelTexGenParameterfSGIS(pname, param); }
ONUT_FORCE_INLINE void  onutPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat * params) { onutGL.PixelTexGenParameterfvSGIS(pname, params); }
ONUT_FORCE_INLINE void  onutPixelTexGenParameteriSGIS(GLenum pname, GLint param) { onutGL.PixelTexGenParameteriSGIS(pname, param); }
ONUT_FORCE_INLINE void  onutPixelTexGenParameterivSGIS(GLenum pname, const GLint * params) { onutGL.PixelTexGenParameterivSGIS(pname, params); }
ONUT_FORCE_INLINE void  onutPixelTexGenSGIX(GLenum mode) { onutGL.PixelTexGenSGIX(mode); }
ONUT_FORCE_INLINE void  onutPixelTransferf(GLenum pname, GLfloat param) { onutGL.PixelTransferf(pname, param); }
ONUT_FORCE_INLINE void  onutPixelTransferi(GLenum pname, GLint param) { onutGL.PixelTransferi(pname, param); }
ONUT_FORCE_INLINE void  onutPixelTransferxOES(GLenum pname, GLfixed param) { onutGL.PixelTransferxOES(pname, param); }
ONUT_FORCE_INLINE void  onutPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param) { onutGL.PixelTransformParameterfEXT(target, pname, param); }
ONUT_FORCE_INLINE void  onutPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat * params) { onutGL.PixelTransformParameterfvEXT(target, pname, params); }
ONUT_FORCE_INLINE void  onutPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param) { onutGL.PixelTransformParameteriEXT(target, pname, param); }
ONUT_FORCE_INLINE void  onutPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint * params) { onutGL.PixelTransformParameterivEXT(target, pname, params); }
ONUT_FORCE_INLINE void  onutPixelZoom(GLfloat xfactor, GLfloat yfactor) { onutGL.PixelZoom(xfactor, yfactor); }
ONUT_FORCE_INLINE void  onutPixelZoomxOES(GLfixed xfactor, GLfixed yfactor) { onutGL.PixelZoomxOES(xfactor, yfactor); }
ONUT_FORCE_INLINE GLboolean onutPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY) { return onutGL.PointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY); }
ONUT_FORCE_INLINE void  onutPointParameterf(GLenum pname, GLfloat param) { onutGL.PointParameterf(pname, param); }
ONUT_FORCE_INLINE void  onutPointParameterfARB(GLenum pname, GLfloat param) { onutGL.PointParameterfARB(pname, param); }
ONUT_FORCE_INLINE void  onutPointParameterfEXT(GLenum pname, GLfloat param) { onutGL.PointParameterfEXT(pname, param); }
ONUT_FORCE_INLINE void  onutPointParameterfSGIS(GLenum pname, GLfloat param) { onutGL.PointParameterfSGIS(pname, param); }
ONUT_FORCE_INLINE void  onutPointParameterfv(GLenum pname, const GLfloat * params) { onutGL.PointParameterfv(pname, params); }
ONUT_FORCE_INLINE void  onutPointParameterfvARB(GLenum pname, const GLfloat * params) { onutGL.PointParameterfvARB(pname, params); }
ONUT_FORCE_INLINE void  onutPointParameterfvEXT(GLenum pname, const GLfloat * params) { onutGL.PointParameterfvEXT(pname, params); }
ONUT_FORCE_INLINE void  onutPointParameterfvSGIS(GLenum pname, const GLfloat * params) { onutGL.PointParameterfvSGIS(pname, params); }
ONUT_FORCE_INLINE void  onutPointParameteri(GLenum pname, GLint param) { onutGL.PointParameteri(pname, param); }
ONUT_FORCE_INLINE void  onutPointParameteriNV(GLenum pname, GLint param) { onutGL.PointParameteriNV(pname, param); }
ONUT_FORCE_INLINE void  onutPointParameteriv(GLenum pname, const GLint * params) { onutGL.PointParameteriv(pname, params); }
ONUT_FORCE_INLINE void  onutPointParameterivNV(GLenum pname, const GLint * params) { onutGL.PointParameterivNV(pname, params); }
ONUT_FORCE_INLINE void  onutPointParameterx(GLenum pname, GLfixed param) { onutGL.PointParameterx(pname, param); }
ONUT_FORCE_INLINE void  onutPointParameterxOES(GLenum pname, GLfixed param) { onutGL.PointParameterxOES(pname, param); }
ONUT_FORCE_INLINE void  onutPointParameterxv(GLenum pname, const GLfixed * params) { onutGL.PointParameterxv(pname, params); }
ONUT_FORCE_INLINE void  onutPointParameterxvOES(GLenum pname, const GLfixed * params) { onutGL.PointParameterxvOES(pname, params); }
ONUT_FORCE_INLINE void  onutPointSize(GLfloat size) { onutGL.PointSize(size); }
ONUT_FORCE_INLINE void  onutPointSizePointerOES(GLenum type, GLsizei stride, const void * pointer) { onutGL.PointSizePointerOES(type, stride, pointer); }
ONUT_FORCE_INLINE void  onutPointSizex(GLfixed size) { onutGL.PointSizex(size); }
ONUT_FORCE_INLINE void  onutPointSizexOES(GLfixed size) { onutGL.PointSizexOES(size); }
ONUT_FORCE_INLINE GLint onutPollAsyncSGIX(GLuint * markerp) { return onutGL.PollAsyncSGIX(markerp); }
ONUT_FORCE_INLINE GLint onutPollInstrumentsSGIX(GLint * marker_p) { return onutGL.PollInstrumentsSGIX(marker_p); }
ONUT_FORCE_INLINE void  onutPolygonMode(GLenum face, GLenum mode) { onutGL.PolygonMode(face, mode); }
ONUT_FORCE_INLINE void  onutPolygonModeNV(GLenum face, GLenum mode) { onutGL.PolygonModeNV(face, mode); }
ONUT_FORCE_INLINE void  onutPolygonOffset(GLfloat factor, GLfloat units) { onutGL.PolygonOffset(factor, units); }
ONUT_FORCE_INLINE void  onutPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp) { onutGL.PolygonOffsetClampEXT(factor, units, clamp); }
ONUT_FORCE_INLINE void  onutPolygonOffsetEXT(GLfloat factor, GLfloat bias) { onutGL.PolygonOffsetEXT(factor, bias); }
ONUT_FORCE_INLINE void  onutPolygonOffsetx(GLfixed factor, GLfixed units) { onutGL.PolygonOffsetx(factor, units); }
ONUT_FORCE_INLINE void  onutPolygonOffsetxOES(GLfixed factor, GLfixed units) { onutGL.PolygonOffsetxOES(factor, units); }
ONUT_FORCE_INLINE void  onutPolygonStipple(const GLubyte * mask) { onutGL.PolygonStipple(mask); }
ONUT_FORCE_INLINE void  onutPopAttrib(void) { onutGL.PopAttrib(); }
ONUT_FORCE_INLINE void  onutPopClientAttrib(void) { onutGL.PopClientAttrib(); }
ONUT_FORCE_INLINE void  onutPopDebugGroup(void) { onutGL.PopDebugGroup(); }
ONUT_FORCE_INLINE void  onutPopDebugGroupKHR(void) { onutGL.PopDebugGroupKHR(); }
ONUT_FORCE_INLINE void  onutPopGroupMarkerEXT(void) { onutGL.PopGroupMarkerEXT(); }
ONUT_FORCE_INLINE void  onutPopMatrix(void) { onutGL.PopMatrix(); }
ONUT_FORCE_INLINE void  onutPopName(void) { onutGL.PopName(); }
ONUT_FORCE_INLINE void  onutPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3) { onutGL.PresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3); }
ONUT_FORCE_INLINE void  onutPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1) { onutGL.PresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1); }
ONUT_FORCE_INLINE void  onutPrimitiveBoundingBox(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { onutGL.PrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
ONUT_FORCE_INLINE void  onutPrimitiveBoundingBoxARB(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { onutGL.PrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
ONUT_FORCE_INLINE void  onutPrimitiveBoundingBoxEXT(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { onutGL.PrimitiveBoundingBoxEXT(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
ONUT_FORCE_INLINE void  onutPrimitiveBoundingBoxOES(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { onutGL.PrimitiveBoundingBoxOES(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
ONUT_FORCE_INLINE void  onutPrimitiveRestartIndex(GLuint index) { onutGL.PrimitiveRestartIndex(index); }
ONUT_FORCE_INLINE void  onutPrimitiveRestartIndexNV(GLuint index) { onutGL.PrimitiveRestartIndexNV(index); }
ONUT_FORCE_INLINE void  onutPrimitiveRestartNV(void) { onutGL.PrimitiveRestartNV(); }
ONUT_FORCE_INLINE void  onutPrioritizeTextures(GLsizei n, const GLuint * textures, const GLfloat * priorities) { onutGL.PrioritizeTextures(n, textures, priorities); }
ONUT_FORCE_INLINE void  onutPrioritizeTexturesEXT(GLsizei n, const GLuint * textures, const GLclampf * priorities) { onutGL.PrioritizeTexturesEXT(n, textures, priorities); }
ONUT_FORCE_INLINE void  onutPrioritizeTexturesxOES(GLsizei n, const GLuint * textures, const GLfixed * priorities) { onutGL.PrioritizeTexturesxOES(n, textures, priorities); }
ONUT_FORCE_INLINE void  onutProgramBinary(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length) { onutGL.ProgramBinary(program, binaryFormat, binary, length); }
ONUT_FORCE_INLINE void  onutProgramBinaryOES(GLuint program, GLenum binaryFormat, const void * binary, GLint length) { onutGL.ProgramBinaryOES(program, binaryFormat, binary, length); }
ONUT_FORCE_INLINE void  onutProgramBufferParametersIivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint * params) { onutGL.ProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, params); }
ONUT_FORCE_INLINE void  onutProgramBufferParametersIuivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint * params) { onutGL.ProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, params); }
ONUT_FORCE_INLINE void  onutProgramBufferParametersfvNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat * params) { onutGL.ProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, params); }
ONUT_FORCE_INLINE void  onutProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { onutGL.ProgramEnvParameter4dARB(target, index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble * params) { onutGL.ProgramEnvParameter4dvARB(target, index, params); }
ONUT_FORCE_INLINE void  onutProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { onutGL.ProgramEnvParameter4fARB(target, index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat * params) { onutGL.ProgramEnvParameter4fvARB(target, index, params); }
ONUT_FORCE_INLINE void  onutProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { onutGL.ProgramEnvParameterI4iNV(target, index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint * params) { onutGL.ProgramEnvParameterI4ivNV(target, index, params); }
ONUT_FORCE_INLINE void  onutProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { onutGL.ProgramEnvParameterI4uiNV(target, index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint * params) { onutGL.ProgramEnvParameterI4uivNV(target, index, params); }
ONUT_FORCE_INLINE void  onutProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat * params) { onutGL.ProgramEnvParameters4fvEXT(target, index, count, params); }
ONUT_FORCE_INLINE void  onutProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint * params) { onutGL.ProgramEnvParametersI4ivNV(target, index, count, params); }
ONUT_FORCE_INLINE void  onutProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint * params) { onutGL.ProgramEnvParametersI4uivNV(target, index, count, params); }
ONUT_FORCE_INLINE void  onutProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { onutGL.ProgramLocalParameter4dARB(target, index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble * params) { onutGL.ProgramLocalParameter4dvARB(target, index, params); }
ONUT_FORCE_INLINE void  onutProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { onutGL.ProgramLocalParameter4fARB(target, index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat * params) { onutGL.ProgramLocalParameter4fvARB(target, index, params); }
ONUT_FORCE_INLINE void  onutProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { onutGL.ProgramLocalParameterI4iNV(target, index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint * params) { onutGL.ProgramLocalParameterI4ivNV(target, index, params); }
ONUT_FORCE_INLINE void  onutProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { onutGL.ProgramLocalParameterI4uiNV(target, index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint * params) { onutGL.ProgramLocalParameterI4uivNV(target, index, params); }
ONUT_FORCE_INLINE void  onutProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat * params) { onutGL.ProgramLocalParameters4fvEXT(target, index, count, params); }
ONUT_FORCE_INLINE void  onutProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint * params) { onutGL.ProgramLocalParametersI4ivNV(target, index, count, params); }
ONUT_FORCE_INLINE void  onutProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint * params) { onutGL.ProgramLocalParametersI4uivNV(target, index, count, params); }
ONUT_FORCE_INLINE void  onutProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { onutGL.ProgramNamedParameter4dNV(id, len, name, x, y, z, w); }
ONUT_FORCE_INLINE void  onutProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v) { onutGL.ProgramNamedParameter4dvNV(id, len, name, v); }
ONUT_FORCE_INLINE void  onutProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { onutGL.ProgramNamedParameter4fNV(id, len, name, x, y, z, w); }
ONUT_FORCE_INLINE void  onutProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v) { onutGL.ProgramNamedParameter4fvNV(id, len, name, v); }
ONUT_FORCE_INLINE void  onutProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { onutGL.ProgramParameter4dNV(target, index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble * v) { onutGL.ProgramParameter4dvNV(target, index, v); }
ONUT_FORCE_INLINE void  onutProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { onutGL.ProgramParameter4fNV(target, index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat * v) { onutGL.ProgramParameter4fvNV(target, index, v); }
ONUT_FORCE_INLINE void  onutProgramParameteri(GLuint program, GLenum pname, GLint value) { onutGL.ProgramParameteri(program, pname, value); }
ONUT_FORCE_INLINE void  onutProgramParameteriARB(GLuint program, GLenum pname, GLint value) { onutGL.ProgramParameteriARB(program, pname, value); }
ONUT_FORCE_INLINE void  onutProgramParameteriEXT(GLuint program, GLenum pname, GLint value) { onutGL.ProgramParameteriEXT(program, pname, value); }
ONUT_FORCE_INLINE void  onutProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble * v) { onutGL.ProgramParameters4dvNV(target, index, count, v); }
ONUT_FORCE_INLINE void  onutProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat * v) { onutGL.ProgramParameters4fvNV(target, index, count, v); }
ONUT_FORCE_INLINE void  onutProgramPathFragmentInputGenNV(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat * coeffs) { onutGL.ProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs); }
ONUT_FORCE_INLINE void  onutProgramStringARB(GLenum target, GLenum format, GLsizei len, const void * string) { onutGL.ProgramStringARB(target, format, len, string); }
ONUT_FORCE_INLINE void  onutProgramSubroutineParametersuivNV(GLenum target, GLsizei count, const GLuint * params) { onutGL.ProgramSubroutineParametersuivNV(target, count, params); }
ONUT_FORCE_INLINE void  onutProgramUniform1d(GLuint program, GLint location, GLdouble v0) { onutGL.ProgramUniform1d(program, location, v0); }
ONUT_FORCE_INLINE void  onutProgramUniform1dEXT(GLuint program, GLint location, GLdouble x) { onutGL.ProgramUniform1dEXT(program, location, x); }
ONUT_FORCE_INLINE void  onutProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { onutGL.ProgramUniform1dv(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) { onutGL.ProgramUniform1dvEXT(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform1f(GLuint program, GLint location, GLfloat v0) { onutGL.ProgramUniform1f(program, location, v0); }
ONUT_FORCE_INLINE void  onutProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0) { onutGL.ProgramUniform1fEXT(program, location, v0); }
ONUT_FORCE_INLINE void  onutProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { onutGL.ProgramUniform1fv(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) { onutGL.ProgramUniform1fvEXT(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform1i(GLuint program, GLint location, GLint v0) { onutGL.ProgramUniform1i(program, location, v0); }
ONUT_FORCE_INLINE void  onutProgramUniform1i64ARB(GLuint program, GLint location, GLint64 x) { onutGL.ProgramUniform1i64ARB(program, location, x); }
ONUT_FORCE_INLINE void  onutProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x) { onutGL.ProgramUniform1i64NV(program, location, x); }
ONUT_FORCE_INLINE void  onutProgramUniform1i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) { onutGL.ProgramUniform1i64vARB(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { onutGL.ProgramUniform1i64vNV(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform1iEXT(GLuint program, GLint location, GLint v0) { onutGL.ProgramUniform1iEXT(program, location, v0); }
ONUT_FORCE_INLINE void  onutProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint * value) { onutGL.ProgramUniform1iv(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) { onutGL.ProgramUniform1ivEXT(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform1ui(GLuint program, GLint location, GLuint v0) { onutGL.ProgramUniform1ui(program, location, v0); }
ONUT_FORCE_INLINE void  onutProgramUniform1ui64ARB(GLuint program, GLint location, GLuint64 x) { onutGL.ProgramUniform1ui64ARB(program, location, x); }
ONUT_FORCE_INLINE void  onutProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x) { onutGL.ProgramUniform1ui64NV(program, location, x); }
ONUT_FORCE_INLINE void  onutProgramUniform1ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) { onutGL.ProgramUniform1ui64vARB(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { onutGL.ProgramUniform1ui64vNV(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0) { onutGL.ProgramUniform1uiEXT(program, location, v0); }
ONUT_FORCE_INLINE void  onutProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { onutGL.ProgramUniform1uiv(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) { onutGL.ProgramUniform1uivEXT(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1) { onutGL.ProgramUniform2d(program, location, v0, v1); }
ONUT_FORCE_INLINE void  onutProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y) { onutGL.ProgramUniform2dEXT(program, location, x, y); }
ONUT_FORCE_INLINE void  onutProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { onutGL.ProgramUniform2dv(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) { onutGL.ProgramUniform2dvEXT(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1) { onutGL.ProgramUniform2f(program, location, v0, v1); }
ONUT_FORCE_INLINE void  onutProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1) { onutGL.ProgramUniform2fEXT(program, location, v0, v1); }
ONUT_FORCE_INLINE void  onutProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { onutGL.ProgramUniform2fv(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) { onutGL.ProgramUniform2fvEXT(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1) { onutGL.ProgramUniform2i(program, location, v0, v1); }
ONUT_FORCE_INLINE void  onutProgramUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y) { onutGL.ProgramUniform2i64ARB(program, location, x, y); }
ONUT_FORCE_INLINE void  onutProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y) { onutGL.ProgramUniform2i64NV(program, location, x, y); }
ONUT_FORCE_INLINE void  onutProgramUniform2i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) { onutGL.ProgramUniform2i64vARB(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { onutGL.ProgramUniform2i64vNV(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1) { onutGL.ProgramUniform2iEXT(program, location, v0, v1); }
ONUT_FORCE_INLINE void  onutProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint * value) { onutGL.ProgramUniform2iv(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) { onutGL.ProgramUniform2ivEXT(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1) { onutGL.ProgramUniform2ui(program, location, v0, v1); }
ONUT_FORCE_INLINE void  onutProgramUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y) { onutGL.ProgramUniform2ui64ARB(program, location, x, y); }
ONUT_FORCE_INLINE void  onutProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y) { onutGL.ProgramUniform2ui64NV(program, location, x, y); }
ONUT_FORCE_INLINE void  onutProgramUniform2ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) { onutGL.ProgramUniform2ui64vARB(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { onutGL.ProgramUniform2ui64vNV(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1) { onutGL.ProgramUniform2uiEXT(program, location, v0, v1); }
ONUT_FORCE_INLINE void  onutProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { onutGL.ProgramUniform2uiv(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) { onutGL.ProgramUniform2uivEXT(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) { onutGL.ProgramUniform3d(program, location, v0, v1, v2); }
ONUT_FORCE_INLINE void  onutProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z) { onutGL.ProgramUniform3dEXT(program, location, x, y, z); }
ONUT_FORCE_INLINE void  onutProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { onutGL.ProgramUniform3dv(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) { onutGL.ProgramUniform3dvEXT(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { onutGL.ProgramUniform3f(program, location, v0, v1, v2); }
ONUT_FORCE_INLINE void  onutProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { onutGL.ProgramUniform3fEXT(program, location, v0, v1, v2); }
ONUT_FORCE_INLINE void  onutProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { onutGL.ProgramUniform3fv(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) { onutGL.ProgramUniform3fvEXT(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) { onutGL.ProgramUniform3i(program, location, v0, v1, v2); }
ONUT_FORCE_INLINE void  onutProgramUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z) { onutGL.ProgramUniform3i64ARB(program, location, x, y, z); }
ONUT_FORCE_INLINE void  onutProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) { onutGL.ProgramUniform3i64NV(program, location, x, y, z); }
ONUT_FORCE_INLINE void  onutProgramUniform3i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) { onutGL.ProgramUniform3i64vARB(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { onutGL.ProgramUniform3i64vNV(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) { onutGL.ProgramUniform3iEXT(program, location, v0, v1, v2); }
ONUT_FORCE_INLINE void  onutProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint * value) { onutGL.ProgramUniform3iv(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) { onutGL.ProgramUniform3ivEXT(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) { onutGL.ProgramUniform3ui(program, location, v0, v1, v2); }
ONUT_FORCE_INLINE void  onutProgramUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z) { onutGL.ProgramUniform3ui64ARB(program, location, x, y, z); }
ONUT_FORCE_INLINE void  onutProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { onutGL.ProgramUniform3ui64NV(program, location, x, y, z); }
ONUT_FORCE_INLINE void  onutProgramUniform3ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) { onutGL.ProgramUniform3ui64vARB(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { onutGL.ProgramUniform3ui64vNV(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) { onutGL.ProgramUniform3uiEXT(program, location, v0, v1, v2); }
ONUT_FORCE_INLINE void  onutProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { onutGL.ProgramUniform3uiv(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) { onutGL.ProgramUniform3uivEXT(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) { onutGL.ProgramUniform4d(program, location, v0, v1, v2, v3); }
ONUT_FORCE_INLINE void  onutProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { onutGL.ProgramUniform4dEXT(program, location, x, y, z, w); }
ONUT_FORCE_INLINE void  onutProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { onutGL.ProgramUniform4dv(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) { onutGL.ProgramUniform4dvEXT(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { onutGL.ProgramUniform4f(program, location, v0, v1, v2, v3); }
ONUT_FORCE_INLINE void  onutProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { onutGL.ProgramUniform4fEXT(program, location, v0, v1, v2, v3); }
ONUT_FORCE_INLINE void  onutProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { onutGL.ProgramUniform4fv(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) { onutGL.ProgramUniform4fvEXT(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { onutGL.ProgramUniform4i(program, location, v0, v1, v2, v3); }
ONUT_FORCE_INLINE void  onutProgramUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) { onutGL.ProgramUniform4i64ARB(program, location, x, y, z, w); }
ONUT_FORCE_INLINE void  onutProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { onutGL.ProgramUniform4i64NV(program, location, x, y, z, w); }
ONUT_FORCE_INLINE void  onutProgramUniform4i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) { onutGL.ProgramUniform4i64vARB(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { onutGL.ProgramUniform4i64vNV(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { onutGL.ProgramUniform4iEXT(program, location, v0, v1, v2, v3); }
ONUT_FORCE_INLINE void  onutProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint * value) { onutGL.ProgramUniform4iv(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) { onutGL.ProgramUniform4ivEXT(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { onutGL.ProgramUniform4ui(program, location, v0, v1, v2, v3); }
ONUT_FORCE_INLINE void  onutProgramUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) { onutGL.ProgramUniform4ui64ARB(program, location, x, y, z, w); }
ONUT_FORCE_INLINE void  onutProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { onutGL.ProgramUniform4ui64NV(program, location, x, y, z, w); }
ONUT_FORCE_INLINE void  onutProgramUniform4ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) { onutGL.ProgramUniform4ui64vARB(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { onutGL.ProgramUniform4ui64vNV(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { onutGL.ProgramUniform4uiEXT(program, location, v0, v1, v2, v3); }
ONUT_FORCE_INLINE void  onutProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { onutGL.ProgramUniform4uiv(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) { onutGL.ProgramUniform4uivEXT(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value) { onutGL.ProgramUniformHandleui64ARB(program, location, value); }
ONUT_FORCE_INLINE void  onutProgramUniformHandleui64IMG(GLuint program, GLint location, GLuint64 value) { onutGL.ProgramUniformHandleui64IMG(program, location, value); }
ONUT_FORCE_INLINE void  onutProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value) { onutGL.ProgramUniformHandleui64NV(program, location, value); }
ONUT_FORCE_INLINE void  onutProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * values) { onutGL.ProgramUniformHandleui64vARB(program, location, count, values); }
ONUT_FORCE_INLINE void  onutProgramUniformHandleui64vIMG(GLuint program, GLint location, GLsizei count, const GLuint64 * values) { onutGL.ProgramUniformHandleui64vIMG(program, location, count, values); }
ONUT_FORCE_INLINE void  onutProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 * values) { onutGL.ProgramUniformHandleui64vNV(program, location, count, values); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.ProgramUniformMatrix2dv(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.ProgramUniformMatrix2dvEXT(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.ProgramUniformMatrix2fv(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.ProgramUniformMatrix2fvEXT(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.ProgramUniformMatrix2x3dv(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.ProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.ProgramUniformMatrix2x3fv(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.ProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.ProgramUniformMatrix2x4dv(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.ProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.ProgramUniformMatrix2x4fv(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.ProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.ProgramUniformMatrix3dv(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.ProgramUniformMatrix3dvEXT(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.ProgramUniformMatrix3fv(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.ProgramUniformMatrix3fvEXT(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.ProgramUniformMatrix3x2dv(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.ProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.ProgramUniformMatrix3x2fv(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.ProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.ProgramUniformMatrix3x4dv(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.ProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.ProgramUniformMatrix3x4fv(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.ProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.ProgramUniformMatrix4dv(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.ProgramUniformMatrix4dvEXT(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.ProgramUniformMatrix4fv(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.ProgramUniformMatrix4fvEXT(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.ProgramUniformMatrix4x2dv(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.ProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.ProgramUniformMatrix4x2fv(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.ProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.ProgramUniformMatrix4x3dv(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.ProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.ProgramUniformMatrix4x3fv(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.ProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT value) { onutGL.ProgramUniformui64NV(program, location, value); }
ONUT_FORCE_INLINE void  onutProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { onutGL.ProgramUniformui64vNV(program, location, count, value); }
ONUT_FORCE_INLINE void  onutProgramVertexLimitNV(GLenum target, GLint limit) { onutGL.ProgramVertexLimitNV(target, limit); }
ONUT_FORCE_INLINE void  onutProvokingVertex(GLenum mode) { onutGL.ProvokingVertex(mode); }
ONUT_FORCE_INLINE void  onutProvokingVertexEXT(GLenum mode) { onutGL.ProvokingVertexEXT(mode); }
ONUT_FORCE_INLINE void  onutPushAttrib(GLbitfield mask) { onutGL.PushAttrib(mask); }
ONUT_FORCE_INLINE void  onutPushClientAttrib(GLbitfield mask) { onutGL.PushClientAttrib(mask); }
ONUT_FORCE_INLINE void  onutPushClientAttribDefaultEXT(GLbitfield mask) { onutGL.PushClientAttribDefaultEXT(mask); }
ONUT_FORCE_INLINE void  onutPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar * message) { onutGL.PushDebugGroup(source, id, length, message); }
ONUT_FORCE_INLINE void  onutPushDebugGroupKHR(GLenum source, GLuint id, GLsizei length, const GLchar * message) { onutGL.PushDebugGroupKHR(source, id, length, message); }
ONUT_FORCE_INLINE void  onutPushGroupMarkerEXT(GLsizei length, const GLchar * marker) { onutGL.PushGroupMarkerEXT(length, marker); }
ONUT_FORCE_INLINE void  onutPushMatrix(void) { onutGL.PushMatrix(); }
ONUT_FORCE_INLINE void  onutPushName(GLuint name) { onutGL.PushName(name); }
ONUT_FORCE_INLINE void  onutQueryCounter(GLuint id, GLenum target) { onutGL.QueryCounter(id, target); }
ONUT_FORCE_INLINE void  onutQueryCounterEXT(GLuint id, GLenum target) { onutGL.QueryCounterEXT(id, target); }
ONUT_FORCE_INLINE GLbitfield onutQueryMatrixxOES(GLfixed * mantissa, GLint * exponent) { return onutGL.QueryMatrixxOES(mantissa, exponent); }
ONUT_FORCE_INLINE void  onutQueryObjectParameteruiAMD(GLenum target, GLuint id, GLenum pname, GLuint param) { onutGL.QueryObjectParameteruiAMD(target, id, pname, param); }
ONUT_FORCE_INLINE void  onutRasterPos2d(GLdouble x, GLdouble y) { onutGL.RasterPos2d(x, y); }
ONUT_FORCE_INLINE void  onutRasterPos2dv(const GLdouble * v) { onutGL.RasterPos2dv(v); }
ONUT_FORCE_INLINE void  onutRasterPos2f(GLfloat x, GLfloat y) { onutGL.RasterPos2f(x, y); }
ONUT_FORCE_INLINE void  onutRasterPos2fv(const GLfloat * v) { onutGL.RasterPos2fv(v); }
ONUT_FORCE_INLINE void  onutRasterPos2i(GLint x, GLint y) { onutGL.RasterPos2i(x, y); }
ONUT_FORCE_INLINE void  onutRasterPos2iv(const GLint * v) { onutGL.RasterPos2iv(v); }
ONUT_FORCE_INLINE void  onutRasterPos2s(GLshort x, GLshort y) { onutGL.RasterPos2s(x, y); }
ONUT_FORCE_INLINE void  onutRasterPos2sv(const GLshort * v) { onutGL.RasterPos2sv(v); }
ONUT_FORCE_INLINE void  onutRasterPos2xOES(GLfixed x, GLfixed y) { onutGL.RasterPos2xOES(x, y); }
ONUT_FORCE_INLINE void  onutRasterPos2xvOES(const GLfixed * coords) { onutGL.RasterPos2xvOES(coords); }
ONUT_FORCE_INLINE void  onutRasterPos3d(GLdouble x, GLdouble y, GLdouble z) { onutGL.RasterPos3d(x, y, z); }
ONUT_FORCE_INLINE void  onutRasterPos3dv(const GLdouble * v) { onutGL.RasterPos3dv(v); }
ONUT_FORCE_INLINE void  onutRasterPos3f(GLfloat x, GLfloat y, GLfloat z) { onutGL.RasterPos3f(x, y, z); }
ONUT_FORCE_INLINE void  onutRasterPos3fv(const GLfloat * v) { onutGL.RasterPos3fv(v); }
ONUT_FORCE_INLINE void  onutRasterPos3i(GLint x, GLint y, GLint z) { onutGL.RasterPos3i(x, y, z); }
ONUT_FORCE_INLINE void  onutRasterPos3iv(const GLint * v) { onutGL.RasterPos3iv(v); }
ONUT_FORCE_INLINE void  onutRasterPos3s(GLshort x, GLshort y, GLshort z) { onutGL.RasterPos3s(x, y, z); }
ONUT_FORCE_INLINE void  onutRasterPos3sv(const GLshort * v) { onutGL.RasterPos3sv(v); }
ONUT_FORCE_INLINE void  onutRasterPos3xOES(GLfixed x, GLfixed y, GLfixed z) { onutGL.RasterPos3xOES(x, y, z); }
ONUT_FORCE_INLINE void  onutRasterPos3xvOES(const GLfixed * coords) { onutGL.RasterPos3xvOES(coords); }
ONUT_FORCE_INLINE void  onutRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) { onutGL.RasterPos4d(x, y, z, w); }
ONUT_FORCE_INLINE void  onutRasterPos4dv(const GLdouble * v) { onutGL.RasterPos4dv(v); }
ONUT_FORCE_INLINE void  onutRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) { onutGL.RasterPos4f(x, y, z, w); }
ONUT_FORCE_INLINE void  onutRasterPos4fv(const GLfloat * v) { onutGL.RasterPos4fv(v); }
ONUT_FORCE_INLINE void  onutRasterPos4i(GLint x, GLint y, GLint z, GLint w) { onutGL.RasterPos4i(x, y, z, w); }
ONUT_FORCE_INLINE void  onutRasterPos4iv(const GLint * v) { onutGL.RasterPos4iv(v); }
ONUT_FORCE_INLINE void  onutRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w) { onutGL.RasterPos4s(x, y, z, w); }
ONUT_FORCE_INLINE void  onutRasterPos4sv(const GLshort * v) { onutGL.RasterPos4sv(v); }
ONUT_FORCE_INLINE void  onutRasterPos4xOES(GLfixed x, GLfixed y, GLfixed z, GLfixed w) { onutGL.RasterPos4xOES(x, y, z, w); }
ONUT_FORCE_INLINE void  onutRasterPos4xvOES(const GLfixed * coords) { onutGL.RasterPos4xvOES(coords); }
ONUT_FORCE_INLINE void  onutRasterSamplesEXT(GLuint samples, GLboolean fixedsamplelocations) { onutGL.RasterSamplesEXT(samples, fixedsamplelocations); }
ONUT_FORCE_INLINE void  onutReadBuffer(GLenum src) { onutGL.ReadBuffer(src); }
ONUT_FORCE_INLINE void  onutReadBufferIndexedEXT(GLenum src, GLint index) { onutGL.ReadBufferIndexedEXT(src, index); }
ONUT_FORCE_INLINE void  onutReadBufferNV(GLenum mode) { onutGL.ReadBufferNV(mode); }
ONUT_FORCE_INLINE void  onutReadBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height) { onutGL.ReadBufferRegion(region, x, y, width, height); }
ONUT_FORCE_INLINE void  onutReadInstrumentsSGIX(GLint marker) { onutGL.ReadInstrumentsSGIX(marker); }
ONUT_FORCE_INLINE void  onutReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels) { onutGL.ReadPixels(x, y, width, height, format, type, pixels); }
ONUT_FORCE_INLINE void  onutReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { onutGL.ReadnPixels(x, y, width, height, format, type, bufSize, data); }
ONUT_FORCE_INLINE void  onutReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { onutGL.ReadnPixelsARB(x, y, width, height, format, type, bufSize, data); }
ONUT_FORCE_INLINE void  onutReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { onutGL.ReadnPixelsEXT(x, y, width, height, format, type, bufSize, data); }
ONUT_FORCE_INLINE void  onutReadnPixelsKHR(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { onutGL.ReadnPixelsKHR(x, y, width, height, format, type, bufSize, data); }
ONUT_FORCE_INLINE void  onutRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) { onutGL.Rectd(x1, y1, x2, y2); }
ONUT_FORCE_INLINE void  onutRectdv(const GLdouble * v1, const GLdouble * v2) { onutGL.Rectdv(v1, v2); }
ONUT_FORCE_INLINE void  onutRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) { onutGL.Rectf(x1, y1, x2, y2); }
ONUT_FORCE_INLINE void  onutRectfv(const GLfloat * v1, const GLfloat * v2) { onutGL.Rectfv(v1, v2); }
ONUT_FORCE_INLINE void  onutRecti(GLint x1, GLint y1, GLint x2, GLint y2) { onutGL.Recti(x1, y1, x2, y2); }
ONUT_FORCE_INLINE void  onutRectiv(const GLint * v1, const GLint * v2) { onutGL.Rectiv(v1, v2); }
ONUT_FORCE_INLINE void  onutRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2) { onutGL.Rects(x1, y1, x2, y2); }
ONUT_FORCE_INLINE void  onutRectsv(const GLshort * v1, const GLshort * v2) { onutGL.Rectsv(v1, v2); }
ONUT_FORCE_INLINE void  onutRectxOES(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2) { onutGL.RectxOES(x1, y1, x2, y2); }
ONUT_FORCE_INLINE void  onutRectxvOES(const GLfixed * v1, const GLfixed * v2) { onutGL.RectxvOES(v1, v2); }
ONUT_FORCE_INLINE void  onutReferencePlaneSGIX(const GLdouble * equation) { onutGL.ReferencePlaneSGIX(equation); }
ONUT_FORCE_INLINE GLboolean onutReleaseKeyedMutexWin32EXT(GLuint memory, GLuint64 key) { return onutGL.ReleaseKeyedMutexWin32EXT(memory, key); }
ONUT_FORCE_INLINE void  onutReleaseShaderCompiler(void) { onutGL.ReleaseShaderCompiler(); }
ONUT_FORCE_INLINE void  onutRenderGpuMaskNV(GLbitfield mask) { onutGL.RenderGpuMaskNV(mask); }
ONUT_FORCE_INLINE GLint onutRenderMode(GLenum mode) { return onutGL.RenderMode(mode); }
ONUT_FORCE_INLINE void  onutRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { onutGL.RenderbufferStorage(target, internalformat, width, height); }
ONUT_FORCE_INLINE void  onutRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { onutGL.RenderbufferStorageEXT(target, internalformat, width, height); }
ONUT_FORCE_INLINE void  onutRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { onutGL.RenderbufferStorageMultisample(target, samples, internalformat, width, height); }
ONUT_FORCE_INLINE void  onutRenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { onutGL.RenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height); }
ONUT_FORCE_INLINE void  onutRenderbufferStorageMultisampleAPPLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { onutGL.RenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height); }
ONUT_FORCE_INLINE void  onutRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) { onutGL.RenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height); }
ONUT_FORCE_INLINE void  onutRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { onutGL.RenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height); }
ONUT_FORCE_INLINE void  onutRenderbufferStorageMultisampleIMG(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { onutGL.RenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height); }
ONUT_FORCE_INLINE void  onutRenderbufferStorageMultisampleNV(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { onutGL.RenderbufferStorageMultisampleNV(target, samples, internalformat, width, height); }
ONUT_FORCE_INLINE void  onutRenderbufferStorageOES(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { onutGL.RenderbufferStorageOES(target, internalformat, width, height); }
ONUT_FORCE_INLINE void  onutReplacementCodePointerSUN(GLenum type, GLsizei stride, const void ** pointer) { onutGL.ReplacementCodePointerSUN(type, stride, pointer); }
ONUT_FORCE_INLINE void  onutReplacementCodeubSUN(GLubyte code) { onutGL.ReplacementCodeubSUN(code); }
ONUT_FORCE_INLINE void  onutReplacementCodeubvSUN(const GLubyte * code) { onutGL.ReplacementCodeubvSUN(code); }
ONUT_FORCE_INLINE void  onutReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { onutGL.ReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z); }
ONUT_FORCE_INLINE void  onutReplacementCodeuiColor3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * v) { onutGL.ReplacementCodeuiColor3fVertex3fvSUN(rc, c, v); }
ONUT_FORCE_INLINE void  onutReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { onutGL.ReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z); }
ONUT_FORCE_INLINE void  onutReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { onutGL.ReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v); }
ONUT_FORCE_INLINE void  onutReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { onutGL.ReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z); }
ONUT_FORCE_INLINE void  onutReplacementCodeuiColor4ubVertex3fvSUN(const GLuint * rc, const GLubyte * c, const GLfloat * v) { onutGL.ReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v); }
ONUT_FORCE_INLINE void  onutReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { onutGL.ReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z); }
ONUT_FORCE_INLINE void  onutReplacementCodeuiNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * n, const GLfloat * v) { onutGL.ReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v); }
ONUT_FORCE_INLINE void  onutReplacementCodeuiSUN(GLuint code) { onutGL.ReplacementCodeuiSUN(code); }
ONUT_FORCE_INLINE void  onutReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { onutGL.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z); }
ONUT_FORCE_INLINE void  onutReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { onutGL.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v); }
ONUT_FORCE_INLINE void  onutReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { onutGL.ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z); }
ONUT_FORCE_INLINE void  onutReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * n, const GLfloat * v) { onutGL.ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v); }
ONUT_FORCE_INLINE void  onutReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) { onutGL.ReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z); }
ONUT_FORCE_INLINE void  onutReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * v) { onutGL.ReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v); }
ONUT_FORCE_INLINE void  onutReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z) { onutGL.ReplacementCodeuiVertex3fSUN(rc, x, y, z); }
ONUT_FORCE_INLINE void  onutReplacementCodeuiVertex3fvSUN(const GLuint * rc, const GLfloat * v) { onutGL.ReplacementCodeuiVertex3fvSUN(rc, v); }
ONUT_FORCE_INLINE void  onutReplacementCodeuivSUN(const GLuint * code) { onutGL.ReplacementCodeuivSUN(code); }
ONUT_FORCE_INLINE void  onutReplacementCodeusSUN(GLushort code) { onutGL.ReplacementCodeusSUN(code); }
ONUT_FORCE_INLINE void  onutReplacementCodeusvSUN(const GLushort * code) { onutGL.ReplacementCodeusvSUN(code); }
ONUT_FORCE_INLINE void  onutRequestResidentProgramsNV(GLsizei n, const GLuint * programs) { onutGL.RequestResidentProgramsNV(n, programs); }
ONUT_FORCE_INLINE void  onutResetHistogram(GLenum target) { onutGL.ResetHistogram(target); }
ONUT_FORCE_INLINE void  onutResetHistogramEXT(GLenum target) { onutGL.ResetHistogramEXT(target); }
ONUT_FORCE_INLINE void  onutResetMinmax(GLenum target) { onutGL.ResetMinmax(target); }
ONUT_FORCE_INLINE void  onutResetMinmaxEXT(GLenum target) { onutGL.ResetMinmaxEXT(target); }
ONUT_FORCE_INLINE void  onutResizeBuffersMESA(void) { onutGL.ResizeBuffersMESA(); }
ONUT_FORCE_INLINE void  onutResolveDepthValuesNV(void) { onutGL.ResolveDepthValuesNV(); }
ONUT_FORCE_INLINE void  onutResolveMultisampleFramebufferAPPLE(void) { onutGL.ResolveMultisampleFramebufferAPPLE(); }
ONUT_FORCE_INLINE void  onutResumeTransformFeedback(void) { onutGL.ResumeTransformFeedback(); }
ONUT_FORCE_INLINE void  onutResumeTransformFeedbackNV(void) { onutGL.ResumeTransformFeedbackNV(); }
ONUT_FORCE_INLINE void  onutRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) { onutGL.Rotated(angle, x, y, z); }
ONUT_FORCE_INLINE void  onutRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) { onutGL.Rotatef(angle, x, y, z); }
ONUT_FORCE_INLINE void  onutRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z) { onutGL.Rotatex(angle, x, y, z); }
ONUT_FORCE_INLINE void  onutRotatexOES(GLfixed angle, GLfixed x, GLfixed y, GLfixed z) { onutGL.RotatexOES(angle, x, y, z); }
ONUT_FORCE_INLINE void  onutSampleCoverage(GLfloat value, GLboolean invert) { onutGL.SampleCoverage(value, invert); }
ONUT_FORCE_INLINE void  onutSampleCoverageARB(GLfloat value, GLboolean invert) { onutGL.SampleCoverageARB(value, invert); }
ONUT_FORCE_INLINE void  onutSampleCoveragex(GLclampx value, GLboolean invert) { onutGL.SampleCoveragex(value, invert); }
ONUT_FORCE_INLINE void  onutSampleCoveragexOES(GLclampx value, GLboolean invert) { onutGL.SampleCoveragexOES(value, invert); }
ONUT_FORCE_INLINE void  onutSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle) { onutGL.SampleMapATI(dst, interp, swizzle); }
ONUT_FORCE_INLINE void  onutSampleMaskEXT(GLclampf value, GLboolean invert) { onutGL.SampleMaskEXT(value, invert); }
ONUT_FORCE_INLINE void  onutSampleMaskIndexedNV(GLuint index, GLbitfield mask) { onutGL.SampleMaskIndexedNV(index, mask); }
ONUT_FORCE_INLINE void  onutSampleMaskSGIS(GLclampf value, GLboolean invert) { onutGL.SampleMaskSGIS(value, invert); }
ONUT_FORCE_INLINE void  onutSampleMaski(GLuint maskNumber, GLbitfield mask) { onutGL.SampleMaski(maskNumber, mask); }
ONUT_FORCE_INLINE void  onutSamplePatternEXT(GLenum pattern) { onutGL.SamplePatternEXT(pattern); }
ONUT_FORCE_INLINE void  onutSamplePatternSGIS(GLenum pattern) { onutGL.SamplePatternSGIS(pattern); }
ONUT_FORCE_INLINE void  onutSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint * param) { onutGL.SamplerParameterIiv(sampler, pname, param); }
ONUT_FORCE_INLINE void  onutSamplerParameterIivEXT(GLuint sampler, GLenum pname, const GLint * param) { onutGL.SamplerParameterIivEXT(sampler, pname, param); }
ONUT_FORCE_INLINE void  onutSamplerParameterIivOES(GLuint sampler, GLenum pname, const GLint * param) { onutGL.SamplerParameterIivOES(sampler, pname, param); }
ONUT_FORCE_INLINE void  onutSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint * param) { onutGL.SamplerParameterIuiv(sampler, pname, param); }
ONUT_FORCE_INLINE void  onutSamplerParameterIuivEXT(GLuint sampler, GLenum pname, const GLuint * param) { onutGL.SamplerParameterIuivEXT(sampler, pname, param); }
ONUT_FORCE_INLINE void  onutSamplerParameterIuivOES(GLuint sampler, GLenum pname, const GLuint * param) { onutGL.SamplerParameterIuivOES(sampler, pname, param); }
ONUT_FORCE_INLINE void  onutSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param) { onutGL.SamplerParameterf(sampler, pname, param); }
ONUT_FORCE_INLINE void  onutSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat * param) { onutGL.SamplerParameterfv(sampler, pname, param); }
ONUT_FORCE_INLINE void  onutSamplerParameteri(GLuint sampler, GLenum pname, GLint param) { onutGL.SamplerParameteri(sampler, pname, param); }
ONUT_FORCE_INLINE void  onutSamplerParameteriv(GLuint sampler, GLenum pname, const GLint * param) { onutGL.SamplerParameteriv(sampler, pname, param); }
ONUT_FORCE_INLINE void  onutScaled(GLdouble x, GLdouble y, GLdouble z) { onutGL.Scaled(x, y, z); }
ONUT_FORCE_INLINE void  onutScalef(GLfloat x, GLfloat y, GLfloat z) { onutGL.Scalef(x, y, z); }
ONUT_FORCE_INLINE void  onutScalex(GLfixed x, GLfixed y, GLfixed z) { onutGL.Scalex(x, y, z); }
ONUT_FORCE_INLINE void  onutScalexOES(GLfixed x, GLfixed y, GLfixed z) { onutGL.ScalexOES(x, y, z); }
ONUT_FORCE_INLINE void  onutScissor(GLint x, GLint y, GLsizei width, GLsizei height) { onutGL.Scissor(x, y, width, height); }
ONUT_FORCE_INLINE void  onutScissorArrayv(GLuint first, GLsizei count, const GLint * v) { onutGL.ScissorArrayv(first, count, v); }
ONUT_FORCE_INLINE void  onutScissorArrayvNV(GLuint first, GLsizei count, const GLint * v) { onutGL.ScissorArrayvNV(first, count, v); }
ONUT_FORCE_INLINE void  onutScissorArrayvOES(GLuint first, GLsizei count, const GLint * v) { onutGL.ScissorArrayvOES(first, count, v); }
ONUT_FORCE_INLINE void  onutScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { onutGL.ScissorIndexed(index, left, bottom, width, height); }
ONUT_FORCE_INLINE void  onutScissorIndexedNV(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { onutGL.ScissorIndexedNV(index, left, bottom, width, height); }
ONUT_FORCE_INLINE void  onutScissorIndexedOES(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { onutGL.ScissorIndexedOES(index, left, bottom, width, height); }
ONUT_FORCE_INLINE void  onutScissorIndexedv(GLuint index, const GLint * v) { onutGL.ScissorIndexedv(index, v); }
ONUT_FORCE_INLINE void  onutScissorIndexedvNV(GLuint index, const GLint * v) { onutGL.ScissorIndexedvNV(index, v); }
ONUT_FORCE_INLINE void  onutScissorIndexedvOES(GLuint index, const GLint * v) { onutGL.ScissorIndexedvOES(index, v); }
ONUT_FORCE_INLINE void  onutSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue) { onutGL.SecondaryColor3b(red, green, blue); }
ONUT_FORCE_INLINE void  onutSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue) { onutGL.SecondaryColor3bEXT(red, green, blue); }
ONUT_FORCE_INLINE void  onutSecondaryColor3bv(const GLbyte * v) { onutGL.SecondaryColor3bv(v); }
ONUT_FORCE_INLINE void  onutSecondaryColor3bvEXT(const GLbyte * v) { onutGL.SecondaryColor3bvEXT(v); }
ONUT_FORCE_INLINE void  onutSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue) { onutGL.SecondaryColor3d(red, green, blue); }
ONUT_FORCE_INLINE void  onutSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue) { onutGL.SecondaryColor3dEXT(red, green, blue); }
ONUT_FORCE_INLINE void  onutSecondaryColor3dv(const GLdouble * v) { onutGL.SecondaryColor3dv(v); }
ONUT_FORCE_INLINE void  onutSecondaryColor3dvEXT(const GLdouble * v) { onutGL.SecondaryColor3dvEXT(v); }
ONUT_FORCE_INLINE void  onutSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue) { onutGL.SecondaryColor3f(red, green, blue); }
ONUT_FORCE_INLINE void  onutSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue) { onutGL.SecondaryColor3fEXT(red, green, blue); }
ONUT_FORCE_INLINE void  onutSecondaryColor3fv(const GLfloat * v) { onutGL.SecondaryColor3fv(v); }
ONUT_FORCE_INLINE void  onutSecondaryColor3fvEXT(const GLfloat * v) { onutGL.SecondaryColor3fvEXT(v); }
ONUT_FORCE_INLINE void  onutSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue) { onutGL.SecondaryColor3hNV(red, green, blue); }
ONUT_FORCE_INLINE void  onutSecondaryColor3hvNV(const GLhalfNV * v) { onutGL.SecondaryColor3hvNV(v); }
ONUT_FORCE_INLINE void  onutSecondaryColor3i(GLint red, GLint green, GLint blue) { onutGL.SecondaryColor3i(red, green, blue); }
ONUT_FORCE_INLINE void  onutSecondaryColor3iEXT(GLint red, GLint green, GLint blue) { onutGL.SecondaryColor3iEXT(red, green, blue); }
ONUT_FORCE_INLINE void  onutSecondaryColor3iv(const GLint * v) { onutGL.SecondaryColor3iv(v); }
ONUT_FORCE_INLINE void  onutSecondaryColor3ivEXT(const GLint * v) { onutGL.SecondaryColor3ivEXT(v); }
ONUT_FORCE_INLINE void  onutSecondaryColor3s(GLshort red, GLshort green, GLshort blue) { onutGL.SecondaryColor3s(red, green, blue); }
ONUT_FORCE_INLINE void  onutSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue) { onutGL.SecondaryColor3sEXT(red, green, blue); }
ONUT_FORCE_INLINE void  onutSecondaryColor3sv(const GLshort * v) { onutGL.SecondaryColor3sv(v); }
ONUT_FORCE_INLINE void  onutSecondaryColor3svEXT(const GLshort * v) { onutGL.SecondaryColor3svEXT(v); }
ONUT_FORCE_INLINE void  onutSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue) { onutGL.SecondaryColor3ub(red, green, blue); }
ONUT_FORCE_INLINE void  onutSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue) { onutGL.SecondaryColor3ubEXT(red, green, blue); }
ONUT_FORCE_INLINE void  onutSecondaryColor3ubv(const GLubyte * v) { onutGL.SecondaryColor3ubv(v); }
ONUT_FORCE_INLINE void  onutSecondaryColor3ubvEXT(const GLubyte * v) { onutGL.SecondaryColor3ubvEXT(v); }
ONUT_FORCE_INLINE void  onutSecondaryColor3ui(GLuint red, GLuint green, GLuint blue) { onutGL.SecondaryColor3ui(red, green, blue); }
ONUT_FORCE_INLINE void  onutSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue) { onutGL.SecondaryColor3uiEXT(red, green, blue); }
ONUT_FORCE_INLINE void  onutSecondaryColor3uiv(const GLuint * v) { onutGL.SecondaryColor3uiv(v); }
ONUT_FORCE_INLINE void  onutSecondaryColor3uivEXT(const GLuint * v) { onutGL.SecondaryColor3uivEXT(v); }
ONUT_FORCE_INLINE void  onutSecondaryColor3us(GLushort red, GLushort green, GLushort blue) { onutGL.SecondaryColor3us(red, green, blue); }
ONUT_FORCE_INLINE void  onutSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue) { onutGL.SecondaryColor3usEXT(red, green, blue); }
ONUT_FORCE_INLINE void  onutSecondaryColor3usv(const GLushort * v) { onutGL.SecondaryColor3usv(v); }
ONUT_FORCE_INLINE void  onutSecondaryColor3usvEXT(const GLushort * v) { onutGL.SecondaryColor3usvEXT(v); }
ONUT_FORCE_INLINE void  onutSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride) { onutGL.SecondaryColorFormatNV(size, type, stride); }
ONUT_FORCE_INLINE void  onutSecondaryColorP3ui(GLenum type, GLuint color) { onutGL.SecondaryColorP3ui(type, color); }
ONUT_FORCE_INLINE void  onutSecondaryColorP3uiv(GLenum type, const GLuint * color) { onutGL.SecondaryColorP3uiv(type, color); }
ONUT_FORCE_INLINE void  onutSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { onutGL.SecondaryColorPointer(size, type, stride, pointer); }
ONUT_FORCE_INLINE void  onutSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const void * pointer) { onutGL.SecondaryColorPointerEXT(size, type, stride, pointer); }
ONUT_FORCE_INLINE void  onutSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { onutGL.SecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride); }
ONUT_FORCE_INLINE void  onutSelectBuffer(GLsizei size, GLuint * buffer) { onutGL.SelectBuffer(size, buffer); }
ONUT_FORCE_INLINE void  onutSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint * counterList) { onutGL.SelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList); }
ONUT_FORCE_INLINE void  onutSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, const GLuint64 * params) { onutGL.SemaphoreParameterui64vEXT(semaphore, pname, params); }
ONUT_FORCE_INLINE void  onutSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column) { onutGL.SeparableFilter2D(target, internalformat, width, height, format, type, row, column); }
ONUT_FORCE_INLINE void  onutSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column) { onutGL.SeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column); }
ONUT_FORCE_INLINE void  onutSetFenceAPPLE(GLuint fence) { onutGL.SetFenceAPPLE(fence); }
ONUT_FORCE_INLINE void  onutSetFenceNV(GLuint fence, GLenum condition) { onutGL.SetFenceNV(fence, condition); }
ONUT_FORCE_INLINE void  onutSetFragmentShaderConstantATI(GLuint dst, const GLfloat * value) { onutGL.SetFragmentShaderConstantATI(dst, value); }
ONUT_FORCE_INLINE void  onutSetInvariantEXT(GLuint id, GLenum type, const void * addr) { onutGL.SetInvariantEXT(id, type, addr); }
ONUT_FORCE_INLINE void  onutSetLocalConstantEXT(GLuint id, GLenum type, const void * addr) { onutGL.SetLocalConstantEXT(id, type, addr); }
ONUT_FORCE_INLINE void  onutSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat * val) { onutGL.SetMultisamplefvAMD(pname, index, val); }
ONUT_FORCE_INLINE void  onutShadeModel(GLenum mode) { onutGL.ShadeModel(mode); }
ONUT_FORCE_INLINE void  onutShaderBinary(GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length) { onutGL.ShaderBinary(count, shaders, binaryformat, binary, length); }
ONUT_FORCE_INLINE void  onutShaderOp1EXT(GLenum op, GLuint res, GLuint arg1) { onutGL.ShaderOp1EXT(op, res, arg1); }
ONUT_FORCE_INLINE void  onutShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2) { onutGL.ShaderOp2EXT(op, res, arg1, arg2); }
ONUT_FORCE_INLINE void  onutShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3) { onutGL.ShaderOp3EXT(op, res, arg1, arg2, arg3); }
ONUT_FORCE_INLINE void  onutShaderSource(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length) { onutGL.ShaderSource(shader, count, string, length); }
ONUT_FORCE_INLINE void  onutShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint * length) { onutGL.ShaderSourceARB(shaderObj, count, string, length); }
ONUT_FORCE_INLINE void  onutShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) { onutGL.ShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding); }
ONUT_FORCE_INLINE void  onutSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat * points) { onutGL.SharpenTexFuncSGIS(target, n, points); }
ONUT_FORCE_INLINE void  onutSignalSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint * buffers, GLuint numTextureBarriers, const GLuint * textures, const GLenum * dstLayouts) { onutGL.SignalSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts); }
ONUT_FORCE_INLINE void  onutSignalVkFenceNV(GLuint64 vkFence) { onutGL.SignalVkFenceNV(vkFence); }
ONUT_FORCE_INLINE void  onutSignalVkSemaphoreNV(GLuint64 vkSemaphore) { onutGL.SignalVkSemaphoreNV(vkSemaphore); }
ONUT_FORCE_INLINE void  onutSpecializeShaderARB(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue) { onutGL.SpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue); }
ONUT_FORCE_INLINE void  onutSpriteParameterfSGIX(GLenum pname, GLfloat param) { onutGL.SpriteParameterfSGIX(pname, param); }
ONUT_FORCE_INLINE void  onutSpriteParameterfvSGIX(GLenum pname, const GLfloat * params) { onutGL.SpriteParameterfvSGIX(pname, params); }
ONUT_FORCE_INLINE void  onutSpriteParameteriSGIX(GLenum pname, GLint param) { onutGL.SpriteParameteriSGIX(pname, param); }
ONUT_FORCE_INLINE void  onutSpriteParameterivSGIX(GLenum pname, const GLint * params) { onutGL.SpriteParameterivSGIX(pname, params); }
ONUT_FORCE_INLINE void  onutStartInstrumentsSGIX(void) { onutGL.StartInstrumentsSGIX(); }
ONUT_FORCE_INLINE void  onutStartTilingQCOM(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask) { onutGL.StartTilingQCOM(x, y, width, height, preserveMask); }
ONUT_FORCE_INLINE void  onutStateCaptureNV(GLuint state, GLenum mode) { onutGL.StateCaptureNV(state, mode); }
ONUT_FORCE_INLINE void  onutStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag) { onutGL.StencilClearTagEXT(stencilTagBits, stencilClearTag); }
ONUT_FORCE_INLINE void  onutStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat * transformValues) { onutGL.StencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues); }
ONUT_FORCE_INLINE void  onutStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask) { onutGL.StencilFillPathNV(path, fillMode, mask); }
ONUT_FORCE_INLINE void  onutStencilFunc(GLenum func, GLint ref, GLuint mask) { onutGL.StencilFunc(func, ref, mask); }
ONUT_FORCE_INLINE void  onutStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) { onutGL.StencilFuncSeparate(face, func, ref, mask); }
ONUT_FORCE_INLINE void  onutStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask) { onutGL.StencilFuncSeparateATI(frontfunc, backfunc, ref, mask); }
ONUT_FORCE_INLINE void  onutStencilMask(GLuint mask) { onutGL.StencilMask(mask); }
ONUT_FORCE_INLINE void  onutStencilMaskSeparate(GLenum face, GLuint mask) { onutGL.StencilMaskSeparate(face, mask); }
ONUT_FORCE_INLINE void  onutStencilOp(GLenum fail, GLenum zfail, GLenum zpass) { onutGL.StencilOp(fail, zfail, zpass); }
ONUT_FORCE_INLINE void  onutStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) { onutGL.StencilOpSeparate(face, sfail, dpfail, dppass); }
ONUT_FORCE_INLINE void  onutStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) { onutGL.StencilOpSeparateATI(face, sfail, dpfail, dppass); }
ONUT_FORCE_INLINE void  onutStencilOpValueAMD(GLenum face, GLuint value) { onutGL.StencilOpValueAMD(face, value); }
ONUT_FORCE_INLINE void  onutStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat * transformValues) { onutGL.StencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues); }
ONUT_FORCE_INLINE void  onutStencilStrokePathNV(GLuint path, GLint reference, GLuint mask) { onutGL.StencilStrokePathNV(path, reference, mask); }
ONUT_FORCE_INLINE void  onutStencilThenCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { onutGL.StencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues); }
ONUT_FORCE_INLINE void  onutStencilThenCoverFillPathNV(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) { onutGL.StencilThenCoverFillPathNV(path, fillMode, mask, coverMode); }
ONUT_FORCE_INLINE void  onutStencilThenCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { onutGL.StencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues); }
ONUT_FORCE_INLINE void  onutStencilThenCoverStrokePathNV(GLuint path, GLint reference, GLuint mask, GLenum coverMode) { onutGL.StencilThenCoverStrokePathNV(path, reference, mask, coverMode); }
ONUT_FORCE_INLINE void  onutStopInstrumentsSGIX(GLint marker) { onutGL.StopInstrumentsSGIX(marker); }
ONUT_FORCE_INLINE void  onutStringMarkerGREMEDY(GLsizei len, const void * string) { onutGL.StringMarkerGREMEDY(len, string); }
ONUT_FORCE_INLINE void  onutSubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits) { onutGL.SubpixelPrecisionBiasNV(xbits, ybits); }
ONUT_FORCE_INLINE void  onutSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) { onutGL.SwizzleEXT(res, in, outX, outY, outZ, outW); }
ONUT_FORCE_INLINE void  onutSyncTextureINTEL(GLuint texture) { onutGL.SyncTextureINTEL(texture); }
ONUT_FORCE_INLINE void  onutTagSampleBufferSGIX(void) { onutGL.TagSampleBufferSGIX(); }
ONUT_FORCE_INLINE void  onutTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz) { onutGL.Tangent3bEXT(tx, ty, tz); }
ONUT_FORCE_INLINE void  onutTangent3bvEXT(const GLbyte * v) { onutGL.Tangent3bvEXT(v); }
ONUT_FORCE_INLINE void  onutTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz) { onutGL.Tangent3dEXT(tx, ty, tz); }
ONUT_FORCE_INLINE void  onutTangent3dvEXT(const GLdouble * v) { onutGL.Tangent3dvEXT(v); }
ONUT_FORCE_INLINE void  onutTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz) { onutGL.Tangent3fEXT(tx, ty, tz); }
ONUT_FORCE_INLINE void  onutTangent3fvEXT(const GLfloat * v) { onutGL.Tangent3fvEXT(v); }
ONUT_FORCE_INLINE void  onutTangent3iEXT(GLint tx, GLint ty, GLint tz) { onutGL.Tangent3iEXT(tx, ty, tz); }
ONUT_FORCE_INLINE void  onutTangent3ivEXT(const GLint * v) { onutGL.Tangent3ivEXT(v); }
ONUT_FORCE_INLINE void  onutTangent3sEXT(GLshort tx, GLshort ty, GLshort tz) { onutGL.Tangent3sEXT(tx, ty, tz); }
ONUT_FORCE_INLINE void  onutTangent3svEXT(const GLshort * v) { onutGL.Tangent3svEXT(v); }
ONUT_FORCE_INLINE void  onutTangentPointerEXT(GLenum type, GLsizei stride, const void * pointer) { onutGL.TangentPointerEXT(type, stride, pointer); }
ONUT_FORCE_INLINE void  onutTbufferMask3DFX(GLuint mask) { onutGL.TbufferMask3DFX(mask); }
ONUT_FORCE_INLINE void  onutTessellationFactorAMD(GLfloat factor) { onutGL.TessellationFactorAMD(factor); }
ONUT_FORCE_INLINE void  onutTessellationModeAMD(GLenum mode) { onutGL.TessellationModeAMD(mode); }
ONUT_FORCE_INLINE GLboolean onutTestFenceAPPLE(GLuint fence) { return onutGL.TestFenceAPPLE(fence); }
ONUT_FORCE_INLINE GLboolean onutTestFenceNV(GLuint fence) { return onutGL.TestFenceNV(fence); }
ONUT_FORCE_INLINE GLboolean onutTestObjectAPPLE(GLenum object, GLuint name) { return onutGL.TestObjectAPPLE(object, name); }
ONUT_FORCE_INLINE void  onutTexBuffer(GLenum target, GLenum internalformat, GLuint buffer) { onutGL.TexBuffer(target, internalformat, buffer); }
ONUT_FORCE_INLINE void  onutTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer) { onutGL.TexBufferARB(target, internalformat, buffer); }
ONUT_FORCE_INLINE void  onutTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer) { onutGL.TexBufferEXT(target, internalformat, buffer); }
ONUT_FORCE_INLINE void  onutTexBufferOES(GLenum target, GLenum internalformat, GLuint buffer) { onutGL.TexBufferOES(target, internalformat, buffer); }
ONUT_FORCE_INLINE void  onutTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { onutGL.TexBufferRange(target, internalformat, buffer, offset, size); }
ONUT_FORCE_INLINE void  onutTexBufferRangeEXT(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { onutGL.TexBufferRangeEXT(target, internalformat, buffer, offset, size); }
ONUT_FORCE_INLINE void  onutTexBufferRangeOES(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { onutGL.TexBufferRangeOES(target, internalformat, buffer, offset, size); }
ONUT_FORCE_INLINE void  onutTexBumpParameterfvATI(GLenum pname, const GLfloat * param) { onutGL.TexBumpParameterfvATI(pname, param); }
ONUT_FORCE_INLINE void  onutTexBumpParameterivATI(GLenum pname, const GLint * param) { onutGL.TexBumpParameterivATI(pname, param); }
ONUT_FORCE_INLINE void  onutTexCoord1bOES(GLbyte s) { onutGL.TexCoord1bOES(s); }
ONUT_FORCE_INLINE void  onutTexCoord1bvOES(const GLbyte * coords) { onutGL.TexCoord1bvOES(coords); }
ONUT_FORCE_INLINE void  onutTexCoord1d(GLdouble s) { onutGL.TexCoord1d(s); }
ONUT_FORCE_INLINE void  onutTexCoord1dv(const GLdouble * v) { onutGL.TexCoord1dv(v); }
ONUT_FORCE_INLINE void  onutTexCoord1f(GLfloat s) { onutGL.TexCoord1f(s); }
ONUT_FORCE_INLINE void  onutTexCoord1fv(const GLfloat * v) { onutGL.TexCoord1fv(v); }
ONUT_FORCE_INLINE void  onutTexCoord1hNV(GLhalfNV s) { onutGL.TexCoord1hNV(s); }
ONUT_FORCE_INLINE void  onutTexCoord1hvNV(const GLhalfNV * v) { onutGL.TexCoord1hvNV(v); }
ONUT_FORCE_INLINE void  onutTexCoord1i(GLint s) { onutGL.TexCoord1i(s); }
ONUT_FORCE_INLINE void  onutTexCoord1iv(const GLint * v) { onutGL.TexCoord1iv(v); }
ONUT_FORCE_INLINE void  onutTexCoord1s(GLshort s) { onutGL.TexCoord1s(s); }
ONUT_FORCE_INLINE void  onutTexCoord1sv(const GLshort * v) { onutGL.TexCoord1sv(v); }
ONUT_FORCE_INLINE void  onutTexCoord1xOES(GLfixed s) { onutGL.TexCoord1xOES(s); }
ONUT_FORCE_INLINE void  onutTexCoord1xvOES(const GLfixed * coords) { onutGL.TexCoord1xvOES(coords); }
ONUT_FORCE_INLINE void  onutTexCoord2bOES(GLbyte s, GLbyte t) { onutGL.TexCoord2bOES(s, t); }
ONUT_FORCE_INLINE void  onutTexCoord2bvOES(const GLbyte * coords) { onutGL.TexCoord2bvOES(coords); }
ONUT_FORCE_INLINE void  onutTexCoord2d(GLdouble s, GLdouble t) { onutGL.TexCoord2d(s, t); }
ONUT_FORCE_INLINE void  onutTexCoord2dv(const GLdouble * v) { onutGL.TexCoord2dv(v); }
ONUT_FORCE_INLINE void  onutTexCoord2f(GLfloat s, GLfloat t) { onutGL.TexCoord2f(s, t); }
ONUT_FORCE_INLINE void  onutTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { onutGL.TexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z); }
ONUT_FORCE_INLINE void  onutTexCoord2fColor3fVertex3fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * v) { onutGL.TexCoord2fColor3fVertex3fvSUN(tc, c, v); }
ONUT_FORCE_INLINE void  onutTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { onutGL.TexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z); }
ONUT_FORCE_INLINE void  onutTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { onutGL.TexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v); }
ONUT_FORCE_INLINE void  onutTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { onutGL.TexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z); }
ONUT_FORCE_INLINE void  onutTexCoord2fColor4ubVertex3fvSUN(const GLfloat * tc, const GLubyte * c, const GLfloat * v) { onutGL.TexCoord2fColor4ubVertex3fvSUN(tc, c, v); }
ONUT_FORCE_INLINE void  onutTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { onutGL.TexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z); }
ONUT_FORCE_INLINE void  onutTexCoord2fNormal3fVertex3fvSUN(const GLfloat * tc, const GLfloat * n, const GLfloat * v) { onutGL.TexCoord2fNormal3fVertex3fvSUN(tc, n, v); }
ONUT_FORCE_INLINE void  onutTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) { onutGL.TexCoord2fVertex3fSUN(s, t, x, y, z); }
ONUT_FORCE_INLINE void  onutTexCoord2fVertex3fvSUN(const GLfloat * tc, const GLfloat * v) { onutGL.TexCoord2fVertex3fvSUN(tc, v); }
ONUT_FORCE_INLINE void  onutTexCoord2fv(const GLfloat * v) { onutGL.TexCoord2fv(v); }
ONUT_FORCE_INLINE void  onutTexCoord2hNV(GLhalfNV s, GLhalfNV t) { onutGL.TexCoord2hNV(s, t); }
ONUT_FORCE_INLINE void  onutTexCoord2hvNV(const GLhalfNV * v) { onutGL.TexCoord2hvNV(v); }
ONUT_FORCE_INLINE void  onutTexCoord2i(GLint s, GLint t) { onutGL.TexCoord2i(s, t); }
ONUT_FORCE_INLINE void  onutTexCoord2iv(const GLint * v) { onutGL.TexCoord2iv(v); }
ONUT_FORCE_INLINE void  onutTexCoord2s(GLshort s, GLshort t) { onutGL.TexCoord2s(s, t); }
ONUT_FORCE_INLINE void  onutTexCoord2sv(const GLshort * v) { onutGL.TexCoord2sv(v); }
ONUT_FORCE_INLINE void  onutTexCoord2xOES(GLfixed s, GLfixed t) { onutGL.TexCoord2xOES(s, t); }
ONUT_FORCE_INLINE void  onutTexCoord2xvOES(const GLfixed * coords) { onutGL.TexCoord2xvOES(coords); }
ONUT_FORCE_INLINE void  onutTexCoord3bOES(GLbyte s, GLbyte t, GLbyte r) { onutGL.TexCoord3bOES(s, t, r); }
ONUT_FORCE_INLINE void  onutTexCoord3bvOES(const GLbyte * coords) { onutGL.TexCoord3bvOES(coords); }
ONUT_FORCE_INLINE void  onutTexCoord3d(GLdouble s, GLdouble t, GLdouble r) { onutGL.TexCoord3d(s, t, r); }
ONUT_FORCE_INLINE void  onutTexCoord3dv(const GLdouble * v) { onutGL.TexCoord3dv(v); }
ONUT_FORCE_INLINE void  onutTexCoord3f(GLfloat s, GLfloat t, GLfloat r) { onutGL.TexCoord3f(s, t, r); }
ONUT_FORCE_INLINE void  onutTexCoord3fv(const GLfloat * v) { onutGL.TexCoord3fv(v); }
ONUT_FORCE_INLINE void  onutTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r) { onutGL.TexCoord3hNV(s, t, r); }
ONUT_FORCE_INLINE void  onutTexCoord3hvNV(const GLhalfNV * v) { onutGL.TexCoord3hvNV(v); }
ONUT_FORCE_INLINE void  onutTexCoord3i(GLint s, GLint t, GLint r) { onutGL.TexCoord3i(s, t, r); }
ONUT_FORCE_INLINE void  onutTexCoord3iv(const GLint * v) { onutGL.TexCoord3iv(v); }
ONUT_FORCE_INLINE void  onutTexCoord3s(GLshort s, GLshort t, GLshort r) { onutGL.TexCoord3s(s, t, r); }
ONUT_FORCE_INLINE void  onutTexCoord3sv(const GLshort * v) { onutGL.TexCoord3sv(v); }
ONUT_FORCE_INLINE void  onutTexCoord3xOES(GLfixed s, GLfixed t, GLfixed r) { onutGL.TexCoord3xOES(s, t, r); }
ONUT_FORCE_INLINE void  onutTexCoord3xvOES(const GLfixed * coords) { onutGL.TexCoord3xvOES(coords); }
ONUT_FORCE_INLINE void  onutTexCoord4bOES(GLbyte s, GLbyte t, GLbyte r, GLbyte q) { onutGL.TexCoord4bOES(s, t, r, q); }
ONUT_FORCE_INLINE void  onutTexCoord4bvOES(const GLbyte * coords) { onutGL.TexCoord4bvOES(coords); }
ONUT_FORCE_INLINE void  onutTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q) { onutGL.TexCoord4d(s, t, r, q); }
ONUT_FORCE_INLINE void  onutTexCoord4dv(const GLdouble * v) { onutGL.TexCoord4dv(v); }
ONUT_FORCE_INLINE void  onutTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q) { onutGL.TexCoord4f(s, t, r, q); }
ONUT_FORCE_INLINE void  onutTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { onutGL.TexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w); }
ONUT_FORCE_INLINE void  onutTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { onutGL.TexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v); }
ONUT_FORCE_INLINE void  onutTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { onutGL.TexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w); }
ONUT_FORCE_INLINE void  onutTexCoord4fVertex4fvSUN(const GLfloat * tc, const GLfloat * v) { onutGL.TexCoord4fVertex4fvSUN(tc, v); }
ONUT_FORCE_INLINE void  onutTexCoord4fv(const GLfloat * v) { onutGL.TexCoord4fv(v); }
ONUT_FORCE_INLINE void  onutTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) { onutGL.TexCoord4hNV(s, t, r, q); }
ONUT_FORCE_INLINE void  onutTexCoord4hvNV(const GLhalfNV * v) { onutGL.TexCoord4hvNV(v); }
ONUT_FORCE_INLINE void  onutTexCoord4i(GLint s, GLint t, GLint r, GLint q) { onutGL.TexCoord4i(s, t, r, q); }
ONUT_FORCE_INLINE void  onutTexCoord4iv(const GLint * v) { onutGL.TexCoord4iv(v); }
ONUT_FORCE_INLINE void  onutTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q) { onutGL.TexCoord4s(s, t, r, q); }
ONUT_FORCE_INLINE void  onutTexCoord4sv(const GLshort * v) { onutGL.TexCoord4sv(v); }
ONUT_FORCE_INLINE void  onutTexCoord4xOES(GLfixed s, GLfixed t, GLfixed r, GLfixed q) { onutGL.TexCoord4xOES(s, t, r, q); }
ONUT_FORCE_INLINE void  onutTexCoord4xvOES(const GLfixed * coords) { onutGL.TexCoord4xvOES(coords); }
ONUT_FORCE_INLINE void  onutTexCoordFormatNV(GLint size, GLenum type, GLsizei stride) { onutGL.TexCoordFormatNV(size, type, stride); }
ONUT_FORCE_INLINE void  onutTexCoordP1ui(GLenum type, GLuint coords) { onutGL.TexCoordP1ui(type, coords); }
ONUT_FORCE_INLINE void  onutTexCoordP1uiv(GLenum type, const GLuint * coords) { onutGL.TexCoordP1uiv(type, coords); }
ONUT_FORCE_INLINE void  onutTexCoordP2ui(GLenum type, GLuint coords) { onutGL.TexCoordP2ui(type, coords); }
ONUT_FORCE_INLINE void  onutTexCoordP2uiv(GLenum type, const GLuint * coords) { onutGL.TexCoordP2uiv(type, coords); }
ONUT_FORCE_INLINE void  onutTexCoordP3ui(GLenum type, GLuint coords) { onutGL.TexCoordP3ui(type, coords); }
ONUT_FORCE_INLINE void  onutTexCoordP3uiv(GLenum type, const GLuint * coords) { onutGL.TexCoordP3uiv(type, coords); }
ONUT_FORCE_INLINE void  onutTexCoordP4ui(GLenum type, GLuint coords) { onutGL.TexCoordP4ui(type, coords); }
ONUT_FORCE_INLINE void  onutTexCoordP4uiv(GLenum type, const GLuint * coords) { onutGL.TexCoordP4uiv(type, coords); }
ONUT_FORCE_INLINE void  onutTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { onutGL.TexCoordPointer(size, type, stride, pointer); }
ONUT_FORCE_INLINE void  onutTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) { onutGL.TexCoordPointerEXT(size, type, stride, count, pointer); }
ONUT_FORCE_INLINE void  onutTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { onutGL.TexCoordPointerListIBM(size, type, stride, pointer, ptrstride); }
ONUT_FORCE_INLINE void  onutTexCoordPointervINTEL(GLint size, GLenum type, const void ** pointer) { onutGL.TexCoordPointervINTEL(size, type, pointer); }
ONUT_FORCE_INLINE void  onutTexEnvf(GLenum target, GLenum pname, GLfloat param) { onutGL.TexEnvf(target, pname, param); }
ONUT_FORCE_INLINE void  onutTexEnvfv(GLenum target, GLenum pname, const GLfloat * params) { onutGL.TexEnvfv(target, pname, params); }
ONUT_FORCE_INLINE void  onutTexEnvi(GLenum target, GLenum pname, GLint param) { onutGL.TexEnvi(target, pname, param); }
ONUT_FORCE_INLINE void  onutTexEnviv(GLenum target, GLenum pname, const GLint * params) { onutGL.TexEnviv(target, pname, params); }
ONUT_FORCE_INLINE void  onutTexEnvx(GLenum target, GLenum pname, GLfixed param) { onutGL.TexEnvx(target, pname, param); }
ONUT_FORCE_INLINE void  onutTexEnvxOES(GLenum target, GLenum pname, GLfixed param) { onutGL.TexEnvxOES(target, pname, param); }
ONUT_FORCE_INLINE void  onutTexEnvxv(GLenum target, GLenum pname, const GLfixed * params) { onutGL.TexEnvxv(target, pname, params); }
ONUT_FORCE_INLINE void  onutTexEnvxvOES(GLenum target, GLenum pname, const GLfixed * params) { onutGL.TexEnvxvOES(target, pname, params); }
ONUT_FORCE_INLINE void  onutTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat * weights) { onutGL.TexFilterFuncSGIS(target, filter, n, weights); }
ONUT_FORCE_INLINE void  onutTexGend(GLenum coord, GLenum pname, GLdouble param) { onutGL.TexGend(coord, pname, param); }
ONUT_FORCE_INLINE void  onutTexGendv(GLenum coord, GLenum pname, const GLdouble * params) { onutGL.TexGendv(coord, pname, params); }
ONUT_FORCE_INLINE void  onutTexGenf(GLenum coord, GLenum pname, GLfloat param) { onutGL.TexGenf(coord, pname, param); }
ONUT_FORCE_INLINE void  onutTexGenfOES(GLenum coord, GLenum pname, GLfloat param) { onutGL.TexGenfOES(coord, pname, param); }
ONUT_FORCE_INLINE void  onutTexGenfv(GLenum coord, GLenum pname, const GLfloat * params) { onutGL.TexGenfv(coord, pname, params); }
ONUT_FORCE_INLINE void  onutTexGenfvOES(GLenum coord, GLenum pname, const GLfloat * params) { onutGL.TexGenfvOES(coord, pname, params); }
ONUT_FORCE_INLINE void  onutTexGeni(GLenum coord, GLenum pname, GLint param) { onutGL.TexGeni(coord, pname, param); }
ONUT_FORCE_INLINE void  onutTexGeniOES(GLenum coord, GLenum pname, GLint param) { onutGL.TexGeniOES(coord, pname, param); }
ONUT_FORCE_INLINE void  onutTexGeniv(GLenum coord, GLenum pname, const GLint * params) { onutGL.TexGeniv(coord, pname, params); }
ONUT_FORCE_INLINE void  onutTexGenivOES(GLenum coord, GLenum pname, const GLint * params) { onutGL.TexGenivOES(coord, pname, params); }
ONUT_FORCE_INLINE void  onutTexGenxOES(GLenum coord, GLenum pname, GLfixed param) { onutGL.TexGenxOES(coord, pname, param); }
ONUT_FORCE_INLINE void  onutTexGenxvOES(GLenum coord, GLenum pname, const GLfixed * params) { onutGL.TexGenxvOES(coord, pname, params); }
ONUT_FORCE_INLINE void  onutTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) { onutGL.TexImage1D(target, level, internalformat, width, border, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) { onutGL.TexImage2D(target, level, internalformat, width, height, border, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { onutGL.TexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations); }
ONUT_FORCE_INLINE void  onutTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { onutGL.TexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations); }
ONUT_FORCE_INLINE void  onutTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { onutGL.TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { onutGL.TexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { onutGL.TexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
ONUT_FORCE_INLINE void  onutTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { onutGL.TexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations); }
ONUT_FORCE_INLINE void  onutTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { onutGL.TexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void * pixels) { onutGL.TexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { onutGL.TexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit); }
ONUT_FORCE_INLINE void  onutTexPageCommitmentEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { onutGL.TexPageCommitmentEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, commit); }
ONUT_FORCE_INLINE void  onutTexParameterIiv(GLenum target, GLenum pname, const GLint * params) { onutGL.TexParameterIiv(target, pname, params); }
ONUT_FORCE_INLINE void  onutTexParameterIivEXT(GLenum target, GLenum pname, const GLint * params) { onutGL.TexParameterIivEXT(target, pname, params); }
ONUT_FORCE_INLINE void  onutTexParameterIivOES(GLenum target, GLenum pname, const GLint * params) { onutGL.TexParameterIivOES(target, pname, params); }
ONUT_FORCE_INLINE void  onutTexParameterIuiv(GLenum target, GLenum pname, const GLuint * params) { onutGL.TexParameterIuiv(target, pname, params); }
ONUT_FORCE_INLINE void  onutTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint * params) { onutGL.TexParameterIuivEXT(target, pname, params); }
ONUT_FORCE_INLINE void  onutTexParameterIuivOES(GLenum target, GLenum pname, const GLuint * params) { onutGL.TexParameterIuivOES(target, pname, params); }
ONUT_FORCE_INLINE void  onutTexParameterf(GLenum target, GLenum pname, GLfloat param) { onutGL.TexParameterf(target, pname, param); }
ONUT_FORCE_INLINE void  onutTexParameterfv(GLenum target, GLenum pname, const GLfloat * params) { onutGL.TexParameterfv(target, pname, params); }
ONUT_FORCE_INLINE void  onutTexParameteri(GLenum target, GLenum pname, GLint param) { onutGL.TexParameteri(target, pname, param); }
ONUT_FORCE_INLINE void  onutTexParameteriv(GLenum target, GLenum pname, const GLint * params) { onutGL.TexParameteriv(target, pname, params); }
ONUT_FORCE_INLINE void  onutTexParameterx(GLenum target, GLenum pname, GLfixed param) { onutGL.TexParameterx(target, pname, param); }
ONUT_FORCE_INLINE void  onutTexParameterxOES(GLenum target, GLenum pname, GLfixed param) { onutGL.TexParameterxOES(target, pname, param); }
ONUT_FORCE_INLINE void  onutTexParameterxv(GLenum target, GLenum pname, const GLfixed * params) { onutGL.TexParameterxv(target, pname, params); }
ONUT_FORCE_INLINE void  onutTexParameterxvOES(GLenum target, GLenum pname, const GLfixed * params) { onutGL.TexParameterxvOES(target, pname, params); }
ONUT_FORCE_INLINE void  onutTexRenderbufferNV(GLenum target, GLuint renderbuffer) { onutGL.TexRenderbufferNV(target, renderbuffer); }
ONUT_FORCE_INLINE void  onutTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { onutGL.TexStorage1D(target, levels, internalformat, width); }
ONUT_FORCE_INLINE void  onutTexStorage1DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { onutGL.TexStorage1DEXT(target, levels, internalformat, width); }
ONUT_FORCE_INLINE void  onutTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { onutGL.TexStorage2D(target, levels, internalformat, width, height); }
ONUT_FORCE_INLINE void  onutTexStorage2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { onutGL.TexStorage2DEXT(target, levels, internalformat, width, height); }
ONUT_FORCE_INLINE void  onutTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { onutGL.TexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations); }
ONUT_FORCE_INLINE void  onutTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { onutGL.TexStorage3D(target, levels, internalformat, width, height, depth); }
ONUT_FORCE_INLINE void  onutTexStorage3DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { onutGL.TexStorage3DEXT(target, levels, internalformat, width, height, depth); }
ONUT_FORCE_INLINE void  onutTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { onutGL.TexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
ONUT_FORCE_INLINE void  onutTexStorage3DMultisampleOES(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { onutGL.TexStorage3DMultisampleOES(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
ONUT_FORCE_INLINE void  onutTexStorageMem1DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) { onutGL.TexStorageMem1DEXT(target, levels, internalFormat, width, memory, offset); }
ONUT_FORCE_INLINE void  onutTexStorageMem2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) { onutGL.TexStorageMem2DEXT(target, levels, internalFormat, width, height, memory, offset); }
ONUT_FORCE_INLINE void  onutTexStorageMem2DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { onutGL.TexStorageMem2DMultisampleEXT(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset); }
ONUT_FORCE_INLINE void  onutTexStorageMem3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) { onutGL.TexStorageMem3DEXT(target, levels, internalFormat, width, height, depth, memory, offset); }
ONUT_FORCE_INLINE void  onutTexStorageMem3DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { onutGL.TexStorageMem3DMultisampleEXT(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset); }
ONUT_FORCE_INLINE void  onutTexStorageSparseAMD(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) { onutGL.TexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags); }
ONUT_FORCE_INLINE void  onutTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { onutGL.TexSubImage1D(target, level, xoffset, width, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { onutGL.TexSubImage1DEXT(target, level, xoffset, width, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { onutGL.TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { onutGL.TexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { onutGL.TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { onutGL.TexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { onutGL.TexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void * pixels) { onutGL.TexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTextureBarrier(void) { onutGL.TextureBarrier(); }
ONUT_FORCE_INLINE void  onutTextureBarrierNV(void) { onutGL.TextureBarrierNV(); }
ONUT_FORCE_INLINE void  onutTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer) { onutGL.TextureBuffer(texture, internalformat, buffer); }
ONUT_FORCE_INLINE void  onutTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer) { onutGL.TextureBufferEXT(texture, target, internalformat, buffer); }
ONUT_FORCE_INLINE void  onutTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { onutGL.TextureBufferRange(texture, internalformat, buffer, offset, size); }
ONUT_FORCE_INLINE void  onutTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { onutGL.TextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size); }
ONUT_FORCE_INLINE void  onutTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) { onutGL.TextureColorMaskSGIS(red, green, blue, alpha); }
ONUT_FORCE_INLINE void  onutTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) { onutGL.TextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) { onutGL.TextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { onutGL.TextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations); }
ONUT_FORCE_INLINE void  onutTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { onutGL.TextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations); }
ONUT_FORCE_INLINE void  onutTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { onutGL.TextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { onutGL.TextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations); }
ONUT_FORCE_INLINE void  onutTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { onutGL.TextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations); }
ONUT_FORCE_INLINE void  onutTextureLightEXT(GLenum pname) { onutGL.TextureLightEXT(pname); }
ONUT_FORCE_INLINE void  onutTextureMaterialEXT(GLenum face, GLenum mode) { onutGL.TextureMaterialEXT(face, mode); }
ONUT_FORCE_INLINE void  onutTextureNormalEXT(GLenum mode) { onutGL.TextureNormalEXT(mode); }
ONUT_FORCE_INLINE void  onutTexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { onutGL.TexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit); }
ONUT_FORCE_INLINE void  onutTextureParameterIiv(GLuint texture, GLenum pname, const GLint * params) { onutGL.TextureParameterIiv(texture, pname, params); }
ONUT_FORCE_INLINE void  onutTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint * params) { onutGL.TextureParameterIivEXT(texture, target, pname, params); }
ONUT_FORCE_INLINE void  onutTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint * params) { onutGL.TextureParameterIuiv(texture, pname, params); }
ONUT_FORCE_INLINE void  onutTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint * params) { onutGL.TextureParameterIuivEXT(texture, target, pname, params); }
ONUT_FORCE_INLINE void  onutTextureParameterf(GLuint texture, GLenum pname, GLfloat param) { onutGL.TextureParameterf(texture, pname, param); }
ONUT_FORCE_INLINE void  onutTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param) { onutGL.TextureParameterfEXT(texture, target, pname, param); }
ONUT_FORCE_INLINE void  onutTextureParameterfv(GLuint texture, GLenum pname, const GLfloat * param) { onutGL.TextureParameterfv(texture, pname, param); }
ONUT_FORCE_INLINE void  onutTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat * params) { onutGL.TextureParameterfvEXT(texture, target, pname, params); }
ONUT_FORCE_INLINE void  onutTextureParameteri(GLuint texture, GLenum pname, GLint param) { onutGL.TextureParameteri(texture, pname, param); }
ONUT_FORCE_INLINE void  onutTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param) { onutGL.TextureParameteriEXT(texture, target, pname, param); }
ONUT_FORCE_INLINE void  onutTextureParameteriv(GLuint texture, GLenum pname, const GLint * param) { onutGL.TextureParameteriv(texture, pname, param); }
ONUT_FORCE_INLINE void  onutTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint * params) { onutGL.TextureParameterivEXT(texture, target, pname, params); }
ONUT_FORCE_INLINE void  onutTextureRangeAPPLE(GLenum target, GLsizei length, const void * pointer) { onutGL.TextureRangeAPPLE(target, length, pointer); }
ONUT_FORCE_INLINE void  onutTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer) { onutGL.TextureRenderbufferEXT(texture, target, renderbuffer); }
ONUT_FORCE_INLINE void  onutTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) { onutGL.TextureStorage1D(texture, levels, internalformat, width); }
ONUT_FORCE_INLINE void  onutTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { onutGL.TextureStorage1DEXT(texture, target, levels, internalformat, width); }
ONUT_FORCE_INLINE void  onutTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { onutGL.TextureStorage2D(texture, levels, internalformat, width, height); }
ONUT_FORCE_INLINE void  onutTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { onutGL.TextureStorage2DEXT(texture, target, levels, internalformat, width, height); }
ONUT_FORCE_INLINE void  onutTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { onutGL.TextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations); }
ONUT_FORCE_INLINE void  onutTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { onutGL.TextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations); }
ONUT_FORCE_INLINE void  onutTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { onutGL.TextureStorage3D(texture, levels, internalformat, width, height, depth); }
ONUT_FORCE_INLINE void  onutTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { onutGL.TextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth); }
ONUT_FORCE_INLINE void  onutTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { onutGL.TextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations); }
ONUT_FORCE_INLINE void  onutTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { onutGL.TextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations); }
ONUT_FORCE_INLINE void  onutTextureStorageMem1DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) { onutGL.TextureStorageMem1DEXT(texture, levels, internalFormat, width, memory, offset); }
ONUT_FORCE_INLINE void  onutTextureStorageMem2DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) { onutGL.TextureStorageMem2DEXT(texture, levels, internalFormat, width, height, memory, offset); }
ONUT_FORCE_INLINE void  onutTextureStorageMem2DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { onutGL.TextureStorageMem2DMultisampleEXT(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset); }
ONUT_FORCE_INLINE void  onutTextureStorageMem3DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) { onutGL.TextureStorageMem3DEXT(texture, levels, internalFormat, width, height, depth, memory, offset); }
ONUT_FORCE_INLINE void  onutTextureStorageMem3DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { onutGL.TextureStorageMem3DMultisampleEXT(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset); }
ONUT_FORCE_INLINE void  onutTextureStorageSparseAMD(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) { onutGL.TextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags); }
ONUT_FORCE_INLINE void  onutTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { onutGL.TextureSubImage1D(texture, level, xoffset, width, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { onutGL.TextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { onutGL.TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { onutGL.TextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { onutGL.TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { onutGL.TextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
ONUT_FORCE_INLINE void  onutTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { onutGL.TextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); }
ONUT_FORCE_INLINE void  onutTextureViewEXT(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { onutGL.TextureViewEXT(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); }
ONUT_FORCE_INLINE void  onutTextureViewOES(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { onutGL.TextureViewOES(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); }
ONUT_FORCE_INLINE void  onutTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform) { onutGL.TrackMatrixNV(target, address, matrix, transform); }
ONUT_FORCE_INLINE void  onutTransformFeedbackAttribsNV(GLsizei count, const GLint * attribs, GLenum bufferMode) { onutGL.TransformFeedbackAttribsNV(count, attribs, bufferMode); }
ONUT_FORCE_INLINE void  onutTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer) { onutGL.TransformFeedbackBufferBase(xfb, index, buffer); }
ONUT_FORCE_INLINE void  onutTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { onutGL.TransformFeedbackBufferRange(xfb, index, buffer, offset, size); }
ONUT_FORCE_INLINE void  onutTransformFeedbackStreamAttribsNV(GLsizei count, const GLint * attribs, GLsizei nbuffers, const GLint * bufstreams, GLenum bufferMode) { onutGL.TransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode); }
ONUT_FORCE_INLINE void  onutTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode) { onutGL.TransformFeedbackVaryings(program, count, varyings, bufferMode); }
ONUT_FORCE_INLINE void  onutTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode) { onutGL.TransformFeedbackVaryingsEXT(program, count, varyings, bufferMode); }
ONUT_FORCE_INLINE void  onutTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint * locations, GLenum bufferMode) { onutGL.TransformFeedbackVaryingsNV(program, count, locations, bufferMode); }
ONUT_FORCE_INLINE void  onutTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat * transformValues) { onutGL.TransformPathNV(resultPath, srcPath, transformType, transformValues); }
ONUT_FORCE_INLINE void  onutTranslated(GLdouble x, GLdouble y, GLdouble z) { onutGL.Translated(x, y, z); }
ONUT_FORCE_INLINE void  onutTranslatef(GLfloat x, GLfloat y, GLfloat z) { onutGL.Translatef(x, y, z); }
ONUT_FORCE_INLINE void  onutTranslatex(GLfixed x, GLfixed y, GLfixed z) { onutGL.Translatex(x, y, z); }
ONUT_FORCE_INLINE void  onutTranslatexOES(GLfixed x, GLfixed y, GLfixed z) { onutGL.TranslatexOES(x, y, z); }
ONUT_FORCE_INLINE void  onutUniform1d(GLint location, GLdouble x) { onutGL.Uniform1d(location, x); }
ONUT_FORCE_INLINE void  onutUniform1dv(GLint location, GLsizei count, const GLdouble * value) { onutGL.Uniform1dv(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform1f(GLint location, GLfloat v0) { onutGL.Uniform1f(location, v0); }
ONUT_FORCE_INLINE void  onutUniform1fARB(GLint location, GLfloat v0) { onutGL.Uniform1fARB(location, v0); }
ONUT_FORCE_INLINE void  onutUniform1fv(GLint location, GLsizei count, const GLfloat * value) { onutGL.Uniform1fv(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform1fvARB(GLint location, GLsizei count, const GLfloat * value) { onutGL.Uniform1fvARB(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform1i(GLint location, GLint v0) { onutGL.Uniform1i(location, v0); }
ONUT_FORCE_INLINE void  onutUniform1i64ARB(GLint location, GLint64 x) { onutGL.Uniform1i64ARB(location, x); }
ONUT_FORCE_INLINE void  onutUniform1i64NV(GLint location, GLint64EXT x) { onutGL.Uniform1i64NV(location, x); }
ONUT_FORCE_INLINE void  onutUniform1i64vARB(GLint location, GLsizei count, const GLint64 * value) { onutGL.Uniform1i64vARB(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT * value) { onutGL.Uniform1i64vNV(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform1iARB(GLint location, GLint v0) { onutGL.Uniform1iARB(location, v0); }
ONUT_FORCE_INLINE void  onutUniform1iv(GLint location, GLsizei count, const GLint * value) { onutGL.Uniform1iv(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform1ivARB(GLint location, GLsizei count, const GLint * value) { onutGL.Uniform1ivARB(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform1ui(GLint location, GLuint v0) { onutGL.Uniform1ui(location, v0); }
ONUT_FORCE_INLINE void  onutUniform1ui64ARB(GLint location, GLuint64 x) { onutGL.Uniform1ui64ARB(location, x); }
ONUT_FORCE_INLINE void  onutUniform1ui64NV(GLint location, GLuint64EXT x) { onutGL.Uniform1ui64NV(location, x); }
ONUT_FORCE_INLINE void  onutUniform1ui64vARB(GLint location, GLsizei count, const GLuint64 * value) { onutGL.Uniform1ui64vARB(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { onutGL.Uniform1ui64vNV(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform1uiEXT(GLint location, GLuint v0) { onutGL.Uniform1uiEXT(location, v0); }
ONUT_FORCE_INLINE void  onutUniform1uiv(GLint location, GLsizei count, const GLuint * value) { onutGL.Uniform1uiv(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform1uivEXT(GLint location, GLsizei count, const GLuint * value) { onutGL.Uniform1uivEXT(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform2d(GLint location, GLdouble x, GLdouble y) { onutGL.Uniform2d(location, x, y); }
ONUT_FORCE_INLINE void  onutUniform2dv(GLint location, GLsizei count, const GLdouble * value) { onutGL.Uniform2dv(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform2f(GLint location, GLfloat v0, GLfloat v1) { onutGL.Uniform2f(location, v0, v1); }
ONUT_FORCE_INLINE void  onutUniform2fARB(GLint location, GLfloat v0, GLfloat v1) { onutGL.Uniform2fARB(location, v0, v1); }
ONUT_FORCE_INLINE void  onutUniform2fv(GLint location, GLsizei count, const GLfloat * value) { onutGL.Uniform2fv(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform2fvARB(GLint location, GLsizei count, const GLfloat * value) { onutGL.Uniform2fvARB(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform2i(GLint location, GLint v0, GLint v1) { onutGL.Uniform2i(location, v0, v1); }
ONUT_FORCE_INLINE void  onutUniform2i64ARB(GLint location, GLint64 x, GLint64 y) { onutGL.Uniform2i64ARB(location, x, y); }
ONUT_FORCE_INLINE void  onutUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y) { onutGL.Uniform2i64NV(location, x, y); }
ONUT_FORCE_INLINE void  onutUniform2i64vARB(GLint location, GLsizei count, const GLint64 * value) { onutGL.Uniform2i64vARB(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT * value) { onutGL.Uniform2i64vNV(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform2iARB(GLint location, GLint v0, GLint v1) { onutGL.Uniform2iARB(location, v0, v1); }
ONUT_FORCE_INLINE void  onutUniform2iv(GLint location, GLsizei count, const GLint * value) { onutGL.Uniform2iv(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform2ivARB(GLint location, GLsizei count, const GLint * value) { onutGL.Uniform2ivARB(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform2ui(GLint location, GLuint v0, GLuint v1) { onutGL.Uniform2ui(location, v0, v1); }
ONUT_FORCE_INLINE void  onutUniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y) { onutGL.Uniform2ui64ARB(location, x, y); }
ONUT_FORCE_INLINE void  onutUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y) { onutGL.Uniform2ui64NV(location, x, y); }
ONUT_FORCE_INLINE void  onutUniform2ui64vARB(GLint location, GLsizei count, const GLuint64 * value) { onutGL.Uniform2ui64vARB(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { onutGL.Uniform2ui64vNV(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform2uiEXT(GLint location, GLuint v0, GLuint v1) { onutGL.Uniform2uiEXT(location, v0, v1); }
ONUT_FORCE_INLINE void  onutUniform2uiv(GLint location, GLsizei count, const GLuint * value) { onutGL.Uniform2uiv(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform2uivEXT(GLint location, GLsizei count, const GLuint * value) { onutGL.Uniform2uivEXT(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z) { onutGL.Uniform3d(location, x, y, z); }
ONUT_FORCE_INLINE void  onutUniform3dv(GLint location, GLsizei count, const GLdouble * value) { onutGL.Uniform3dv(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { onutGL.Uniform3f(location, v0, v1, v2); }
ONUT_FORCE_INLINE void  onutUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { onutGL.Uniform3fARB(location, v0, v1, v2); }
ONUT_FORCE_INLINE void  onutUniform3fv(GLint location, GLsizei count, const GLfloat * value) { onutGL.Uniform3fv(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform3fvARB(GLint location, GLsizei count, const GLfloat * value) { onutGL.Uniform3fvARB(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform3i(GLint location, GLint v0, GLint v1, GLint v2) { onutGL.Uniform3i(location, v0, v1, v2); }
ONUT_FORCE_INLINE void  onutUniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z) { onutGL.Uniform3i64ARB(location, x, y, z); }
ONUT_FORCE_INLINE void  onutUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) { onutGL.Uniform3i64NV(location, x, y, z); }
ONUT_FORCE_INLINE void  onutUniform3i64vARB(GLint location, GLsizei count, const GLint64 * value) { onutGL.Uniform3i64vARB(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT * value) { onutGL.Uniform3i64vNV(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2) { onutGL.Uniform3iARB(location, v0, v1, v2); }
ONUT_FORCE_INLINE void  onutUniform3iv(GLint location, GLsizei count, const GLint * value) { onutGL.Uniform3iv(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform3ivARB(GLint location, GLsizei count, const GLint * value) { onutGL.Uniform3ivARB(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) { onutGL.Uniform3ui(location, v0, v1, v2); }
ONUT_FORCE_INLINE void  onutUniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z) { onutGL.Uniform3ui64ARB(location, x, y, z); }
ONUT_FORCE_INLINE void  onutUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { onutGL.Uniform3ui64NV(location, x, y, z); }
ONUT_FORCE_INLINE void  onutUniform3ui64vARB(GLint location, GLsizei count, const GLuint64 * value) { onutGL.Uniform3ui64vARB(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { onutGL.Uniform3ui64vNV(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2) { onutGL.Uniform3uiEXT(location, v0, v1, v2); }
ONUT_FORCE_INLINE void  onutUniform3uiv(GLint location, GLsizei count, const GLuint * value) { onutGL.Uniform3uiv(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform3uivEXT(GLint location, GLsizei count, const GLuint * value) { onutGL.Uniform3uivEXT(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { onutGL.Uniform4d(location, x, y, z, w); }
ONUT_FORCE_INLINE void  onutUniform4dv(GLint location, GLsizei count, const GLdouble * value) { onutGL.Uniform4dv(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { onutGL.Uniform4f(location, v0, v1, v2, v3); }
ONUT_FORCE_INLINE void  onutUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { onutGL.Uniform4fARB(location, v0, v1, v2, v3); }
ONUT_FORCE_INLINE void  onutUniform4fv(GLint location, GLsizei count, const GLfloat * value) { onutGL.Uniform4fv(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform4fvARB(GLint location, GLsizei count, const GLfloat * value) { onutGL.Uniform4fvARB(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { onutGL.Uniform4i(location, v0, v1, v2, v3); }
ONUT_FORCE_INLINE void  onutUniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) { onutGL.Uniform4i64ARB(location, x, y, z, w); }
ONUT_FORCE_INLINE void  onutUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { onutGL.Uniform4i64NV(location, x, y, z, w); }
ONUT_FORCE_INLINE void  onutUniform4i64vARB(GLint location, GLsizei count, const GLint64 * value) { onutGL.Uniform4i64vARB(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT * value) { onutGL.Uniform4i64vNV(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { onutGL.Uniform4iARB(location, v0, v1, v2, v3); }
ONUT_FORCE_INLINE void  onutUniform4iv(GLint location, GLsizei count, const GLint * value) { onutGL.Uniform4iv(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform4ivARB(GLint location, GLsizei count, const GLint * value) { onutGL.Uniform4ivARB(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { onutGL.Uniform4ui(location, v0, v1, v2, v3); }
ONUT_FORCE_INLINE void  onutUniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) { onutGL.Uniform4ui64ARB(location, x, y, z, w); }
ONUT_FORCE_INLINE void  onutUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { onutGL.Uniform4ui64NV(location, x, y, z, w); }
ONUT_FORCE_INLINE void  onutUniform4ui64vARB(GLint location, GLsizei count, const GLuint64 * value) { onutGL.Uniform4ui64vARB(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { onutGL.Uniform4ui64vNV(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { onutGL.Uniform4uiEXT(location, v0, v1, v2, v3); }
ONUT_FORCE_INLINE void  onutUniform4uiv(GLint location, GLsizei count, const GLuint * value) { onutGL.Uniform4uiv(location, count, value); }
ONUT_FORCE_INLINE void  onutUniform4uivEXT(GLint location, GLsizei count, const GLuint * value) { onutGL.Uniform4uivEXT(location, count, value); }
ONUT_FORCE_INLINE void  onutUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) { onutGL.UniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding); }
ONUT_FORCE_INLINE void  onutUniformBufferEXT(GLuint program, GLint location, GLuint buffer) { onutGL.UniformBufferEXT(program, location, buffer); }
ONUT_FORCE_INLINE void  onutUniformHandleui64ARB(GLint location, GLuint64 value) { onutGL.UniformHandleui64ARB(location, value); }
ONUT_FORCE_INLINE void  onutUniformHandleui64IMG(GLint location, GLuint64 value) { onutGL.UniformHandleui64IMG(location, value); }
ONUT_FORCE_INLINE void  onutUniformHandleui64NV(GLint location, GLuint64 value) { onutGL.UniformHandleui64NV(location, value); }
ONUT_FORCE_INLINE void  onutUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 * value) { onutGL.UniformHandleui64vARB(location, count, value); }
ONUT_FORCE_INLINE void  onutUniformHandleui64vIMG(GLint location, GLsizei count, const GLuint64 * value) { onutGL.UniformHandleui64vIMG(location, count, value); }
ONUT_FORCE_INLINE void  onutUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 * value) { onutGL.UniformHandleui64vNV(location, count, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.UniformMatrix2dv(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.UniformMatrix2fv(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.UniformMatrix2fvARB(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.UniformMatrix2x3dv(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.UniformMatrix2x3fv(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix2x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.UniformMatrix2x3fvNV(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.UniformMatrix2x4dv(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.UniformMatrix2x4fv(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix2x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.UniformMatrix2x4fvNV(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.UniformMatrix3dv(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.UniformMatrix3fv(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.UniformMatrix3fvARB(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.UniformMatrix3x2dv(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.UniformMatrix3x2fv(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix3x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.UniformMatrix3x2fvNV(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.UniformMatrix3x4dv(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.UniformMatrix3x4fv(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix3x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.UniformMatrix3x4fvNV(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.UniformMatrix4dv(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.UniformMatrix4fv(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.UniformMatrix4fvARB(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.UniformMatrix4x2dv(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.UniformMatrix4x2fv(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix4x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.UniformMatrix4x2fvNV(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { onutGL.UniformMatrix4x3dv(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.UniformMatrix4x3fv(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformMatrix4x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { onutGL.UniformMatrix4x3fvNV(location, count, transpose, value); }
ONUT_FORCE_INLINE void  onutUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint * indices) { onutGL.UniformSubroutinesuiv(shadertype, count, indices); }
ONUT_FORCE_INLINE void  onutUniformui64NV(GLint location, GLuint64EXT value) { onutGL.Uniformui64NV(location, value); }
ONUT_FORCE_INLINE void  onutUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { onutGL.Uniformui64vNV(location, count, value); }
ONUT_FORCE_INLINE void  onutUnlockArraysEXT(void) { onutGL.UnlockArraysEXT(); }
ONUT_FORCE_INLINE GLboolean onutUnmapBuffer(GLenum target) { return onutGL.UnmapBuffer(target); }
ONUT_FORCE_INLINE GLboolean onutUnmapBufferARB(GLenum target) { return onutGL.UnmapBufferARB(target); }
ONUT_FORCE_INLINE GLboolean onutUnmapBufferOES(GLenum target) { return onutGL.UnmapBufferOES(target); }
ONUT_FORCE_INLINE GLboolean onutUnmapNamedBuffer(GLuint buffer) { return onutGL.UnmapNamedBuffer(buffer); }
ONUT_FORCE_INLINE GLboolean onutUnmapNamedBufferEXT(GLuint buffer) { return onutGL.UnmapNamedBufferEXT(buffer); }
ONUT_FORCE_INLINE void  onutUnmapObjectBufferATI(GLuint buffer) { onutGL.UnmapObjectBufferATI(buffer); }
ONUT_FORCE_INLINE void  onutUnmapTexture2DINTEL(GLuint texture, GLint level) { onutGL.UnmapTexture2DINTEL(texture, level); }
ONUT_FORCE_INLINE void  onutUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const void * pointer, GLenum preserve) { onutGL.UpdateObjectBufferATI(buffer, offset, size, pointer, preserve); }
ONUT_FORCE_INLINE void  onutUseProgram(GLuint program) { onutGL.UseProgram(program); }
ONUT_FORCE_INLINE void  onutUseProgramObjectARB(GLhandleARB programObj) { onutGL.UseProgramObjectARB(programObj); }
ONUT_FORCE_INLINE void  onutUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program) { onutGL.UseProgramStages(pipeline, stages, program); }
ONUT_FORCE_INLINE void  onutUseProgramStagesEXT(GLuint pipeline, GLbitfield stages, GLuint program) { onutGL.UseProgramStagesEXT(pipeline, stages, program); }
ONUT_FORCE_INLINE void  onutUseShaderProgramEXT(GLenum type, GLuint program) { onutGL.UseShaderProgramEXT(type, program); }
ONUT_FORCE_INLINE void  onutVDPAUFiniNV(void) { onutGL.VDPAUFiniNV(); }
ONUT_FORCE_INLINE void  onutVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values) { onutGL.VDPAUGetSurfaceivNV(surface, pname, bufSize, length, values); }
ONUT_FORCE_INLINE void  onutVDPAUInitNV(const void * vdpDevice, const void * getProcAddress) { onutGL.VDPAUInitNV(vdpDevice, getProcAddress); }
ONUT_FORCE_INLINE GLboolean onutVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface) { return onutGL.VDPAUIsSurfaceNV(surface); }
ONUT_FORCE_INLINE void  onutVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV * surfaces) { onutGL.VDPAUMapSurfacesNV(numSurfaces, surfaces); }
ONUT_FORCE_INLINE GLvdpauSurfaceNV onutVDPAURegisterOutputSurfaceNV(const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames) { return onutGL.VDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames); }
ONUT_FORCE_INLINE GLvdpauSurfaceNV onutVDPAURegisterVideoSurfaceNV(const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames) { return onutGL.VDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames); }
ONUT_FORCE_INLINE void  onutVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access) { onutGL.VDPAUSurfaceAccessNV(surface, access); }
ONUT_FORCE_INLINE void  onutVDPAUUnmapSurfacesNV(GLsizei numSurface, const GLvdpauSurfaceNV * surfaces) { onutGL.VDPAUUnmapSurfacesNV(numSurface, surfaces); }
ONUT_FORCE_INLINE void  onutVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface) { onutGL.VDPAUUnregisterSurfaceNV(surface); }
ONUT_FORCE_INLINE void  onutValidateProgram(GLuint program) { onutGL.ValidateProgram(program); }
ONUT_FORCE_INLINE void  onutValidateProgramARB(GLhandleARB programObj) { onutGL.ValidateProgramARB(programObj); }
ONUT_FORCE_INLINE void  onutValidateProgramPipeline(GLuint pipeline) { onutGL.ValidateProgramPipeline(pipeline); }
ONUT_FORCE_INLINE void  onutValidateProgramPipelineEXT(GLuint pipeline) { onutGL.ValidateProgramPipelineEXT(pipeline); }
ONUT_FORCE_INLINE void  onutVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) { onutGL.VariantArrayObjectATI(id, type, stride, buffer, offset); }
ONUT_FORCE_INLINE void  onutVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const void * addr) { onutGL.VariantPointerEXT(id, type, stride, addr); }
ONUT_FORCE_INLINE void  onutVariantbvEXT(GLuint id, const GLbyte * addr) { onutGL.VariantbvEXT(id, addr); }
ONUT_FORCE_INLINE void  onutVariantdvEXT(GLuint id, const GLdouble * addr) { onutGL.VariantdvEXT(id, addr); }
ONUT_FORCE_INLINE void  onutVariantfvEXT(GLuint id, const GLfloat * addr) { onutGL.VariantfvEXT(id, addr); }
ONUT_FORCE_INLINE void  onutVariantivEXT(GLuint id, const GLint * addr) { onutGL.VariantivEXT(id, addr); }
ONUT_FORCE_INLINE void  onutVariantsvEXT(GLuint id, const GLshort * addr) { onutGL.VariantsvEXT(id, addr); }
ONUT_FORCE_INLINE void  onutVariantubvEXT(GLuint id, const GLubyte * addr) { onutGL.VariantubvEXT(id, addr); }
ONUT_FORCE_INLINE void  onutVariantuivEXT(GLuint id, const GLuint * addr) { onutGL.VariantuivEXT(id, addr); }
ONUT_FORCE_INLINE void  onutVariantusvEXT(GLuint id, const GLushort * addr) { onutGL.VariantusvEXT(id, addr); }
ONUT_FORCE_INLINE void  onutVertex2bOES(GLbyte x, GLbyte y) { onutGL.Vertex2bOES(x, y); }
ONUT_FORCE_INLINE void  onutVertex2bvOES(const GLbyte * coords) { onutGL.Vertex2bvOES(coords); }
ONUT_FORCE_INLINE void  onutVertex2d(GLdouble x, GLdouble y) { onutGL.Vertex2d(x, y); }
ONUT_FORCE_INLINE void  onutVertex2dv(const GLdouble * v) { onutGL.Vertex2dv(v); }
ONUT_FORCE_INLINE void  onutVertex2f(GLfloat x, GLfloat y) { onutGL.Vertex2f(x, y); }
ONUT_FORCE_INLINE void  onutVertex2fv(const GLfloat * v) { onutGL.Vertex2fv(v); }
ONUT_FORCE_INLINE void  onutVertex2hNV(GLhalfNV x, GLhalfNV y) { onutGL.Vertex2hNV(x, y); }
ONUT_FORCE_INLINE void  onutVertex2hvNV(const GLhalfNV * v) { onutGL.Vertex2hvNV(v); }
ONUT_FORCE_INLINE void  onutVertex2i(GLint x, GLint y) { onutGL.Vertex2i(x, y); }
ONUT_FORCE_INLINE void  onutVertex2iv(const GLint * v) { onutGL.Vertex2iv(v); }
ONUT_FORCE_INLINE void  onutVertex2s(GLshort x, GLshort y) { onutGL.Vertex2s(x, y); }
ONUT_FORCE_INLINE void  onutVertex2sv(const GLshort * v) { onutGL.Vertex2sv(v); }
ONUT_FORCE_INLINE void  onutVertex2xOES(GLfixed x) { onutGL.Vertex2xOES(x); }
ONUT_FORCE_INLINE void  onutVertex2xvOES(const GLfixed * coords) { onutGL.Vertex2xvOES(coords); }
ONUT_FORCE_INLINE void  onutVertex3bOES(GLbyte x, GLbyte y, GLbyte z) { onutGL.Vertex3bOES(x, y, z); }
ONUT_FORCE_INLINE void  onutVertex3bvOES(const GLbyte * coords) { onutGL.Vertex3bvOES(coords); }
ONUT_FORCE_INLINE void  onutVertex3d(GLdouble x, GLdouble y, GLdouble z) { onutGL.Vertex3d(x, y, z); }
ONUT_FORCE_INLINE void  onutVertex3dv(const GLdouble * v) { onutGL.Vertex3dv(v); }
ONUT_FORCE_INLINE void  onutVertex3f(GLfloat x, GLfloat y, GLfloat z) { onutGL.Vertex3f(x, y, z); }
ONUT_FORCE_INLINE void  onutVertex3fv(const GLfloat * v) { onutGL.Vertex3fv(v); }
ONUT_FORCE_INLINE void  onutVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z) { onutGL.Vertex3hNV(x, y, z); }
ONUT_FORCE_INLINE void  onutVertex3hvNV(const GLhalfNV * v) { onutGL.Vertex3hvNV(v); }
ONUT_FORCE_INLINE void  onutVertex3i(GLint x, GLint y, GLint z) { onutGL.Vertex3i(x, y, z); }
ONUT_FORCE_INLINE void  onutVertex3iv(const GLint * v) { onutGL.Vertex3iv(v); }
ONUT_FORCE_INLINE void  onutVertex3s(GLshort x, GLshort y, GLshort z) { onutGL.Vertex3s(x, y, z); }
ONUT_FORCE_INLINE void  onutVertex3sv(const GLshort * v) { onutGL.Vertex3sv(v); }
ONUT_FORCE_INLINE void  onutVertex3xOES(GLfixed x, GLfixed y) { onutGL.Vertex3xOES(x, y); }
ONUT_FORCE_INLINE void  onutVertex3xvOES(const GLfixed * coords) { onutGL.Vertex3xvOES(coords); }
ONUT_FORCE_INLINE void  onutVertex4bOES(GLbyte x, GLbyte y, GLbyte z, GLbyte w) { onutGL.Vertex4bOES(x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertex4bvOES(const GLbyte * coords) { onutGL.Vertex4bvOES(coords); }
ONUT_FORCE_INLINE void  onutVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) { onutGL.Vertex4d(x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertex4dv(const GLdouble * v) { onutGL.Vertex4dv(v); }
ONUT_FORCE_INLINE void  onutVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) { onutGL.Vertex4f(x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertex4fv(const GLfloat * v) { onutGL.Vertex4fv(v); }
ONUT_FORCE_INLINE void  onutVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) { onutGL.Vertex4hNV(x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertex4hvNV(const GLhalfNV * v) { onutGL.Vertex4hvNV(v); }
ONUT_FORCE_INLINE void  onutVertex4i(GLint x, GLint y, GLint z, GLint w) { onutGL.Vertex4i(x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertex4iv(const GLint * v) { onutGL.Vertex4iv(v); }
ONUT_FORCE_INLINE void  onutVertex4s(GLshort x, GLshort y, GLshort z, GLshort w) { onutGL.Vertex4s(x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertex4sv(const GLshort * v) { onutGL.Vertex4sv(v); }
ONUT_FORCE_INLINE void  onutVertex4xOES(GLfixed x, GLfixed y, GLfixed z) { onutGL.Vertex4xOES(x, y, z); }
ONUT_FORCE_INLINE void  onutVertex4xvOES(const GLfixed * coords) { onutGL.Vertex4xvOES(coords); }
ONUT_FORCE_INLINE void  onutVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex) { onutGL.VertexArrayAttribBinding(vaobj, attribindex, bindingindex); }
ONUT_FORCE_INLINE void  onutVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { onutGL.VertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset); }
ONUT_FORCE_INLINE void  onutVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { onutGL.VertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset); }
ONUT_FORCE_INLINE void  onutVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { onutGL.VertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset); }
ONUT_FORCE_INLINE void  onutVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { onutGL.VertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride); }
ONUT_FORCE_INLINE void  onutVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor) { onutGL.VertexArrayBindingDivisor(vaobj, bindingindex, divisor); }
ONUT_FORCE_INLINE void  onutVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { onutGL.VertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset); }
ONUT_FORCE_INLINE void  onutVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset) { onutGL.VertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset); }
ONUT_FORCE_INLINE void  onutVertexArrayElementBuffer(GLuint vaobj, GLuint buffer) { onutGL.VertexArrayElementBuffer(vaobj, buffer); }
ONUT_FORCE_INLINE void  onutVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { onutGL.VertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset); }
ONUT_FORCE_INLINE void  onutVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { onutGL.VertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset); }
ONUT_FORCE_INLINE void  onutVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset) { onutGL.VertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset); }
ONUT_FORCE_INLINE void  onutVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { onutGL.VertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset); }
ONUT_FORCE_INLINE void  onutVertexArrayParameteriAPPLE(GLenum pname, GLint param) { onutGL.VertexArrayParameteriAPPLE(pname, param); }
ONUT_FORCE_INLINE void  onutVertexArrayRangeAPPLE(GLsizei length, void * pointer) { onutGL.VertexArrayRangeAPPLE(length, pointer); }
ONUT_FORCE_INLINE void  onutVertexArrayRangeNV(GLsizei length, const void * pointer) { onutGL.VertexArrayRangeNV(length, pointer); }
ONUT_FORCE_INLINE void  onutVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { onutGL.VertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset); }
ONUT_FORCE_INLINE void  onutVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { onutGL.VertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset); }
ONUT_FORCE_INLINE void  onutVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex) { onutGL.VertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex); }
ONUT_FORCE_INLINE void  onutVertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor) { onutGL.VertexArrayVertexAttribDivisorEXT(vaobj, index, divisor); }
ONUT_FORCE_INLINE void  onutVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { onutGL.VertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset); }
ONUT_FORCE_INLINE void  onutVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { onutGL.VertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset); }
ONUT_FORCE_INLINE void  onutVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) { onutGL.VertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset); }
ONUT_FORCE_INLINE void  onutVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { onutGL.VertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset); }
ONUT_FORCE_INLINE void  onutVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) { onutGL.VertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset); }
ONUT_FORCE_INLINE void  onutVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset) { onutGL.VertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset); }
ONUT_FORCE_INLINE void  onutVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor) { onutGL.VertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor); }
ONUT_FORCE_INLINE void  onutVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { onutGL.VertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride); }
ONUT_FORCE_INLINE void  onutVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) { onutGL.VertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides); }
ONUT_FORCE_INLINE void  onutVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { onutGL.VertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset); }
ONUT_FORCE_INLINE void  onutVertexAttrib1d(GLuint index, GLdouble x) { onutGL.VertexAttrib1d(index, x); }
ONUT_FORCE_INLINE void  onutVertexAttrib1dARB(GLuint index, GLdouble x) { onutGL.VertexAttrib1dARB(index, x); }
ONUT_FORCE_INLINE void  onutVertexAttrib1dNV(GLuint index, GLdouble x) { onutGL.VertexAttrib1dNV(index, x); }
ONUT_FORCE_INLINE void  onutVertexAttrib1dv(GLuint index, const GLdouble * v) { onutGL.VertexAttrib1dv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib1dvARB(GLuint index, const GLdouble * v) { onutGL.VertexAttrib1dvARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib1dvNV(GLuint index, const GLdouble * v) { onutGL.VertexAttrib1dvNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib1f(GLuint index, GLfloat x) { onutGL.VertexAttrib1f(index, x); }
ONUT_FORCE_INLINE void  onutVertexAttrib1fARB(GLuint index, GLfloat x) { onutGL.VertexAttrib1fARB(index, x); }
ONUT_FORCE_INLINE void  onutVertexAttrib1fNV(GLuint index, GLfloat x) { onutGL.VertexAttrib1fNV(index, x); }
ONUT_FORCE_INLINE void  onutVertexAttrib1fv(GLuint index, const GLfloat * v) { onutGL.VertexAttrib1fv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib1fvARB(GLuint index, const GLfloat * v) { onutGL.VertexAttrib1fvARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib1fvNV(GLuint index, const GLfloat * v) { onutGL.VertexAttrib1fvNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib1hNV(GLuint index, GLhalfNV x) { onutGL.VertexAttrib1hNV(index, x); }
ONUT_FORCE_INLINE void  onutVertexAttrib1hvNV(GLuint index, const GLhalfNV * v) { onutGL.VertexAttrib1hvNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib1s(GLuint index, GLshort x) { onutGL.VertexAttrib1s(index, x); }
ONUT_FORCE_INLINE void  onutVertexAttrib1sARB(GLuint index, GLshort x) { onutGL.VertexAttrib1sARB(index, x); }
ONUT_FORCE_INLINE void  onutVertexAttrib1sNV(GLuint index, GLshort x) { onutGL.VertexAttrib1sNV(index, x); }
ONUT_FORCE_INLINE void  onutVertexAttrib1sv(GLuint index, const GLshort * v) { onutGL.VertexAttrib1sv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib1svARB(GLuint index, const GLshort * v) { onutGL.VertexAttrib1svARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib1svNV(GLuint index, const GLshort * v) { onutGL.VertexAttrib1svNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) { onutGL.VertexAttrib2d(index, x, y); }
ONUT_FORCE_INLINE void  onutVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y) { onutGL.VertexAttrib2dARB(index, x, y); }
ONUT_FORCE_INLINE void  onutVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y) { onutGL.VertexAttrib2dNV(index, x, y); }
ONUT_FORCE_INLINE void  onutVertexAttrib2dv(GLuint index, const GLdouble * v) { onutGL.VertexAttrib2dv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib2dvARB(GLuint index, const GLdouble * v) { onutGL.VertexAttrib2dvARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib2dvNV(GLuint index, const GLdouble * v) { onutGL.VertexAttrib2dvNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) { onutGL.VertexAttrib2f(index, x, y); }
ONUT_FORCE_INLINE void  onutVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y) { onutGL.VertexAttrib2fARB(index, x, y); }
ONUT_FORCE_INLINE void  onutVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y) { onutGL.VertexAttrib2fNV(index, x, y); }
ONUT_FORCE_INLINE void  onutVertexAttrib2fv(GLuint index, const GLfloat * v) { onutGL.VertexAttrib2fv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib2fvARB(GLuint index, const GLfloat * v) { onutGL.VertexAttrib2fvARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib2fvNV(GLuint index, const GLfloat * v) { onutGL.VertexAttrib2fvNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y) { onutGL.VertexAttrib2hNV(index, x, y); }
ONUT_FORCE_INLINE void  onutVertexAttrib2hvNV(GLuint index, const GLhalfNV * v) { onutGL.VertexAttrib2hvNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib2s(GLuint index, GLshort x, GLshort y) { onutGL.VertexAttrib2s(index, x, y); }
ONUT_FORCE_INLINE void  onutVertexAttrib2sARB(GLuint index, GLshort x, GLshort y) { onutGL.VertexAttrib2sARB(index, x, y); }
ONUT_FORCE_INLINE void  onutVertexAttrib2sNV(GLuint index, GLshort x, GLshort y) { onutGL.VertexAttrib2sNV(index, x, y); }
ONUT_FORCE_INLINE void  onutVertexAttrib2sv(GLuint index, const GLshort * v) { onutGL.VertexAttrib2sv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib2svARB(GLuint index, const GLshort * v) { onutGL.VertexAttrib2svARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib2svNV(GLuint index, const GLshort * v) { onutGL.VertexAttrib2svNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) { onutGL.VertexAttrib3d(index, x, y, z); }
ONUT_FORCE_INLINE void  onutVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z) { onutGL.VertexAttrib3dARB(index, x, y, z); }
ONUT_FORCE_INLINE void  onutVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z) { onutGL.VertexAttrib3dNV(index, x, y, z); }
ONUT_FORCE_INLINE void  onutVertexAttrib3dv(GLuint index, const GLdouble * v) { onutGL.VertexAttrib3dv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib3dvARB(GLuint index, const GLdouble * v) { onutGL.VertexAttrib3dvARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib3dvNV(GLuint index, const GLdouble * v) { onutGL.VertexAttrib3dvNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) { onutGL.VertexAttrib3f(index, x, y, z); }
ONUT_FORCE_INLINE void  onutVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z) { onutGL.VertexAttrib3fARB(index, x, y, z); }
ONUT_FORCE_INLINE void  onutVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z) { onutGL.VertexAttrib3fNV(index, x, y, z); }
ONUT_FORCE_INLINE void  onutVertexAttrib3fv(GLuint index, const GLfloat * v) { onutGL.VertexAttrib3fv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib3fvARB(GLuint index, const GLfloat * v) { onutGL.VertexAttrib3fvARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib3fvNV(GLuint index, const GLfloat * v) { onutGL.VertexAttrib3fvNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z) { onutGL.VertexAttrib3hNV(index, x, y, z); }
ONUT_FORCE_INLINE void  onutVertexAttrib3hvNV(GLuint index, const GLhalfNV * v) { onutGL.VertexAttrib3hvNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) { onutGL.VertexAttrib3s(index, x, y, z); }
ONUT_FORCE_INLINE void  onutVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z) { onutGL.VertexAttrib3sARB(index, x, y, z); }
ONUT_FORCE_INLINE void  onutVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z) { onutGL.VertexAttrib3sNV(index, x, y, z); }
ONUT_FORCE_INLINE void  onutVertexAttrib3sv(GLuint index, const GLshort * v) { onutGL.VertexAttrib3sv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib3svARB(GLuint index, const GLshort * v) { onutGL.VertexAttrib3svARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib3svNV(GLuint index, const GLshort * v) { onutGL.VertexAttrib3svNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4Nbv(GLuint index, const GLbyte * v) { onutGL.VertexAttrib4Nbv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4NbvARB(GLuint index, const GLbyte * v) { onutGL.VertexAttrib4NbvARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4Niv(GLuint index, const GLint * v) { onutGL.VertexAttrib4Niv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4NivARB(GLuint index, const GLint * v) { onutGL.VertexAttrib4NivARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4Nsv(GLuint index, const GLshort * v) { onutGL.VertexAttrib4Nsv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4NsvARB(GLuint index, const GLshort * v) { onutGL.VertexAttrib4NsvARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { onutGL.VertexAttrib4Nub(index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { onutGL.VertexAttrib4NubARB(index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexAttrib4Nubv(GLuint index, const GLubyte * v) { onutGL.VertexAttrib4Nubv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4NubvARB(GLuint index, const GLubyte * v) { onutGL.VertexAttrib4NubvARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4Nuiv(GLuint index, const GLuint * v) { onutGL.VertexAttrib4Nuiv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4NuivARB(GLuint index, const GLuint * v) { onutGL.VertexAttrib4NuivARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4Nusv(GLuint index, const GLushort * v) { onutGL.VertexAttrib4Nusv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4NusvARB(GLuint index, const GLushort * v) { onutGL.VertexAttrib4NusvARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4bv(GLuint index, const GLbyte * v) { onutGL.VertexAttrib4bv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4bvARB(GLuint index, const GLbyte * v) { onutGL.VertexAttrib4bvARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { onutGL.VertexAttrib4d(index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { onutGL.VertexAttrib4dARB(index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { onutGL.VertexAttrib4dNV(index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexAttrib4dv(GLuint index, const GLdouble * v) { onutGL.VertexAttrib4dv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4dvARB(GLuint index, const GLdouble * v) { onutGL.VertexAttrib4dvARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4dvNV(GLuint index, const GLdouble * v) { onutGL.VertexAttrib4dvNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { onutGL.VertexAttrib4f(index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { onutGL.VertexAttrib4fARB(index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { onutGL.VertexAttrib4fNV(index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexAttrib4fv(GLuint index, const GLfloat * v) { onutGL.VertexAttrib4fv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4fvARB(GLuint index, const GLfloat * v) { onutGL.VertexAttrib4fvARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4fvNV(GLuint index, const GLfloat * v) { onutGL.VertexAttrib4fvNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) { onutGL.VertexAttrib4hNV(index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexAttrib4hvNV(GLuint index, const GLhalfNV * v) { onutGL.VertexAttrib4hvNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4iv(GLuint index, const GLint * v) { onutGL.VertexAttrib4iv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4ivARB(GLuint index, const GLint * v) { onutGL.VertexAttrib4ivARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { onutGL.VertexAttrib4s(index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { onutGL.VertexAttrib4sARB(index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { onutGL.VertexAttrib4sNV(index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexAttrib4sv(GLuint index, const GLshort * v) { onutGL.VertexAttrib4sv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4svARB(GLuint index, const GLshort * v) { onutGL.VertexAttrib4svARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4svNV(GLuint index, const GLshort * v) { onutGL.VertexAttrib4svNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { onutGL.VertexAttrib4ubNV(index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexAttrib4ubv(GLuint index, const GLubyte * v) { onutGL.VertexAttrib4ubv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4ubvARB(GLuint index, const GLubyte * v) { onutGL.VertexAttrib4ubvARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4ubvNV(GLuint index, const GLubyte * v) { onutGL.VertexAttrib4ubvNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4uiv(GLuint index, const GLuint * v) { onutGL.VertexAttrib4uiv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4uivARB(GLuint index, const GLuint * v) { onutGL.VertexAttrib4uivARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4usv(GLuint index, const GLushort * v) { onutGL.VertexAttrib4usv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttrib4usvARB(GLuint index, const GLushort * v) { onutGL.VertexAttrib4usvARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset) { onutGL.VertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset); }
ONUT_FORCE_INLINE void  onutVertexAttribBinding(GLuint attribindex, GLuint bindingindex) { onutGL.VertexAttribBinding(attribindex, bindingindex); }
ONUT_FORCE_INLINE void  onutVertexAttribDivisor(GLuint index, GLuint divisor) { onutGL.VertexAttribDivisor(index, divisor); }
ONUT_FORCE_INLINE void  onutVertexAttribDivisorANGLE(GLuint index, GLuint divisor) { onutGL.VertexAttribDivisorANGLE(index, divisor); }
ONUT_FORCE_INLINE void  onutVertexAttribDivisorARB(GLuint index, GLuint divisor) { onutGL.VertexAttribDivisorARB(index, divisor); }
ONUT_FORCE_INLINE void  onutVertexAttribDivisorEXT(GLuint index, GLuint divisor) { onutGL.VertexAttribDivisorEXT(index, divisor); }
ONUT_FORCE_INLINE void  onutVertexAttribDivisorNV(GLuint index, GLuint divisor) { onutGL.VertexAttribDivisorNV(index, divisor); }
ONUT_FORCE_INLINE void  onutVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { onutGL.VertexAttribFormat(attribindex, size, type, normalized, relativeoffset); }
ONUT_FORCE_INLINE void  onutVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride) { onutGL.VertexAttribFormatNV(index, size, type, normalized, stride); }
ONUT_FORCE_INLINE void  onutVertexAttribI1i(GLuint index, GLint x) { onutGL.VertexAttribI1i(index, x); }
ONUT_FORCE_INLINE void  onutVertexAttribI1iEXT(GLuint index, GLint x) { onutGL.VertexAttribI1iEXT(index, x); }
ONUT_FORCE_INLINE void  onutVertexAttribI1iv(GLuint index, const GLint * v) { onutGL.VertexAttribI1iv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI1ivEXT(GLuint index, const GLint * v) { onutGL.VertexAttribI1ivEXT(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI1ui(GLuint index, GLuint x) { onutGL.VertexAttribI1ui(index, x); }
ONUT_FORCE_INLINE void  onutVertexAttribI1uiEXT(GLuint index, GLuint x) { onutGL.VertexAttribI1uiEXT(index, x); }
ONUT_FORCE_INLINE void  onutVertexAttribI1uiv(GLuint index, const GLuint * v) { onutGL.VertexAttribI1uiv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI1uivEXT(GLuint index, const GLuint * v) { onutGL.VertexAttribI1uivEXT(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI2i(GLuint index, GLint x, GLint y) { onutGL.VertexAttribI2i(index, x, y); }
ONUT_FORCE_INLINE void  onutVertexAttribI2iEXT(GLuint index, GLint x, GLint y) { onutGL.VertexAttribI2iEXT(index, x, y); }
ONUT_FORCE_INLINE void  onutVertexAttribI2iv(GLuint index, const GLint * v) { onutGL.VertexAttribI2iv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI2ivEXT(GLuint index, const GLint * v) { onutGL.VertexAttribI2ivEXT(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI2ui(GLuint index, GLuint x, GLuint y) { onutGL.VertexAttribI2ui(index, x, y); }
ONUT_FORCE_INLINE void  onutVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y) { onutGL.VertexAttribI2uiEXT(index, x, y); }
ONUT_FORCE_INLINE void  onutVertexAttribI2uiv(GLuint index, const GLuint * v) { onutGL.VertexAttribI2uiv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI2uivEXT(GLuint index, const GLuint * v) { onutGL.VertexAttribI2uivEXT(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) { onutGL.VertexAttribI3i(index, x, y, z); }
ONUT_FORCE_INLINE void  onutVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z) { onutGL.VertexAttribI3iEXT(index, x, y, z); }
ONUT_FORCE_INLINE void  onutVertexAttribI3iv(GLuint index, const GLint * v) { onutGL.VertexAttribI3iv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI3ivEXT(GLuint index, const GLint * v) { onutGL.VertexAttribI3ivEXT(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) { onutGL.VertexAttribI3ui(index, x, y, z); }
ONUT_FORCE_INLINE void  onutVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z) { onutGL.VertexAttribI3uiEXT(index, x, y, z); }
ONUT_FORCE_INLINE void  onutVertexAttribI3uiv(GLuint index, const GLuint * v) { onutGL.VertexAttribI3uiv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI3uivEXT(GLuint index, const GLuint * v) { onutGL.VertexAttribI3uivEXT(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI4bv(GLuint index, const GLbyte * v) { onutGL.VertexAttribI4bv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI4bvEXT(GLuint index, const GLbyte * v) { onutGL.VertexAttribI4bvEXT(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) { onutGL.VertexAttribI4i(index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w) { onutGL.VertexAttribI4iEXT(index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexAttribI4iv(GLuint index, const GLint * v) { onutGL.VertexAttribI4iv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI4ivEXT(GLuint index, const GLint * v) { onutGL.VertexAttribI4ivEXT(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI4sv(GLuint index, const GLshort * v) { onutGL.VertexAttribI4sv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI4svEXT(GLuint index, const GLshort * v) { onutGL.VertexAttribI4svEXT(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI4ubv(GLuint index, const GLubyte * v) { onutGL.VertexAttribI4ubv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI4ubvEXT(GLuint index, const GLubyte * v) { onutGL.VertexAttribI4ubvEXT(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { onutGL.VertexAttribI4ui(index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { onutGL.VertexAttribI4uiEXT(index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexAttribI4uiv(GLuint index, const GLuint * v) { onutGL.VertexAttribI4uiv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI4uivEXT(GLuint index, const GLuint * v) { onutGL.VertexAttribI4uivEXT(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI4usv(GLuint index, const GLushort * v) { onutGL.VertexAttribI4usv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribI4usvEXT(GLuint index, const GLushort * v) { onutGL.VertexAttribI4usvEXT(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { onutGL.VertexAttribIFormat(attribindex, size, type, relativeoffset); }
ONUT_FORCE_INLINE void  onutVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) { onutGL.VertexAttribIFormatNV(index, size, type, stride); }
ONUT_FORCE_INLINE void  onutVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { onutGL.VertexAttribIPointer(index, size, type, stride, pointer); }
ONUT_FORCE_INLINE void  onutVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { onutGL.VertexAttribIPointerEXT(index, size, type, stride, pointer); }
ONUT_FORCE_INLINE void  onutVertexAttribL1d(GLuint index, GLdouble x) { onutGL.VertexAttribL1d(index, x); }
ONUT_FORCE_INLINE void  onutVertexAttribL1dEXT(GLuint index, GLdouble x) { onutGL.VertexAttribL1dEXT(index, x); }
ONUT_FORCE_INLINE void  onutVertexAttribL1dv(GLuint index, const GLdouble * v) { onutGL.VertexAttribL1dv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribL1dvEXT(GLuint index, const GLdouble * v) { onutGL.VertexAttribL1dvEXT(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribL1i64NV(GLuint index, GLint64EXT x) { onutGL.VertexAttribL1i64NV(index, x); }
ONUT_FORCE_INLINE void  onutVertexAttribL1i64vNV(GLuint index, const GLint64EXT * v) { onutGL.VertexAttribL1i64vNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x) { onutGL.VertexAttribL1ui64ARB(index, x); }
ONUT_FORCE_INLINE void  onutVertexAttribL1ui64NV(GLuint index, GLuint64EXT x) { onutGL.VertexAttribL1ui64NV(index, x); }
ONUT_FORCE_INLINE void  onutVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT * v) { onutGL.VertexAttribL1ui64vARB(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT * v) { onutGL.VertexAttribL1ui64vNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribL2d(GLuint index, GLdouble x, GLdouble y) { onutGL.VertexAttribL2d(index, x, y); }
ONUT_FORCE_INLINE void  onutVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y) { onutGL.VertexAttribL2dEXT(index, x, y); }
ONUT_FORCE_INLINE void  onutVertexAttribL2dv(GLuint index, const GLdouble * v) { onutGL.VertexAttribL2dv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribL2dvEXT(GLuint index, const GLdouble * v) { onutGL.VertexAttribL2dvEXT(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y) { onutGL.VertexAttribL2i64NV(index, x, y); }
ONUT_FORCE_INLINE void  onutVertexAttribL2i64vNV(GLuint index, const GLint64EXT * v) { onutGL.VertexAttribL2i64vNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y) { onutGL.VertexAttribL2ui64NV(index, x, y); }
ONUT_FORCE_INLINE void  onutVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT * v) { onutGL.VertexAttribL2ui64vNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) { onutGL.VertexAttribL3d(index, x, y, z); }
ONUT_FORCE_INLINE void  onutVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z) { onutGL.VertexAttribL3dEXT(index, x, y, z); }
ONUT_FORCE_INLINE void  onutVertexAttribL3dv(GLuint index, const GLdouble * v) { onutGL.VertexAttribL3dv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribL3dvEXT(GLuint index, const GLdouble * v) { onutGL.VertexAttribL3dvEXT(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z) { onutGL.VertexAttribL3i64NV(index, x, y, z); }
ONUT_FORCE_INLINE void  onutVertexAttribL3i64vNV(GLuint index, const GLint64EXT * v) { onutGL.VertexAttribL3i64vNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { onutGL.VertexAttribL3ui64NV(index, x, y, z); }
ONUT_FORCE_INLINE void  onutVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT * v) { onutGL.VertexAttribL3ui64vNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { onutGL.VertexAttribL4d(index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { onutGL.VertexAttribL4dEXT(index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexAttribL4dv(GLuint index, const GLdouble * v) { onutGL.VertexAttribL4dv(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribL4dvEXT(GLuint index, const GLdouble * v) { onutGL.VertexAttribL4dvEXT(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { onutGL.VertexAttribL4i64NV(index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexAttribL4i64vNV(GLuint index, const GLint64EXT * v) { onutGL.VertexAttribL4i64vNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { onutGL.VertexAttribL4ui64NV(index, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT * v) { onutGL.VertexAttribL4ui64vNV(index, v); }
ONUT_FORCE_INLINE void  onutVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { onutGL.VertexAttribLFormat(attribindex, size, type, relativeoffset); }
ONUT_FORCE_INLINE void  onutVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) { onutGL.VertexAttribLFormatNV(index, size, type, stride); }
ONUT_FORCE_INLINE void  onutVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { onutGL.VertexAttribLPointer(index, size, type, stride, pointer); }
ONUT_FORCE_INLINE void  onutVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { onutGL.VertexAttribLPointerEXT(index, size, type, stride, pointer); }
ONUT_FORCE_INLINE void  onutVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { onutGL.VertexAttribP1ui(index, type, normalized, value); }
ONUT_FORCE_INLINE void  onutVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { onutGL.VertexAttribP1uiv(index, type, normalized, value); }
ONUT_FORCE_INLINE void  onutVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { onutGL.VertexAttribP2ui(index, type, normalized, value); }
ONUT_FORCE_INLINE void  onutVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { onutGL.VertexAttribP2uiv(index, type, normalized, value); }
ONUT_FORCE_INLINE void  onutVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { onutGL.VertexAttribP3ui(index, type, normalized, value); }
ONUT_FORCE_INLINE void  onutVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { onutGL.VertexAttribP3uiv(index, type, normalized, value); }
ONUT_FORCE_INLINE void  onutVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { onutGL.VertexAttribP4ui(index, type, normalized, value); }
ONUT_FORCE_INLINE void  onutVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { onutGL.VertexAttribP4uiv(index, type, normalized, value); }
ONUT_FORCE_INLINE void  onutVertexAttribParameteriAMD(GLuint index, GLenum pname, GLint param) { onutGL.VertexAttribParameteriAMD(index, pname, param); }
ONUT_FORCE_INLINE void  onutVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) { onutGL.VertexAttribPointer(index, size, type, normalized, stride, pointer); }
ONUT_FORCE_INLINE void  onutVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) { onutGL.VertexAttribPointerARB(index, size, type, normalized, stride, pointer); }
ONUT_FORCE_INLINE void  onutVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void * pointer) { onutGL.VertexAttribPointerNV(index, fsize, type, stride, pointer); }
ONUT_FORCE_INLINE void  onutVertexAttribs1dvNV(GLuint index, GLsizei count, const GLdouble * v) { onutGL.VertexAttribs1dvNV(index, count, v); }
ONUT_FORCE_INLINE void  onutVertexAttribs1fvNV(GLuint index, GLsizei count, const GLfloat * v) { onutGL.VertexAttribs1fvNV(index, count, v); }
ONUT_FORCE_INLINE void  onutVertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV * v) { onutGL.VertexAttribs1hvNV(index, n, v); }
ONUT_FORCE_INLINE void  onutVertexAttribs1svNV(GLuint index, GLsizei count, const GLshort * v) { onutGL.VertexAttribs1svNV(index, count, v); }
ONUT_FORCE_INLINE void  onutVertexAttribs2dvNV(GLuint index, GLsizei count, const GLdouble * v) { onutGL.VertexAttribs2dvNV(index, count, v); }
ONUT_FORCE_INLINE void  onutVertexAttribs2fvNV(GLuint index, GLsizei count, const GLfloat * v) { onutGL.VertexAttribs2fvNV(index, count, v); }
ONUT_FORCE_INLINE void  onutVertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV * v) { onutGL.VertexAttribs2hvNV(index, n, v); }
ONUT_FORCE_INLINE void  onutVertexAttribs2svNV(GLuint index, GLsizei count, const GLshort * v) { onutGL.VertexAttribs2svNV(index, count, v); }
ONUT_FORCE_INLINE void  onutVertexAttribs3dvNV(GLuint index, GLsizei count, const GLdouble * v) { onutGL.VertexAttribs3dvNV(index, count, v); }
ONUT_FORCE_INLINE void  onutVertexAttribs3fvNV(GLuint index, GLsizei count, const GLfloat * v) { onutGL.VertexAttribs3fvNV(index, count, v); }
ONUT_FORCE_INLINE void  onutVertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV * v) { onutGL.VertexAttribs3hvNV(index, n, v); }
ONUT_FORCE_INLINE void  onutVertexAttribs3svNV(GLuint index, GLsizei count, const GLshort * v) { onutGL.VertexAttribs3svNV(index, count, v); }
ONUT_FORCE_INLINE void  onutVertexAttribs4dvNV(GLuint index, GLsizei count, const GLdouble * v) { onutGL.VertexAttribs4dvNV(index, count, v); }
ONUT_FORCE_INLINE void  onutVertexAttribs4fvNV(GLuint index, GLsizei count, const GLfloat * v) { onutGL.VertexAttribs4fvNV(index, count, v); }
ONUT_FORCE_INLINE void  onutVertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV * v) { onutGL.VertexAttribs4hvNV(index, n, v); }
ONUT_FORCE_INLINE void  onutVertexAttribs4svNV(GLuint index, GLsizei count, const GLshort * v) { onutGL.VertexAttribs4svNV(index, count, v); }
ONUT_FORCE_INLINE void  onutVertexAttribs4ubvNV(GLuint index, GLsizei count, const GLubyte * v) { onutGL.VertexAttribs4ubvNV(index, count, v); }
ONUT_FORCE_INLINE void  onutVertexBindingDivisor(GLuint bindingindex, GLuint divisor) { onutGL.VertexBindingDivisor(bindingindex, divisor); }
ONUT_FORCE_INLINE void  onutVertexBlendARB(GLint count) { onutGL.VertexBlendARB(count); }
ONUT_FORCE_INLINE void  onutVertexBlendEnvfATI(GLenum pname, GLfloat param) { onutGL.VertexBlendEnvfATI(pname, param); }
ONUT_FORCE_INLINE void  onutVertexBlendEnviATI(GLenum pname, GLint param) { onutGL.VertexBlendEnviATI(pname, param); }
ONUT_FORCE_INLINE void  onutVertexFormatNV(GLint size, GLenum type, GLsizei stride) { onutGL.VertexFormatNV(size, type, stride); }
ONUT_FORCE_INLINE void  onutVertexP2ui(GLenum type, GLuint value) { onutGL.VertexP2ui(type, value); }
ONUT_FORCE_INLINE void  onutVertexP2uiv(GLenum type, const GLuint * value) { onutGL.VertexP2uiv(type, value); }
ONUT_FORCE_INLINE void  onutVertexP3ui(GLenum type, GLuint value) { onutGL.VertexP3ui(type, value); }
ONUT_FORCE_INLINE void  onutVertexP3uiv(GLenum type, const GLuint * value) { onutGL.VertexP3uiv(type, value); }
ONUT_FORCE_INLINE void  onutVertexP4ui(GLenum type, GLuint value) { onutGL.VertexP4ui(type, value); }
ONUT_FORCE_INLINE void  onutVertexP4uiv(GLenum type, const GLuint * value) { onutGL.VertexP4uiv(type, value); }
ONUT_FORCE_INLINE void  onutVertexPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { onutGL.VertexPointer(size, type, stride, pointer); }
ONUT_FORCE_INLINE void  onutVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) { onutGL.VertexPointerEXT(size, type, stride, count, pointer); }
ONUT_FORCE_INLINE void  onutVertexPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { onutGL.VertexPointerListIBM(size, type, stride, pointer, ptrstride); }
ONUT_FORCE_INLINE void  onutVertexPointervINTEL(GLint size, GLenum type, const void ** pointer) { onutGL.VertexPointervINTEL(size, type, pointer); }
ONUT_FORCE_INLINE void  onutVertexStream1dATI(GLenum stream, GLdouble x) { onutGL.VertexStream1dATI(stream, x); }
ONUT_FORCE_INLINE void  onutVertexStream1dvATI(GLenum stream, const GLdouble * coords) { onutGL.VertexStream1dvATI(stream, coords); }
ONUT_FORCE_INLINE void  onutVertexStream1fATI(GLenum stream, GLfloat x) { onutGL.VertexStream1fATI(stream, x); }
ONUT_FORCE_INLINE void  onutVertexStream1fvATI(GLenum stream, const GLfloat * coords) { onutGL.VertexStream1fvATI(stream, coords); }
ONUT_FORCE_INLINE void  onutVertexStream1iATI(GLenum stream, GLint x) { onutGL.VertexStream1iATI(stream, x); }
ONUT_FORCE_INLINE void  onutVertexStream1ivATI(GLenum stream, const GLint * coords) { onutGL.VertexStream1ivATI(stream, coords); }
ONUT_FORCE_INLINE void  onutVertexStream1sATI(GLenum stream, GLshort x) { onutGL.VertexStream1sATI(stream, x); }
ONUT_FORCE_INLINE void  onutVertexStream1svATI(GLenum stream, const GLshort * coords) { onutGL.VertexStream1svATI(stream, coords); }
ONUT_FORCE_INLINE void  onutVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y) { onutGL.VertexStream2dATI(stream, x, y); }
ONUT_FORCE_INLINE void  onutVertexStream2dvATI(GLenum stream, const GLdouble * coords) { onutGL.VertexStream2dvATI(stream, coords); }
ONUT_FORCE_INLINE void  onutVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y) { onutGL.VertexStream2fATI(stream, x, y); }
ONUT_FORCE_INLINE void  onutVertexStream2fvATI(GLenum stream, const GLfloat * coords) { onutGL.VertexStream2fvATI(stream, coords); }
ONUT_FORCE_INLINE void  onutVertexStream2iATI(GLenum stream, GLint x, GLint y) { onutGL.VertexStream2iATI(stream, x, y); }
ONUT_FORCE_INLINE void  onutVertexStream2ivATI(GLenum stream, const GLint * coords) { onutGL.VertexStream2ivATI(stream, coords); }
ONUT_FORCE_INLINE void  onutVertexStream2sATI(GLenum stream, GLshort x, GLshort y) { onutGL.VertexStream2sATI(stream, x, y); }
ONUT_FORCE_INLINE void  onutVertexStream2svATI(GLenum stream, const GLshort * coords) { onutGL.VertexStream2svATI(stream, coords); }
ONUT_FORCE_INLINE void  onutVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z) { onutGL.VertexStream3dATI(stream, x, y, z); }
ONUT_FORCE_INLINE void  onutVertexStream3dvATI(GLenum stream, const GLdouble * coords) { onutGL.VertexStream3dvATI(stream, coords); }
ONUT_FORCE_INLINE void  onutVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z) { onutGL.VertexStream3fATI(stream, x, y, z); }
ONUT_FORCE_INLINE void  onutVertexStream3fvATI(GLenum stream, const GLfloat * coords) { onutGL.VertexStream3fvATI(stream, coords); }
ONUT_FORCE_INLINE void  onutVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z) { onutGL.VertexStream3iATI(stream, x, y, z); }
ONUT_FORCE_INLINE void  onutVertexStream3ivATI(GLenum stream, const GLint * coords) { onutGL.VertexStream3ivATI(stream, coords); }
ONUT_FORCE_INLINE void  onutVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z) { onutGL.VertexStream3sATI(stream, x, y, z); }
ONUT_FORCE_INLINE void  onutVertexStream3svATI(GLenum stream, const GLshort * coords) { onutGL.VertexStream3svATI(stream, coords); }
ONUT_FORCE_INLINE void  onutVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { onutGL.VertexStream4dATI(stream, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexStream4dvATI(GLenum stream, const GLdouble * coords) { onutGL.VertexStream4dvATI(stream, coords); }
ONUT_FORCE_INLINE void  onutVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { onutGL.VertexStream4fATI(stream, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexStream4fvATI(GLenum stream, const GLfloat * coords) { onutGL.VertexStream4fvATI(stream, coords); }
ONUT_FORCE_INLINE void  onutVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w) { onutGL.VertexStream4iATI(stream, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexStream4ivATI(GLenum stream, const GLint * coords) { onutGL.VertexStream4ivATI(stream, coords); }
ONUT_FORCE_INLINE void  onutVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w) { onutGL.VertexStream4sATI(stream, x, y, z, w); }
ONUT_FORCE_INLINE void  onutVertexStream4svATI(GLenum stream, const GLshort * coords) { onutGL.VertexStream4svATI(stream, coords); }
ONUT_FORCE_INLINE void  onutVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, const void * pointer) { onutGL.VertexWeightPointerEXT(size, type, stride, pointer); }
ONUT_FORCE_INLINE void  onutVertexWeightfEXT(GLfloat weight) { onutGL.VertexWeightfEXT(weight); }
ONUT_FORCE_INLINE void  onutVertexWeightfvEXT(const GLfloat * weight) { onutGL.VertexWeightfvEXT(weight); }
ONUT_FORCE_INLINE void  onutVertexWeighthNV(GLhalfNV weight) { onutGL.VertexWeighthNV(weight); }
ONUT_FORCE_INLINE void  onutVertexWeighthvNV(const GLhalfNV * weight) { onutGL.VertexWeighthvNV(weight); }
ONUT_FORCE_INLINE GLenum onutVideoCaptureNV(GLuint video_capture_slot, GLuint * sequence_num, GLuint64EXT * capture_time) { return onutGL.VideoCaptureNV(video_capture_slot, sequence_num, capture_time); }
ONUT_FORCE_INLINE void  onutVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble * params) { onutGL.VideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params); }
ONUT_FORCE_INLINE void  onutVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat * params) { onutGL.VideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params); }
ONUT_FORCE_INLINE void  onutVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint * params) { onutGL.VideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params); }
ONUT_FORCE_INLINE void  onutViewport(GLint x, GLint y, GLsizei width, GLsizei height) { onutGL.Viewport(x, y, width, height); }
ONUT_FORCE_INLINE void  onutViewportArrayv(GLuint first, GLsizei count, const GLfloat * v) { onutGL.ViewportArrayv(first, count, v); }
ONUT_FORCE_INLINE void  onutViewportArrayvNV(GLuint first, GLsizei count, const GLfloat * v) { onutGL.ViewportArrayvNV(first, count, v); }
ONUT_FORCE_INLINE void  onutViewportArrayvOES(GLuint first, GLsizei count, const GLfloat * v) { onutGL.ViewportArrayvOES(first, count, v); }
ONUT_FORCE_INLINE void  onutViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { onutGL.ViewportIndexedf(index, x, y, w, h); }
ONUT_FORCE_INLINE void  onutViewportIndexedfNV(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { onutGL.ViewportIndexedfNV(index, x, y, w, h); }
ONUT_FORCE_INLINE void  onutViewportIndexedfOES(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { onutGL.ViewportIndexedfOES(index, x, y, w, h); }
ONUT_FORCE_INLINE void  onutViewportIndexedfv(GLuint index, const GLfloat * v) { onutGL.ViewportIndexedfv(index, v); }
ONUT_FORCE_INLINE void  onutViewportIndexedfvNV(GLuint index, const GLfloat * v) { onutGL.ViewportIndexedfvNV(index, v); }
ONUT_FORCE_INLINE void  onutViewportIndexedfvOES(GLuint index, const GLfloat * v) { onutGL.ViewportIndexedfvOES(index, v); }
ONUT_FORCE_INLINE void  onutViewportPositionWScaleNV(GLuint index, GLfloat xcoeff, GLfloat ycoeff) { onutGL.ViewportPositionWScaleNV(index, xcoeff, ycoeff); }
ONUT_FORCE_INLINE void  onutViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew) { onutGL.ViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew); }
ONUT_FORCE_INLINE void  onutWaitSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint * buffers, GLuint numTextureBarriers, const GLuint * textures, const GLenum * srcLayouts) { onutGL.WaitSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts); }
ONUT_FORCE_INLINE void  onutWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) { onutGL.WaitSync(sync, flags, timeout); }
ONUT_FORCE_INLINE void  onutWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout) { onutGL.WaitSyncAPPLE(sync, flags, timeout); }
ONUT_FORCE_INLINE void  onutWaitVkSemaphoreNV(GLuint64 vkSemaphore) { onutGL.WaitVkSemaphoreNV(vkSemaphore); }
ONUT_FORCE_INLINE void  onutWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint * paths, const GLfloat * weights) { onutGL.WeightPathsNV(resultPath, numPaths, paths, weights); }
ONUT_FORCE_INLINE void  onutWeightPointerARB(GLint size, GLenum type, GLsizei stride, const void * pointer) { onutGL.WeightPointerARB(size, type, stride, pointer); }
ONUT_FORCE_INLINE void  onutWeightPointerOES(GLint size, GLenum type, GLsizei stride, const void * pointer) { onutGL.WeightPointerOES(size, type, stride, pointer); }
ONUT_FORCE_INLINE void  onutWeightbvARB(GLint size, const GLbyte * weights) { onutGL.WeightbvARB(size, weights); }
ONUT_FORCE_INLINE void  onutWeightdvARB(GLint size, const GLdouble * weights) { onutGL.WeightdvARB(size, weights); }
ONUT_FORCE_INLINE void  onutWeightfvARB(GLint size, const GLfloat * weights) { onutGL.WeightfvARB(size, weights); }
ONUT_FORCE_INLINE void  onutWeightivARB(GLint size, const GLint * weights) { onutGL.WeightivARB(size, weights); }
ONUT_FORCE_INLINE void  onutWeightsvARB(GLint size, const GLshort * weights) { onutGL.WeightsvARB(size, weights); }
ONUT_FORCE_INLINE void  onutWeightubvARB(GLint size, const GLubyte * weights) { onutGL.WeightubvARB(size, weights); }
ONUT_FORCE_INLINE void  onutWeightuivARB(GLint size, const GLuint * weights) { onutGL.WeightuivARB(size, weights); }
ONUT_FORCE_INLINE void  onutWeightusvARB(GLint size, const GLushort * weights) { onutGL.WeightusvARB(size, weights); }
ONUT_FORCE_INLINE void  onutWindowPos2d(GLdouble x, GLdouble y) { onutGL.WindowPos2d(x, y); }
ONUT_FORCE_INLINE void  onutWindowPos2dARB(GLdouble x, GLdouble y) { onutGL.WindowPos2dARB(x, y); }
ONUT_FORCE_INLINE void  onutWindowPos2dMESA(GLdouble x, GLdouble y) { onutGL.WindowPos2dMESA(x, y); }
ONUT_FORCE_INLINE void  onutWindowPos2dv(const GLdouble * v) { onutGL.WindowPos2dv(v); }
ONUT_FORCE_INLINE void  onutWindowPos2dvARB(const GLdouble * v) { onutGL.WindowPos2dvARB(v); }
ONUT_FORCE_INLINE void  onutWindowPos2dvMESA(const GLdouble * v) { onutGL.WindowPos2dvMESA(v); }
ONUT_FORCE_INLINE void  onutWindowPos2f(GLfloat x, GLfloat y) { onutGL.WindowPos2f(x, y); }
ONUT_FORCE_INLINE void  onutWindowPos2fARB(GLfloat x, GLfloat y) { onutGL.WindowPos2fARB(x, y); }
ONUT_FORCE_INLINE void  onutWindowPos2fMESA(GLfloat x, GLfloat y) { onutGL.WindowPos2fMESA(x, y); }
ONUT_FORCE_INLINE void  onutWindowPos2fv(const GLfloat * v) { onutGL.WindowPos2fv(v); }
ONUT_FORCE_INLINE void  onutWindowPos2fvARB(const GLfloat * v) { onutGL.WindowPos2fvARB(v); }
ONUT_FORCE_INLINE void  onutWindowPos2fvMESA(const GLfloat * v) { onutGL.WindowPos2fvMESA(v); }
ONUT_FORCE_INLINE void  onutWindowPos2i(GLint x, GLint y) { onutGL.WindowPos2i(x, y); }
ONUT_FORCE_INLINE void  onutWindowPos2iARB(GLint x, GLint y) { onutGL.WindowPos2iARB(x, y); }
ONUT_FORCE_INLINE void  onutWindowPos2iMESA(GLint x, GLint y) { onutGL.WindowPos2iMESA(x, y); }
ONUT_FORCE_INLINE void  onutWindowPos2iv(const GLint * v) { onutGL.WindowPos2iv(v); }
ONUT_FORCE_INLINE void  onutWindowPos2ivARB(const GLint * v) { onutGL.WindowPos2ivARB(v); }
ONUT_FORCE_INLINE void  onutWindowPos2ivMESA(const GLint * v) { onutGL.WindowPos2ivMESA(v); }
ONUT_FORCE_INLINE void  onutWindowPos2s(GLshort x, GLshort y) { onutGL.WindowPos2s(x, y); }
ONUT_FORCE_INLINE void  onutWindowPos2sARB(GLshort x, GLshort y) { onutGL.WindowPos2sARB(x, y); }
ONUT_FORCE_INLINE void  onutWindowPos2sMESA(GLshort x, GLshort y) { onutGL.WindowPos2sMESA(x, y); }
ONUT_FORCE_INLINE void  onutWindowPos2sv(const GLshort * v) { onutGL.WindowPos2sv(v); }
ONUT_FORCE_INLINE void  onutWindowPos2svARB(const GLshort * v) { onutGL.WindowPos2svARB(v); }
ONUT_FORCE_INLINE void  onutWindowPos2svMESA(const GLshort * v) { onutGL.WindowPos2svMESA(v); }
ONUT_FORCE_INLINE void  onutWindowPos3d(GLdouble x, GLdouble y, GLdouble z) { onutGL.WindowPos3d(x, y, z); }
ONUT_FORCE_INLINE void  onutWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z) { onutGL.WindowPos3dARB(x, y, z); }
ONUT_FORCE_INLINE void  onutWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z) { onutGL.WindowPos3dMESA(x, y, z); }
ONUT_FORCE_INLINE void  onutWindowPos3dv(const GLdouble * v) { onutGL.WindowPos3dv(v); }
ONUT_FORCE_INLINE void  onutWindowPos3dvARB(const GLdouble * v) { onutGL.WindowPos3dvARB(v); }
ONUT_FORCE_INLINE void  onutWindowPos3dvMESA(const GLdouble * v) { onutGL.WindowPos3dvMESA(v); }
ONUT_FORCE_INLINE void  onutWindowPos3f(GLfloat x, GLfloat y, GLfloat z) { onutGL.WindowPos3f(x, y, z); }
ONUT_FORCE_INLINE void  onutWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z) { onutGL.WindowPos3fARB(x, y, z); }
ONUT_FORCE_INLINE void  onutWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z) { onutGL.WindowPos3fMESA(x, y, z); }
ONUT_FORCE_INLINE void  onutWindowPos3fv(const GLfloat * v) { onutGL.WindowPos3fv(v); }
ONUT_FORCE_INLINE void  onutWindowPos3fvARB(const GLfloat * v) { onutGL.WindowPos3fvARB(v); }
ONUT_FORCE_INLINE void  onutWindowPos3fvMESA(const GLfloat * v) { onutGL.WindowPos3fvMESA(v); }
ONUT_FORCE_INLINE void  onutWindowPos3i(GLint x, GLint y, GLint z) { onutGL.WindowPos3i(x, y, z); }
ONUT_FORCE_INLINE void  onutWindowPos3iARB(GLint x, GLint y, GLint z) { onutGL.WindowPos3iARB(x, y, z); }
ONUT_FORCE_INLINE void  onutWindowPos3iMESA(GLint x, GLint y, GLint z) { onutGL.WindowPos3iMESA(x, y, z); }
ONUT_FORCE_INLINE void  onutWindowPos3iv(const GLint * v) { onutGL.WindowPos3iv(v); }
ONUT_FORCE_INLINE void  onutWindowPos3ivARB(const GLint * v) { onutGL.WindowPos3ivARB(v); }
ONUT_FORCE_INLINE void  onutWindowPos3ivMESA(const GLint * v) { onutGL.WindowPos3ivMESA(v); }
ONUT_FORCE_INLINE void  onutWindowPos3s(GLshort x, GLshort y, GLshort z) { onutGL.WindowPos3s(x, y, z); }
ONUT_FORCE_INLINE void  onutWindowPos3sARB(GLshort x, GLshort y, GLshort z) { onutGL.WindowPos3sARB(x, y, z); }
ONUT_FORCE_INLINE void  onutWindowPos3sMESA(GLshort x, GLshort y, GLshort z) { onutGL.WindowPos3sMESA(x, y, z); }
ONUT_FORCE_INLINE void  onutWindowPos3sv(const GLshort * v) { onutGL.WindowPos3sv(v); }
ONUT_FORCE_INLINE void  onutWindowPos3svARB(const GLshort * v) { onutGL.WindowPos3svARB(v); }
ONUT_FORCE_INLINE void  onutWindowPos3svMESA(const GLshort * v) { onutGL.WindowPos3svMESA(v); }
ONUT_FORCE_INLINE void  onutWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w) { onutGL.WindowPos4dMESA(x, y, z, w); }
ONUT_FORCE_INLINE void  onutWindowPos4dvMESA(const GLdouble * v) { onutGL.WindowPos4dvMESA(v); }
ONUT_FORCE_INLINE void  onutWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w) { onutGL.WindowPos4fMESA(x, y, z, w); }
ONUT_FORCE_INLINE void  onutWindowPos4fvMESA(const GLfloat * v) { onutGL.WindowPos4fvMESA(v); }
ONUT_FORCE_INLINE void  onutWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w) { onutGL.WindowPos4iMESA(x, y, z, w); }
ONUT_FORCE_INLINE void  onutWindowPos4ivMESA(const GLint * v) { onutGL.WindowPos4ivMESA(v); }
ONUT_FORCE_INLINE void  onutWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w) { onutGL.WindowPos4sMESA(x, y, z, w); }
ONUT_FORCE_INLINE void  onutWindowPos4svMESA(const GLshort * v) { onutGL.WindowPos4svMESA(v); }
ONUT_FORCE_INLINE void  onutWindowRectanglesEXT(GLenum mode, GLsizei count, const GLint * box) { onutGL.WindowRectanglesEXT(mode, count, box); }
ONUT_FORCE_INLINE void  onutWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) { onutGL.WriteMaskEXT(res, in, outX, outY, outZ, outW); }


#define glAccum onutAccum
#define glAccumxOES onutAccumxOES
#define glAcquireKeyedMutexWin32EXT onutAcquireKeyedMutexWin32EXT
#define glActiveProgramEXT onutActiveProgramEXT
#define glActiveShaderProgram onutActiveShaderProgram
#define glActiveShaderProgramEXT onutActiveShaderProgramEXT
#define glActiveStencilFaceEXT onutActiveStencilFaceEXT
#define glActiveTexture onutActiveTexture
#define glActiveTextureARB onutActiveTextureARB
#define glActiveVaryingNV onutActiveVaryingNV
#define glAlphaFragmentOp1ATI onutAlphaFragmentOp1ATI
#define glAlphaFragmentOp2ATI onutAlphaFragmentOp2ATI
#define glAlphaFragmentOp3ATI onutAlphaFragmentOp3ATI
#define glAlphaFunc onutAlphaFunc
#define glAlphaFuncQCOM onutAlphaFuncQCOM
#define glAlphaFuncx onutAlphaFuncx
#define glAlphaFuncxOES onutAlphaFuncxOES
#define glAlphaToCoverageDitherControlNV onutAlphaToCoverageDitherControlNV
#define glApplyFramebufferAttachmentCMAAINTEL onutApplyFramebufferAttachmentCMAAINTEL
#define glApplyTextureEXT onutApplyTextureEXT
#define glAreProgramsResidentNV onutAreProgramsResidentNV
#define glAreTexturesResident onutAreTexturesResident
#define glAreTexturesResidentEXT onutAreTexturesResidentEXT
#define glArrayElement onutArrayElement
#define glArrayElementEXT onutArrayElementEXT
#define glArrayObjectATI onutArrayObjectATI
#define glAsyncMarkerSGIX onutAsyncMarkerSGIX
#define glAttachObjectARB onutAttachObjectARB
#define glAttachShader onutAttachShader
#define glBegin onutBegin
#define glBeginConditionalRender onutBeginConditionalRender
#define glBeginConditionalRenderNV onutBeginConditionalRenderNV
#define glBeginConditionalRenderNVX onutBeginConditionalRenderNVX
#define glBeginFragmentShaderATI onutBeginFragmentShaderATI
#define glBeginOcclusionQueryNV onutBeginOcclusionQueryNV
#define glBeginPerfMonitorAMD onutBeginPerfMonitorAMD
#define glBeginPerfQueryINTEL onutBeginPerfQueryINTEL
#define glBeginQuery onutBeginQuery
#define glBeginQueryARB onutBeginQueryARB
#define glBeginQueryEXT onutBeginQueryEXT
#define glBeginQueryIndexed onutBeginQueryIndexed
#define glBeginTransformFeedback onutBeginTransformFeedback
#define glBeginTransformFeedbackEXT onutBeginTransformFeedbackEXT
#define glBeginTransformFeedbackNV onutBeginTransformFeedbackNV
#define glBeginVertexShaderEXT onutBeginVertexShaderEXT
#define glBeginVideoCaptureNV onutBeginVideoCaptureNV
#define glBindAttribLocation onutBindAttribLocation
#define glBindAttribLocationARB onutBindAttribLocationARB
#define glBindBuffer onutBindBuffer
#define glBindBufferARB onutBindBufferARB
#define glBindBufferBase onutBindBufferBase
#define glBindBufferBaseEXT onutBindBufferBaseEXT
#define glBindBufferBaseNV onutBindBufferBaseNV
#define glBindBufferOffsetEXT onutBindBufferOffsetEXT
#define glBindBufferOffsetNV onutBindBufferOffsetNV
#define glBindBufferRange onutBindBufferRange
#define glBindBufferRangeEXT onutBindBufferRangeEXT
#define glBindBufferRangeNV onutBindBufferRangeNV
#define glBindBuffersBase onutBindBuffersBase
#define glBindBuffersRange onutBindBuffersRange
#define glBindFragDataLocation onutBindFragDataLocation
#define glBindFragDataLocationEXT onutBindFragDataLocationEXT
#define glBindFragDataLocationIndexed onutBindFragDataLocationIndexed
#define glBindFragDataLocationIndexedEXT onutBindFragDataLocationIndexedEXT
#define glBindFragmentShaderATI onutBindFragmentShaderATI
#define glBindFramebuffer onutBindFramebuffer
#define glBindFramebufferEXT onutBindFramebufferEXT
#define glBindFramebufferOES onutBindFramebufferOES
#define glBindImageTexture onutBindImageTexture
#define glBindImageTextureEXT onutBindImageTextureEXT
#define glBindImageTextures onutBindImageTextures
#define glBindLightParameterEXT onutBindLightParameterEXT
#define glBindMaterialParameterEXT onutBindMaterialParameterEXT
#define glBindMultiTextureEXT onutBindMultiTextureEXT
#define glBindParameterEXT onutBindParameterEXT
#define glBindProgramARB onutBindProgramARB
#define glBindProgramNV onutBindProgramNV
#define glBindProgramPipeline onutBindProgramPipeline
#define glBindProgramPipelineEXT onutBindProgramPipelineEXT
#define glBindRenderbuffer onutBindRenderbuffer
#define glBindRenderbufferEXT onutBindRenderbufferEXT
#define glBindRenderbufferOES onutBindRenderbufferOES
#define glBindSampler onutBindSampler
#define glBindSamplers onutBindSamplers
#define glBindTexGenParameterEXT onutBindTexGenParameterEXT
#define glBindTexture onutBindTexture
#define glBindTextureEXT onutBindTextureEXT
#define glBindTextureUnit onutBindTextureUnit
#define glBindTextureUnitParameterEXT onutBindTextureUnitParameterEXT
#define glBindTextures onutBindTextures
#define glBindTransformFeedback onutBindTransformFeedback
#define glBindTransformFeedbackNV onutBindTransformFeedbackNV
#define glBindVertexArray onutBindVertexArray
#define glBindVertexArrayAPPLE onutBindVertexArrayAPPLE
#define glBindVertexArrayOES onutBindVertexArrayOES
#define glBindVertexBuffer onutBindVertexBuffer
#define glBindVertexBuffers onutBindVertexBuffers
#define glBindVertexShaderEXT onutBindVertexShaderEXT
#define glBindVideoCaptureStreamBufferNV onutBindVideoCaptureStreamBufferNV
#define glBindVideoCaptureStreamTextureNV onutBindVideoCaptureStreamTextureNV
#define glBinormal3bEXT onutBinormal3bEXT
#define glBinormal3bvEXT onutBinormal3bvEXT
#define glBinormal3dEXT onutBinormal3dEXT
#define glBinormal3dvEXT onutBinormal3dvEXT
#define glBinormal3fEXT onutBinormal3fEXT
#define glBinormal3fvEXT onutBinormal3fvEXT
#define glBinormal3iEXT onutBinormal3iEXT
#define glBinormal3ivEXT onutBinormal3ivEXT
#define glBinormal3sEXT onutBinormal3sEXT
#define glBinormal3svEXT onutBinormal3svEXT
#define glBinormalPointerEXT onutBinormalPointerEXT
#define glBitmap onutBitmap
#define glBitmapxOES onutBitmapxOES
#define glBlendBarrier onutBlendBarrier
#define glBlendBarrierKHR onutBlendBarrierKHR
#define glBlendBarrierNV onutBlendBarrierNV
#define glBlendColor onutBlendColor
#define glBlendColorEXT onutBlendColorEXT
#define glBlendColorxOES onutBlendColorxOES
#define glBlendEquation onutBlendEquation
#define glBlendEquationEXT onutBlendEquationEXT
#define glBlendEquationIndexedAMD onutBlendEquationIndexedAMD
#define glBlendEquationOES onutBlendEquationOES
#define glBlendEquationSeparate onutBlendEquationSeparate
#define glBlendEquationSeparateEXT onutBlendEquationSeparateEXT
#define glBlendEquationSeparateIndexedAMD onutBlendEquationSeparateIndexedAMD
#define glBlendEquationSeparateOES onutBlendEquationSeparateOES
#define glBlendEquationSeparatei onutBlendEquationSeparatei
#define glBlendEquationSeparateiARB onutBlendEquationSeparateiARB
#define glBlendEquationSeparateiEXT onutBlendEquationSeparateiEXT
#define glBlendEquationSeparateiOES onutBlendEquationSeparateiOES
#define glBlendEquationi onutBlendEquationi
#define glBlendEquationiARB onutBlendEquationiARB
#define glBlendEquationiEXT onutBlendEquationiEXT
#define glBlendEquationiOES onutBlendEquationiOES
#define glBlendFunc onutBlendFunc
#define glBlendFuncIndexedAMD onutBlendFuncIndexedAMD
#define glBlendFuncSeparate onutBlendFuncSeparate
#define glBlendFuncSeparateEXT onutBlendFuncSeparateEXT
#define glBlendFuncSeparateINGR onutBlendFuncSeparateINGR
#define glBlendFuncSeparateIndexedAMD onutBlendFuncSeparateIndexedAMD
#define glBlendFuncSeparateOES onutBlendFuncSeparateOES
#define glBlendFuncSeparatei onutBlendFuncSeparatei
#define glBlendFuncSeparateiARB onutBlendFuncSeparateiARB
#define glBlendFuncSeparateiEXT onutBlendFuncSeparateiEXT
#define glBlendFuncSeparateiOES onutBlendFuncSeparateiOES
#define glBlendFunci onutBlendFunci
#define glBlendFunciARB onutBlendFunciARB
#define glBlendFunciEXT onutBlendFunciEXT
#define glBlendFunciOES onutBlendFunciOES
#define glBlendParameteriNV onutBlendParameteriNV
#define glBlitFramebuffer onutBlitFramebuffer
#define glBlitFramebufferANGLE onutBlitFramebufferANGLE
#define glBlitFramebufferEXT onutBlitFramebufferEXT
#define glBlitFramebufferNV onutBlitFramebufferNV
#define glBlitNamedFramebuffer onutBlitNamedFramebuffer
#define glBufferAddressRangeNV onutBufferAddressRangeNV
#define glBufferData onutBufferData
#define glBufferDataARB onutBufferDataARB
#define glBufferPageCommitmentARB onutBufferPageCommitmentARB
#define glBufferParameteriAPPLE onutBufferParameteriAPPLE
#define glBufferRegionEnabled onutBufferRegionEnabled
#define glBufferStorage onutBufferStorage
#define glBufferStorageEXT onutBufferStorageEXT
#define glBufferStorageExternalEXT onutBufferStorageExternalEXT
#define glBufferStorageMemEXT onutBufferStorageMemEXT
#define glBufferSubData onutBufferSubData
#define glBufferSubDataARB onutBufferSubDataARB
#define glCallCommandListNV onutCallCommandListNV
#define glCallList onutCallList
#define glCallLists onutCallLists
#define glCheckFramebufferStatus onutCheckFramebufferStatus
#define glCheckFramebufferStatusEXT onutCheckFramebufferStatusEXT
#define glCheckFramebufferStatusOES onutCheckFramebufferStatusOES
#define glCheckNamedFramebufferStatus onutCheckNamedFramebufferStatus
#define glCheckNamedFramebufferStatusEXT onutCheckNamedFramebufferStatusEXT
#define glClampColor onutClampColor
#define glClampColorARB onutClampColorARB
#define glClear onutClear
#define glClearAccum onutClearAccum
#define glClearAccumxOES onutClearAccumxOES
#define glClearBufferData onutClearBufferData
#define glClearBufferSubData onutClearBufferSubData
#define glClearBufferfi onutClearBufferfi
#define glClearBufferfv onutClearBufferfv
#define glClearBufferiv onutClearBufferiv
#define glClearBufferuiv onutClearBufferuiv
#define glClearColor onutClearColor
#define glClearColorIiEXT onutClearColorIiEXT
#define glClearColorIuiEXT onutClearColorIuiEXT
#define glClearColorx onutClearColorx
#define glClearColorxOES onutClearColorxOES
#define glClearDepth onutClearDepth
#define glClearDepthdNV onutClearDepthdNV
#define glClearDepthf onutClearDepthf
#define glClearDepthfOES onutClearDepthfOES
#define glClearDepthx onutClearDepthx
#define glClearDepthxOES onutClearDepthxOES
#define glClearIndex onutClearIndex
#define glClearNamedBufferData onutClearNamedBufferData
#define glClearNamedBufferDataEXT onutClearNamedBufferDataEXT
#define glClearNamedBufferSubData onutClearNamedBufferSubData
#define glClearNamedBufferSubDataEXT onutClearNamedBufferSubDataEXT
#define glClearNamedFramebufferfi onutClearNamedFramebufferfi
#define glClearNamedFramebufferfv onutClearNamedFramebufferfv
#define glClearNamedFramebufferiv onutClearNamedFramebufferiv
#define glClearNamedFramebufferuiv onutClearNamedFramebufferuiv
#define glClearPixelLocalStorageuiEXT onutClearPixelLocalStorageuiEXT
#define glClearStencil onutClearStencil
#define glClearTexImage onutClearTexImage
#define glClearTexImageEXT onutClearTexImageEXT
#define glClearTexSubImage onutClearTexSubImage
#define glClearTexSubImageEXT onutClearTexSubImageEXT
#define glClientActiveTexture onutClientActiveTexture
#define glClientActiveTextureARB onutClientActiveTextureARB
#define glClientActiveVertexStreamATI onutClientActiveVertexStreamATI
#define glClientAttribDefaultEXT onutClientAttribDefaultEXT
#define glClientWaitSync onutClientWaitSync
#define glClientWaitSyncAPPLE onutClientWaitSyncAPPLE
#define glClipControl onutClipControl
#define glClipPlane onutClipPlane
#define glClipPlanef onutClipPlanef
#define glClipPlanefIMG onutClipPlanefIMG
#define glClipPlanefOES onutClipPlanefOES
#define glClipPlanex onutClipPlanex
#define glClipPlanexIMG onutClipPlanexIMG
#define glClipPlanexOES onutClipPlanexOES
#define glColor3b onutColor3b
#define glColor3bv onutColor3bv
#define glColor3d onutColor3d
#define glColor3dv onutColor3dv
#define glColor3f onutColor3f
#define glColor3fVertex3fSUN onutColor3fVertex3fSUN
#define glColor3fVertex3fvSUN onutColor3fVertex3fvSUN
#define glColor3fv onutColor3fv
#define glColor3hNV onutColor3hNV
#define glColor3hvNV onutColor3hvNV
#define glColor3i onutColor3i
#define glColor3iv onutColor3iv
#define glColor3s onutColor3s
#define glColor3sv onutColor3sv
#define glColor3ub onutColor3ub
#define glColor3ubv onutColor3ubv
#define glColor3ui onutColor3ui
#define glColor3uiv onutColor3uiv
#define glColor3us onutColor3us
#define glColor3usv onutColor3usv
#define glColor3xOES onutColor3xOES
#define glColor3xvOES onutColor3xvOES
#define glColor4b onutColor4b
#define glColor4bv onutColor4bv
#define glColor4d onutColor4d
#define glColor4dv onutColor4dv
#define glColor4f onutColor4f
#define glColor4fNormal3fVertex3fSUN onutColor4fNormal3fVertex3fSUN
#define glColor4fNormal3fVertex3fvSUN onutColor4fNormal3fVertex3fvSUN
#define glColor4fv onutColor4fv
#define glColor4hNV onutColor4hNV
#define glColor4hvNV onutColor4hvNV
#define glColor4i onutColor4i
#define glColor4iv onutColor4iv
#define glColor4s onutColor4s
#define glColor4sv onutColor4sv
#define glColor4ub onutColor4ub
#define glColor4ubVertex2fSUN onutColor4ubVertex2fSUN
#define glColor4ubVertex2fvSUN onutColor4ubVertex2fvSUN
#define glColor4ubVertex3fSUN onutColor4ubVertex3fSUN
#define glColor4ubVertex3fvSUN onutColor4ubVertex3fvSUN
#define glColor4ubv onutColor4ubv
#define glColor4ui onutColor4ui
#define glColor4uiv onutColor4uiv
#define glColor4us onutColor4us
#define glColor4usv onutColor4usv
#define glColor4x onutColor4x
#define glColor4xOES onutColor4xOES
#define glColor4xvOES onutColor4xvOES
#define glColorFormatNV onutColorFormatNV
#define glColorFragmentOp1ATI onutColorFragmentOp1ATI
#define glColorFragmentOp2ATI onutColorFragmentOp2ATI
#define glColorFragmentOp3ATI onutColorFragmentOp3ATI
#define glColorMask onutColorMask
#define glColorMaskIndexedEXT onutColorMaskIndexedEXT
#define glColorMaski onutColorMaski
#define glColorMaskiEXT onutColorMaskiEXT
#define glColorMaskiOES onutColorMaskiOES
#define glColorMaterial onutColorMaterial
#define glColorP3ui onutColorP3ui
#define glColorP3uiv onutColorP3uiv
#define glColorP4ui onutColorP4ui
#define glColorP4uiv onutColorP4uiv
#define glColorPointer onutColorPointer
#define glColorPointerEXT onutColorPointerEXT
#define glColorPointerListIBM onutColorPointerListIBM
#define glColorPointervINTEL onutColorPointervINTEL
#define glColorSubTable onutColorSubTable
#define glColorSubTableEXT onutColorSubTableEXT
#define glColorTable onutColorTable
#define glColorTableEXT onutColorTableEXT
#define glColorTableParameterfv onutColorTableParameterfv
#define glColorTableParameterfvSGI onutColorTableParameterfvSGI
#define glColorTableParameteriv onutColorTableParameteriv
#define glColorTableParameterivSGI onutColorTableParameterivSGI
#define glColorTableSGI onutColorTableSGI
#define glCombinerInputNV onutCombinerInputNV
#define glCombinerOutputNV onutCombinerOutputNV
#define glCombinerParameterfNV onutCombinerParameterfNV
#define glCombinerParameterfvNV onutCombinerParameterfvNV
#define glCombinerParameteriNV onutCombinerParameteriNV
#define glCombinerParameterivNV onutCombinerParameterivNV
#define glCombinerStageParameterfvNV onutCombinerStageParameterfvNV
#define glCommandListSegmentsNV onutCommandListSegmentsNV
#define glCompileCommandListNV onutCompileCommandListNV
#define glCompileShader onutCompileShader
#define glCompileShaderARB onutCompileShaderARB
#define glCompileShaderIncludeARB onutCompileShaderIncludeARB
#define glCompressedMultiTexImage1DEXT onutCompressedMultiTexImage1DEXT
#define glCompressedMultiTexImage2DEXT onutCompressedMultiTexImage2DEXT
#define glCompressedMultiTexImage3DEXT onutCompressedMultiTexImage3DEXT
#define glCompressedMultiTexSubImage1DEXT onutCompressedMultiTexSubImage1DEXT
#define glCompressedMultiTexSubImage2DEXT onutCompressedMultiTexSubImage2DEXT
#define glCompressedMultiTexSubImage3DEXT onutCompressedMultiTexSubImage3DEXT
#define glCompressedTexImage1D onutCompressedTexImage1D
#define glCompressedTexImage1DARB onutCompressedTexImage1DARB
#define glCompressedTexImage2D onutCompressedTexImage2D
#define glCompressedTexImage2DARB onutCompressedTexImage2DARB
#define glCompressedTexImage3D onutCompressedTexImage3D
#define glCompressedTexImage3DARB onutCompressedTexImage3DARB
#define glCompressedTexImage3DOES onutCompressedTexImage3DOES
#define glCompressedTexSubImage1D onutCompressedTexSubImage1D
#define glCompressedTexSubImage1DARB onutCompressedTexSubImage1DARB
#define glCompressedTexSubImage2D onutCompressedTexSubImage2D
#define glCompressedTexSubImage2DARB onutCompressedTexSubImage2DARB
#define glCompressedTexSubImage3D onutCompressedTexSubImage3D
#define glCompressedTexSubImage3DARB onutCompressedTexSubImage3DARB
#define glCompressedTexSubImage3DOES onutCompressedTexSubImage3DOES
#define glCompressedTextureImage1DEXT onutCompressedTextureImage1DEXT
#define glCompressedTextureImage2DEXT onutCompressedTextureImage2DEXT
#define glCompressedTextureImage3DEXT onutCompressedTextureImage3DEXT
#define glCompressedTextureSubImage1D onutCompressedTextureSubImage1D
#define glCompressedTextureSubImage1DEXT onutCompressedTextureSubImage1DEXT
#define glCompressedTextureSubImage2D onutCompressedTextureSubImage2D
#define glCompressedTextureSubImage2DEXT onutCompressedTextureSubImage2DEXT
#define glCompressedTextureSubImage3D onutCompressedTextureSubImage3D
#define glCompressedTextureSubImage3DEXT onutCompressedTextureSubImage3DEXT
#define glConservativeRasterParameterfNV onutConservativeRasterParameterfNV
#define glConservativeRasterParameteriNV onutConservativeRasterParameteriNV
#define glConvolutionFilter1D onutConvolutionFilter1D
#define glConvolutionFilter1DEXT onutConvolutionFilter1DEXT
#define glConvolutionFilter2D onutConvolutionFilter2D
#define glConvolutionFilter2DEXT onutConvolutionFilter2DEXT
#define glConvolutionParameterf onutConvolutionParameterf
#define glConvolutionParameterfEXT onutConvolutionParameterfEXT
#define glConvolutionParameterfv onutConvolutionParameterfv
#define glConvolutionParameterfvEXT onutConvolutionParameterfvEXT
#define glConvolutionParameteri onutConvolutionParameteri
#define glConvolutionParameteriEXT onutConvolutionParameteriEXT
#define glConvolutionParameteriv onutConvolutionParameteriv
#define glConvolutionParameterivEXT onutConvolutionParameterivEXT
#define glConvolutionParameterxOES onutConvolutionParameterxOES
#define glConvolutionParameterxvOES onutConvolutionParameterxvOES
#define glCopyBufferSubData onutCopyBufferSubData
#define glCopyBufferSubDataNV onutCopyBufferSubDataNV
#define glCopyColorSubTable onutCopyColorSubTable
#define glCopyColorSubTableEXT onutCopyColorSubTableEXT
#define glCopyColorTable onutCopyColorTable
#define glCopyColorTableSGI onutCopyColorTableSGI
#define glCopyConvolutionFilter1D onutCopyConvolutionFilter1D
#define glCopyConvolutionFilter1DEXT onutCopyConvolutionFilter1DEXT
#define glCopyConvolutionFilter2D onutCopyConvolutionFilter2D
#define glCopyConvolutionFilter2DEXT onutCopyConvolutionFilter2DEXT
#define glCopyImageSubData onutCopyImageSubData
#define glCopyImageSubDataEXT onutCopyImageSubDataEXT
#define glCopyImageSubDataNV onutCopyImageSubDataNV
#define glCopyImageSubDataOES onutCopyImageSubDataOES
#define glCopyMultiTexImage1DEXT onutCopyMultiTexImage1DEXT
#define glCopyMultiTexImage2DEXT onutCopyMultiTexImage2DEXT
#define glCopyMultiTexSubImage1DEXT onutCopyMultiTexSubImage1DEXT
#define glCopyMultiTexSubImage2DEXT onutCopyMultiTexSubImage2DEXT
#define glCopyMultiTexSubImage3DEXT onutCopyMultiTexSubImage3DEXT
#define glCopyNamedBufferSubData onutCopyNamedBufferSubData
#define glCopyPathNV onutCopyPathNV
#define glCopyPixels onutCopyPixels
#define glCopyTexImage1D onutCopyTexImage1D
#define glCopyTexImage1DEXT onutCopyTexImage1DEXT
#define glCopyTexImage2D onutCopyTexImage2D
#define glCopyTexImage2DEXT onutCopyTexImage2DEXT
#define glCopyTexSubImage1D onutCopyTexSubImage1D
#define glCopyTexSubImage1DEXT onutCopyTexSubImage1DEXT
#define glCopyTexSubImage2D onutCopyTexSubImage2D
#define glCopyTexSubImage2DEXT onutCopyTexSubImage2DEXT
#define glCopyTexSubImage3D onutCopyTexSubImage3D
#define glCopyTexSubImage3DEXT onutCopyTexSubImage3DEXT
#define glCopyTexSubImage3DOES onutCopyTexSubImage3DOES
#define glCopyTextureImage1DEXT onutCopyTextureImage1DEXT
#define glCopyTextureImage2DEXT onutCopyTextureImage2DEXT
#define glCopyTextureLevelsAPPLE onutCopyTextureLevelsAPPLE
#define glCopyTextureSubImage1D onutCopyTextureSubImage1D
#define glCopyTextureSubImage1DEXT onutCopyTextureSubImage1DEXT
#define glCopyTextureSubImage2D onutCopyTextureSubImage2D
#define glCopyTextureSubImage2DEXT onutCopyTextureSubImage2DEXT
#define glCopyTextureSubImage3D onutCopyTextureSubImage3D
#define glCopyTextureSubImage3DEXT onutCopyTextureSubImage3DEXT
#define glCoverFillPathInstancedNV onutCoverFillPathInstancedNV
#define glCoverFillPathNV onutCoverFillPathNV
#define glCoverStrokePathInstancedNV onutCoverStrokePathInstancedNV
#define glCoverStrokePathNV onutCoverStrokePathNV
#define glCoverageMaskNV onutCoverageMaskNV
#define glCoverageModulationNV onutCoverageModulationNV
#define glCoverageModulationTableNV onutCoverageModulationTableNV
#define glCoverageOperationNV onutCoverageOperationNV
#define glCreateBuffers onutCreateBuffers
#define glCreateCommandListsNV onutCreateCommandListsNV
#define glCreateFramebuffers onutCreateFramebuffers
#define glCreateMemoryObjectsEXT onutCreateMemoryObjectsEXT
#define glCreatePerfQueryINTEL onutCreatePerfQueryINTEL
#define glCreateProgram onutCreateProgram
#define glCreateProgramObjectARB onutCreateProgramObjectARB
#define glCreateProgramPipelines onutCreateProgramPipelines
#define glCreateQueries onutCreateQueries
#define glCreateRenderbuffers onutCreateRenderbuffers
#define glCreateSamplers onutCreateSamplers
#define glCreateShader onutCreateShader
#define glCreateShaderObjectARB onutCreateShaderObjectARB
#define glCreateShaderProgramEXT onutCreateShaderProgramEXT
#define glCreateShaderProgramv onutCreateShaderProgramv
#define glCreateShaderProgramvEXT onutCreateShaderProgramvEXT
#define glCreateStatesNV onutCreateStatesNV
#define glCreateSyncFromCLeventARB onutCreateSyncFromCLeventARB
#define glCreateTextures onutCreateTextures
#define glCreateTransformFeedbacks onutCreateTransformFeedbacks
#define glCreateVertexArrays onutCreateVertexArrays
#define glCullFace onutCullFace
#define glCullParameterdvEXT onutCullParameterdvEXT
#define glCullParameterfvEXT onutCullParameterfvEXT
#define glCurrentPaletteMatrixARB onutCurrentPaletteMatrixARB
#define glCurrentPaletteMatrixOES onutCurrentPaletteMatrixOES
#define glDebugMessageCallback onutDebugMessageCallback
#define glDebugMessageCallbackAMD onutDebugMessageCallbackAMD
#define glDebugMessageCallbackARB onutDebugMessageCallbackARB
#define glDebugMessageCallbackKHR onutDebugMessageCallbackKHR
#define glDebugMessageControl onutDebugMessageControl
#define glDebugMessageControlARB onutDebugMessageControlARB
#define glDebugMessageControlKHR onutDebugMessageControlKHR
#define glDebugMessageEnableAMD onutDebugMessageEnableAMD
#define glDebugMessageInsert onutDebugMessageInsert
#define glDebugMessageInsertAMD onutDebugMessageInsertAMD
#define glDebugMessageInsertARB onutDebugMessageInsertARB
#define glDebugMessageInsertKHR onutDebugMessageInsertKHR
#define glDeformSGIX onutDeformSGIX
#define glDeformationMap3dSGIX onutDeformationMap3dSGIX
#define glDeformationMap3fSGIX onutDeformationMap3fSGIX
#define glDeleteAsyncMarkersSGIX onutDeleteAsyncMarkersSGIX
#define glDeleteBufferRegion onutDeleteBufferRegion
#define glDeleteBuffers onutDeleteBuffers
#define glDeleteBuffersARB onutDeleteBuffersARB
#define glDeleteCommandListsNV onutDeleteCommandListsNV
#define glDeleteFencesAPPLE onutDeleteFencesAPPLE
#define glDeleteFencesNV onutDeleteFencesNV
#define glDeleteFragmentShaderATI onutDeleteFragmentShaderATI
#define glDeleteFramebuffers onutDeleteFramebuffers
#define glDeleteFramebuffersEXT onutDeleteFramebuffersEXT
#define glDeleteFramebuffersOES onutDeleteFramebuffersOES
#define glDeleteLists onutDeleteLists
#define glDeleteMemoryObjectsEXT onutDeleteMemoryObjectsEXT
#define glDeleteNamedStringARB onutDeleteNamedStringARB
#define glDeleteNamesAMD onutDeleteNamesAMD
#define glDeleteObjectARB onutDeleteObjectARB
#define glDeleteOcclusionQueriesNV onutDeleteOcclusionQueriesNV
#define glDeletePathsNV onutDeletePathsNV
#define glDeletePerfMonitorsAMD onutDeletePerfMonitorsAMD
#define glDeletePerfQueryINTEL onutDeletePerfQueryINTEL
#define glDeleteProgram onutDeleteProgram
#define glDeleteProgramPipelines onutDeleteProgramPipelines
#define glDeleteProgramPipelinesEXT onutDeleteProgramPipelinesEXT
#define glDeleteProgramsARB onutDeleteProgramsARB
#define glDeleteProgramsNV onutDeleteProgramsNV
#define glDeleteQueries onutDeleteQueries
#define glDeleteQueriesARB onutDeleteQueriesARB
#define glDeleteQueriesEXT onutDeleteQueriesEXT
#define glDeleteRenderbuffers onutDeleteRenderbuffers
#define glDeleteRenderbuffersEXT onutDeleteRenderbuffersEXT
#define glDeleteRenderbuffersOES onutDeleteRenderbuffersOES
#define glDeleteSamplers onutDeleteSamplers
#define glDeleteSemaphoresEXT onutDeleteSemaphoresEXT
#define glDeleteShader onutDeleteShader
#define glDeleteStatesNV onutDeleteStatesNV
#define glDeleteSync onutDeleteSync
#define glDeleteSyncAPPLE onutDeleteSyncAPPLE
#define glDeleteTextures onutDeleteTextures
#define glDeleteTexturesEXT onutDeleteTexturesEXT
#define glDeleteTransformFeedbacks onutDeleteTransformFeedbacks
#define glDeleteTransformFeedbacksNV onutDeleteTransformFeedbacksNV
#define glDeleteVertexArrays onutDeleteVertexArrays
#define glDeleteVertexArraysAPPLE onutDeleteVertexArraysAPPLE
#define glDeleteVertexArraysOES onutDeleteVertexArraysOES
#define glDeleteVertexShaderEXT onutDeleteVertexShaderEXT
#define glDepthBoundsEXT onutDepthBoundsEXT
#define glDepthBoundsdNV onutDepthBoundsdNV
#define glDepthFunc onutDepthFunc
#define glDepthMask onutDepthMask
#define glDepthRange onutDepthRange
#define glDepthRangeArrayfvNV onutDepthRangeArrayfvNV
#define glDepthRangeArrayfvOES onutDepthRangeArrayfvOES
#define glDepthRangeArrayv onutDepthRangeArrayv
#define glDepthRangeIndexed onutDepthRangeIndexed
#define glDepthRangeIndexedfNV onutDepthRangeIndexedfNV
#define glDepthRangeIndexedfOES onutDepthRangeIndexedfOES
#define glDepthRangedNV onutDepthRangedNV
#define glDepthRangef onutDepthRangef
#define glDepthRangefOES onutDepthRangefOES
#define glDepthRangex onutDepthRangex
#define glDepthRangexOES onutDepthRangexOES
#define glDetachObjectARB onutDetachObjectARB
#define glDetachShader onutDetachShader
#define glDetailTexFuncSGIS onutDetailTexFuncSGIS
#define glDisable onutDisable
#define glDisableClientState onutDisableClientState
#define glDisableClientStateIndexedEXT onutDisableClientStateIndexedEXT
#define glDisableClientStateiEXT onutDisableClientStateiEXT
#define glDisableDriverControlQCOM onutDisableDriverControlQCOM
#define glDisableIndexedEXT onutDisableIndexedEXT
#define glDisableVariantClientStateEXT onutDisableVariantClientStateEXT
#define glDisableVertexArrayAttrib onutDisableVertexArrayAttrib
#define glDisableVertexArrayAttribEXT onutDisableVertexArrayAttribEXT
#define glDisableVertexArrayEXT onutDisableVertexArrayEXT
#define glDisableVertexAttribAPPLE onutDisableVertexAttribAPPLE
#define glDisableVertexAttribArray onutDisableVertexAttribArray
#define glDisableVertexAttribArrayARB onutDisableVertexAttribArrayARB
#define glDisablei onutDisablei
#define glDisableiEXT onutDisableiEXT
#define glDisableiNV onutDisableiNV
#define glDisableiOES onutDisableiOES
#define glDiscardFramebufferEXT onutDiscardFramebufferEXT
#define glDispatchCompute onutDispatchCompute
#define glDispatchComputeGroupSizeARB onutDispatchComputeGroupSizeARB
#define glDispatchComputeIndirect onutDispatchComputeIndirect
#define glDrawArrays onutDrawArrays
#define glDrawArraysEXT onutDrawArraysEXT
#define glDrawArraysIndirect onutDrawArraysIndirect
#define glDrawArraysInstanced onutDrawArraysInstanced
#define glDrawArraysInstancedANGLE onutDrawArraysInstancedANGLE
#define glDrawArraysInstancedARB onutDrawArraysInstancedARB
#define glDrawArraysInstancedBaseInstance onutDrawArraysInstancedBaseInstance
#define glDrawArraysInstancedBaseInstanceEXT onutDrawArraysInstancedBaseInstanceEXT
#define glDrawArraysInstancedEXT onutDrawArraysInstancedEXT
#define glDrawArraysInstancedNV onutDrawArraysInstancedNV
#define glDrawBuffer onutDrawBuffer
#define glDrawBufferRegion onutDrawBufferRegion
#define glDrawBuffers onutDrawBuffers
#define glDrawBuffersARB onutDrawBuffersARB
#define glDrawBuffersATI onutDrawBuffersATI
#define glDrawBuffersEXT onutDrawBuffersEXT
#define glDrawBuffersIndexedEXT onutDrawBuffersIndexedEXT
#define glDrawBuffersNV onutDrawBuffersNV
#define glDrawCommandsAddressNV onutDrawCommandsAddressNV
#define glDrawCommandsNV onutDrawCommandsNV
#define glDrawCommandsStatesAddressNV onutDrawCommandsStatesAddressNV
#define glDrawCommandsStatesNV onutDrawCommandsStatesNV
#define glDrawElementArrayAPPLE onutDrawElementArrayAPPLE
#define glDrawElementArrayATI onutDrawElementArrayATI
#define glDrawElements onutDrawElements
#define glDrawElementsBaseVertex onutDrawElementsBaseVertex
#define glDrawElementsBaseVertexEXT onutDrawElementsBaseVertexEXT
#define glDrawElementsBaseVertexOES onutDrawElementsBaseVertexOES
#define glDrawElementsIndirect onutDrawElementsIndirect
#define glDrawElementsInstanced onutDrawElementsInstanced
#define glDrawElementsInstancedANGLE onutDrawElementsInstancedANGLE
#define glDrawElementsInstancedARB onutDrawElementsInstancedARB
#define glDrawElementsInstancedBaseInstance onutDrawElementsInstancedBaseInstance
#define glDrawElementsInstancedBaseInstanceEXT onutDrawElementsInstancedBaseInstanceEXT
#define glDrawElementsInstancedBaseVertex onutDrawElementsInstancedBaseVertex
#define glDrawElementsInstancedBaseVertexBaseInstance onutDrawElementsInstancedBaseVertexBaseInstance
#define glDrawElementsInstancedBaseVertexBaseInstanceEXT onutDrawElementsInstancedBaseVertexBaseInstanceEXT
#define glDrawElementsInstancedBaseVertexEXT onutDrawElementsInstancedBaseVertexEXT
#define glDrawElementsInstancedBaseVertexOES onutDrawElementsInstancedBaseVertexOES
#define glDrawElementsInstancedEXT onutDrawElementsInstancedEXT
#define glDrawElementsInstancedNV onutDrawElementsInstancedNV
#define glDrawMeshArraysSUN onutDrawMeshArraysSUN
#define glDrawPixels onutDrawPixels
#define glDrawRangeElementArrayAPPLE onutDrawRangeElementArrayAPPLE
#define glDrawRangeElementArrayATI onutDrawRangeElementArrayATI
#define glDrawRangeElements onutDrawRangeElements
#define glDrawRangeElementsBaseVertex onutDrawRangeElementsBaseVertex
#define glDrawRangeElementsBaseVertexEXT onutDrawRangeElementsBaseVertexEXT
#define glDrawRangeElementsBaseVertexOES onutDrawRangeElementsBaseVertexOES
#define glDrawRangeElementsEXT onutDrawRangeElementsEXT
#define glDrawTexfOES onutDrawTexfOES
#define glDrawTexfvOES onutDrawTexfvOES
#define glDrawTexiOES onutDrawTexiOES
#define glDrawTexivOES onutDrawTexivOES
#define glDrawTexsOES onutDrawTexsOES
#define glDrawTexsvOES onutDrawTexsvOES
#define glDrawTextureNV onutDrawTextureNV
#define glDrawTexxOES onutDrawTexxOES
#define glDrawTexxvOES onutDrawTexxvOES
#define glDrawTransformFeedback onutDrawTransformFeedback
#define glDrawTransformFeedbackEXT onutDrawTransformFeedbackEXT
#define glDrawTransformFeedbackInstanced onutDrawTransformFeedbackInstanced
#define glDrawTransformFeedbackInstancedEXT onutDrawTransformFeedbackInstancedEXT
#define glDrawTransformFeedbackNV onutDrawTransformFeedbackNV
#define glDrawTransformFeedbackStream onutDrawTransformFeedbackStream
#define glDrawTransformFeedbackStreamInstanced onutDrawTransformFeedbackStreamInstanced
#define glDrawVkImageNV onutDrawVkImageNV
#define glEGLImageTargetRenderbufferStorageOES onutEGLImageTargetRenderbufferStorageOES
#define glEGLImageTargetTexture2DOES onutEGLImageTargetTexture2DOES
#define glEdgeFlag onutEdgeFlag
#define glEdgeFlagFormatNV onutEdgeFlagFormatNV
#define glEdgeFlagPointer onutEdgeFlagPointer
#define glEdgeFlagPointerEXT onutEdgeFlagPointerEXT
#define glEdgeFlagPointerListIBM onutEdgeFlagPointerListIBM
#define glEdgeFlagv onutEdgeFlagv
#define glElementPointerAPPLE onutElementPointerAPPLE
#define glElementPointerATI onutElementPointerATI
#define glEnable onutEnable
#define glEnableClientState onutEnableClientState
#define glEnableClientStateIndexedEXT onutEnableClientStateIndexedEXT
#define glEnableClientStateiEXT onutEnableClientStateiEXT
#define glEnableDriverControlQCOM onutEnableDriverControlQCOM
#define glEnableIndexedEXT onutEnableIndexedEXT
#define glEnableVariantClientStateEXT onutEnableVariantClientStateEXT
#define glEnableVertexArrayAttrib onutEnableVertexArrayAttrib
#define glEnableVertexArrayAttribEXT onutEnableVertexArrayAttribEXT
#define glEnableVertexArrayEXT onutEnableVertexArrayEXT
#define glEnableVertexAttribAPPLE onutEnableVertexAttribAPPLE
#define glEnableVertexAttribArray onutEnableVertexAttribArray
#define glEnableVertexAttribArrayARB onutEnableVertexAttribArrayARB
#define glEnablei onutEnablei
#define glEnableiEXT onutEnableiEXT
#define glEnableiNV onutEnableiNV
#define glEnableiOES onutEnableiOES
#define glEnd onutEnd
#define glEndConditionalRender onutEndConditionalRender
#define glEndConditionalRenderNV onutEndConditionalRenderNV
#define glEndConditionalRenderNVX onutEndConditionalRenderNVX
#define glEndFragmentShaderATI onutEndFragmentShaderATI
#define glEndList onutEndList
#define glEndOcclusionQueryNV onutEndOcclusionQueryNV
#define glEndPerfMonitorAMD onutEndPerfMonitorAMD
#define glEndPerfQueryINTEL onutEndPerfQueryINTEL
#define glEndQuery onutEndQuery
#define glEndQueryARB onutEndQueryARB
#define glEndQueryEXT onutEndQueryEXT
#define glEndQueryIndexed onutEndQueryIndexed
#define glEndTilingQCOM onutEndTilingQCOM
#define glEndTransformFeedback onutEndTransformFeedback
#define glEndTransformFeedbackEXT onutEndTransformFeedbackEXT
#define glEndTransformFeedbackNV onutEndTransformFeedbackNV
#define glEndVertexShaderEXT onutEndVertexShaderEXT
#define glEndVideoCaptureNV onutEndVideoCaptureNV
#define glEvalCoord1d onutEvalCoord1d
#define glEvalCoord1dv onutEvalCoord1dv
#define glEvalCoord1f onutEvalCoord1f
#define glEvalCoord1fv onutEvalCoord1fv
#define glEvalCoord1xOES onutEvalCoord1xOES
#define glEvalCoord1xvOES onutEvalCoord1xvOES
#define glEvalCoord2d onutEvalCoord2d
#define glEvalCoord2dv onutEvalCoord2dv
#define glEvalCoord2f onutEvalCoord2f
#define glEvalCoord2fv onutEvalCoord2fv
#define glEvalCoord2xOES onutEvalCoord2xOES
#define glEvalCoord2xvOES onutEvalCoord2xvOES
#define glEvalMapsNV onutEvalMapsNV
#define glEvalMesh1 onutEvalMesh1
#define glEvalMesh2 onutEvalMesh2
#define glEvalPoint1 onutEvalPoint1
#define glEvalPoint2 onutEvalPoint2
#define glEvaluateDepthValuesARB onutEvaluateDepthValuesARB
#define glExecuteProgramNV onutExecuteProgramNV
#define glExtGetBufferPointervQCOM onutExtGetBufferPointervQCOM
#define glExtGetBuffersQCOM onutExtGetBuffersQCOM
#define glExtGetFramebuffersQCOM onutExtGetFramebuffersQCOM
#define glExtGetProgramBinarySourceQCOM onutExtGetProgramBinarySourceQCOM
#define glExtGetProgramsQCOM onutExtGetProgramsQCOM
#define glExtGetRenderbuffersQCOM onutExtGetRenderbuffersQCOM
#define glExtGetShadersQCOM onutExtGetShadersQCOM
#define glExtGetTexLevelParameterivQCOM onutExtGetTexLevelParameterivQCOM
#define glExtGetTexSubImageQCOM onutExtGetTexSubImageQCOM
#define glExtGetTexturesQCOM onutExtGetTexturesQCOM
#define glExtIsProgramBinaryQCOM onutExtIsProgramBinaryQCOM
#define glExtTexObjectStateOverrideiQCOM onutExtTexObjectStateOverrideiQCOM
#define glExtractComponentEXT onutExtractComponentEXT
#define glFeedbackBuffer onutFeedbackBuffer
#define glFeedbackBufferxOES onutFeedbackBufferxOES
#define glFenceSync onutFenceSync
#define glFenceSyncAPPLE onutFenceSyncAPPLE
#define glFinalCombinerInputNV onutFinalCombinerInputNV
#define glFinish onutFinish
#define glFinishAsyncSGIX onutFinishAsyncSGIX
#define glFinishFenceAPPLE onutFinishFenceAPPLE
#define glFinishFenceNV onutFinishFenceNV
#define glFinishObjectAPPLE onutFinishObjectAPPLE
#define glFinishTextureSUNX onutFinishTextureSUNX
#define glFlush onutFlush
#define glFlushMappedBufferRange onutFlushMappedBufferRange
#define glFlushMappedBufferRangeAPPLE onutFlushMappedBufferRangeAPPLE
#define glFlushMappedBufferRangeEXT onutFlushMappedBufferRangeEXT
#define glFlushMappedNamedBufferRange onutFlushMappedNamedBufferRange
#define glFlushMappedNamedBufferRangeEXT onutFlushMappedNamedBufferRangeEXT
#define glFlushPixelDataRangeNV onutFlushPixelDataRangeNV
#define glFlushRasterSGIX onutFlushRasterSGIX
#define glFlushStaticDataIBM onutFlushStaticDataIBM
#define glFlushVertexArrayRangeAPPLE onutFlushVertexArrayRangeAPPLE
#define glFlushVertexArrayRangeNV onutFlushVertexArrayRangeNV
#define glFogCoordFormatNV onutFogCoordFormatNV
#define glFogCoordPointer onutFogCoordPointer
#define glFogCoordPointerEXT onutFogCoordPointerEXT
#define glFogCoordPointerListIBM onutFogCoordPointerListIBM
#define glFogCoordd onutFogCoordd
#define glFogCoorddEXT onutFogCoorddEXT
#define glFogCoorddv onutFogCoorddv
#define glFogCoorddvEXT onutFogCoorddvEXT
#define glFogCoordf onutFogCoordf
#define glFogCoordfEXT onutFogCoordfEXT
#define glFogCoordfv onutFogCoordfv
#define glFogCoordfvEXT onutFogCoordfvEXT
#define glFogCoordhNV onutFogCoordhNV
#define glFogCoordhvNV onutFogCoordhvNV
#define glFogFuncSGIS onutFogFuncSGIS
#define glFogf onutFogf
#define glFogfv onutFogfv
#define glFogi onutFogi
#define glFogiv onutFogiv
#define glFogx onutFogx
#define glFogxOES onutFogxOES
#define glFogxv onutFogxv
#define glFogxvOES onutFogxvOES
#define glFragmentColorMaterialSGIX onutFragmentColorMaterialSGIX
#define glFragmentCoverageColorNV onutFragmentCoverageColorNV
#define glFragmentLightModelfSGIX onutFragmentLightModelfSGIX
#define glFragmentLightModelfvSGIX onutFragmentLightModelfvSGIX
#define glFragmentLightModeliSGIX onutFragmentLightModeliSGIX
#define glFragmentLightModelivSGIX onutFragmentLightModelivSGIX
#define glFragmentLightfSGIX onutFragmentLightfSGIX
#define glFragmentLightfvSGIX onutFragmentLightfvSGIX
#define glFragmentLightiSGIX onutFragmentLightiSGIX
#define glFragmentLightivSGIX onutFragmentLightivSGIX
#define glFragmentMaterialfSGIX onutFragmentMaterialfSGIX
#define glFragmentMaterialfvSGIX onutFragmentMaterialfvSGIX
#define glFragmentMaterialiSGIX onutFragmentMaterialiSGIX
#define glFragmentMaterialivSGIX onutFragmentMaterialivSGIX
#define glFrameTerminatorGREMEDY onutFrameTerminatorGREMEDY
#define glFrameZoomSGIX onutFrameZoomSGIX
#define glFramebufferDrawBufferEXT onutFramebufferDrawBufferEXT
#define glFramebufferDrawBuffersEXT onutFramebufferDrawBuffersEXT
#define glFramebufferFetchBarrierQCOM onutFramebufferFetchBarrierQCOM
#define glFramebufferFoveationConfigQCOM onutFramebufferFoveationConfigQCOM
#define glFramebufferFoveationParametersQCOM onutFramebufferFoveationParametersQCOM
#define glFramebufferParameteri onutFramebufferParameteri
#define glFramebufferPixelLocalStorageSizeEXT onutFramebufferPixelLocalStorageSizeEXT
#define glFramebufferReadBufferEXT onutFramebufferReadBufferEXT
#define glFramebufferRenderbuffer onutFramebufferRenderbuffer
#define glFramebufferRenderbufferEXT onutFramebufferRenderbufferEXT
#define glFramebufferRenderbufferOES onutFramebufferRenderbufferOES
#define glFramebufferSampleLocationsfvARB onutFramebufferSampleLocationsfvARB
#define glFramebufferSampleLocationsfvNV onutFramebufferSampleLocationsfvNV
#define glFramebufferSamplePositionsfvAMD onutFramebufferSamplePositionsfvAMD
#define glFramebufferTexture onutFramebufferTexture
#define glFramebufferTexture1D onutFramebufferTexture1D
#define glFramebufferTexture1DEXT onutFramebufferTexture1DEXT
#define glFramebufferTexture2D onutFramebufferTexture2D
#define glFramebufferTexture2DDownsampleIMG onutFramebufferTexture2DDownsampleIMG
#define glFramebufferTexture2DEXT onutFramebufferTexture2DEXT
#define glFramebufferTexture2DMultisampleEXT onutFramebufferTexture2DMultisampleEXT
#define glFramebufferTexture2DMultisampleIMG onutFramebufferTexture2DMultisampleIMG
#define glFramebufferTexture2DOES onutFramebufferTexture2DOES
#define glFramebufferTexture3D onutFramebufferTexture3D
#define glFramebufferTexture3DEXT onutFramebufferTexture3DEXT
#define glFramebufferTexture3DOES onutFramebufferTexture3DOES
#define glFramebufferTextureARB onutFramebufferTextureARB
#define glFramebufferTextureEXT onutFramebufferTextureEXT
#define glFramebufferTextureFaceARB onutFramebufferTextureFaceARB
#define glFramebufferTextureFaceEXT onutFramebufferTextureFaceEXT
#define glFramebufferTextureLayer onutFramebufferTextureLayer
#define glFramebufferTextureLayerARB onutFramebufferTextureLayerARB
#define glFramebufferTextureLayerDownsampleIMG onutFramebufferTextureLayerDownsampleIMG
#define glFramebufferTextureLayerEXT onutFramebufferTextureLayerEXT
#define glFramebufferTextureMultisampleMultiviewOVR onutFramebufferTextureMultisampleMultiviewOVR
#define glFramebufferTextureMultiviewOVR onutFramebufferTextureMultiviewOVR
#define glFramebufferTextureOES onutFramebufferTextureOES
#define glFreeObjectBufferATI onutFreeObjectBufferATI
#define glFrontFace onutFrontFace
#define glFrustum onutFrustum
#define glFrustumf onutFrustumf
#define glFrustumfOES onutFrustumfOES
#define glFrustumx onutFrustumx
#define glFrustumxOES onutFrustumxOES
#define glGenAsyncMarkersSGIX onutGenAsyncMarkersSGIX
#define glGenBuffers onutGenBuffers
#define glGenBuffersARB onutGenBuffersARB
#define glGenFencesAPPLE onutGenFencesAPPLE
#define glGenFencesNV onutGenFencesNV
#define glGenFragmentShadersATI onutGenFragmentShadersATI
#define glGenFramebuffers onutGenFramebuffers
#define glGenFramebuffersEXT onutGenFramebuffersEXT
#define glGenFramebuffersOES onutGenFramebuffersOES
#define glGenLists onutGenLists
#define glGenNamesAMD onutGenNamesAMD
#define glGenOcclusionQueriesNV onutGenOcclusionQueriesNV
#define glGenPathsNV onutGenPathsNV
#define glGenPerfMonitorsAMD onutGenPerfMonitorsAMD
#define glGenProgramPipelines onutGenProgramPipelines
#define glGenProgramPipelinesEXT onutGenProgramPipelinesEXT
#define glGenProgramsARB onutGenProgramsARB
#define glGenProgramsNV onutGenProgramsNV
#define glGenQueries onutGenQueries
#define glGenQueriesARB onutGenQueriesARB
#define glGenQueriesEXT onutGenQueriesEXT
#define glGenRenderbuffers onutGenRenderbuffers
#define glGenRenderbuffersEXT onutGenRenderbuffersEXT
#define glGenRenderbuffersOES onutGenRenderbuffersOES
#define glGenSamplers onutGenSamplers
#define glGenSemaphoresEXT onutGenSemaphoresEXT
#define glGenSymbolsEXT onutGenSymbolsEXT
#define glGenTextures onutGenTextures
#define glGenTexturesEXT onutGenTexturesEXT
#define glGenTransformFeedbacks onutGenTransformFeedbacks
#define glGenTransformFeedbacksNV onutGenTransformFeedbacksNV
#define glGenVertexArrays onutGenVertexArrays
#define glGenVertexArraysAPPLE onutGenVertexArraysAPPLE
#define glGenVertexArraysOES onutGenVertexArraysOES
#define glGenVertexShadersEXT onutGenVertexShadersEXT
#define glGenerateMipmap onutGenerateMipmap
#define glGenerateMipmapEXT onutGenerateMipmapEXT
#define glGenerateMipmapOES onutGenerateMipmapOES
#define glGenerateMultiTexMipmapEXT onutGenerateMultiTexMipmapEXT
#define glGenerateTextureMipmap onutGenerateTextureMipmap
#define glGenerateTextureMipmapEXT onutGenerateTextureMipmapEXT
#define glGetActiveAtomicCounterBufferiv onutGetActiveAtomicCounterBufferiv
#define glGetActiveAttrib onutGetActiveAttrib
#define glGetActiveAttribARB onutGetActiveAttribARB
#define glGetActiveSubroutineName onutGetActiveSubroutineName
#define glGetActiveSubroutineUniformName onutGetActiveSubroutineUniformName
#define glGetActiveSubroutineUniformiv onutGetActiveSubroutineUniformiv
#define glGetActiveUniform onutGetActiveUniform
#define glGetActiveUniformARB onutGetActiveUniformARB
#define glGetActiveUniformBlockName onutGetActiveUniformBlockName
#define glGetActiveUniformBlockiv onutGetActiveUniformBlockiv
#define glGetActiveUniformName onutGetActiveUniformName
#define glGetActiveUniformsiv onutGetActiveUniformsiv
#define glGetActiveVaryingNV onutGetActiveVaryingNV
#define glGetArrayObjectfvATI onutGetArrayObjectfvATI
#define glGetArrayObjectivATI onutGetArrayObjectivATI
#define glGetAttachedObjectsARB onutGetAttachedObjectsARB
#define glGetAttachedShaders onutGetAttachedShaders
#define glGetAttribLocation onutGetAttribLocation
#define glGetAttribLocationARB onutGetAttribLocationARB
#define glGetBooleanIndexedvEXT onutGetBooleanIndexedvEXT
#define glGetBooleani_v onutGetBooleani_v
#define glGetBooleanv onutGetBooleanv
#define glGetBufferParameteri64v onutGetBufferParameteri64v
#define glGetBufferParameteriv onutGetBufferParameteriv
#define glGetBufferParameterivARB onutGetBufferParameterivARB
#define glGetBufferParameterui64vNV onutGetBufferParameterui64vNV
#define glGetBufferPointerv onutGetBufferPointerv
#define glGetBufferPointervARB onutGetBufferPointervARB
#define glGetBufferPointervOES onutGetBufferPointervOES
#define glGetBufferSubData onutGetBufferSubData
#define glGetBufferSubDataARB onutGetBufferSubDataARB
#define glGetClipPlane onutGetClipPlane
#define glGetClipPlanef onutGetClipPlanef
#define glGetClipPlanefOES onutGetClipPlanefOES
#define glGetClipPlanex onutGetClipPlanex
#define glGetClipPlanexOES onutGetClipPlanexOES
#define glGetColorTable onutGetColorTable
#define glGetColorTableEXT onutGetColorTableEXT
#define glGetColorTableParameterfv onutGetColorTableParameterfv
#define glGetColorTableParameterfvEXT onutGetColorTableParameterfvEXT
#define glGetColorTableParameterfvSGI onutGetColorTableParameterfvSGI
#define glGetColorTableParameteriv onutGetColorTableParameteriv
#define glGetColorTableParameterivEXT onutGetColorTableParameterivEXT
#define glGetColorTableParameterivSGI onutGetColorTableParameterivSGI
#define glGetColorTableSGI onutGetColorTableSGI
#define glGetCombinerInputParameterfvNV onutGetCombinerInputParameterfvNV
#define glGetCombinerInputParameterivNV onutGetCombinerInputParameterivNV
#define glGetCombinerOutputParameterfvNV onutGetCombinerOutputParameterfvNV
#define glGetCombinerOutputParameterivNV onutGetCombinerOutputParameterivNV
#define glGetCombinerStageParameterfvNV onutGetCombinerStageParameterfvNV
#define glGetCommandHeaderNV onutGetCommandHeaderNV
#define glGetCompressedMultiTexImageEXT onutGetCompressedMultiTexImageEXT
#define glGetCompressedTexImage onutGetCompressedTexImage
#define glGetCompressedTexImageARB onutGetCompressedTexImageARB
#define glGetCompressedTextureImage onutGetCompressedTextureImage
#define glGetCompressedTextureImageEXT onutGetCompressedTextureImageEXT
#define glGetCompressedTextureSubImage onutGetCompressedTextureSubImage
#define glGetConvolutionFilter onutGetConvolutionFilter
#define glGetConvolutionFilterEXT onutGetConvolutionFilterEXT
#define glGetConvolutionParameterfv onutGetConvolutionParameterfv
#define glGetConvolutionParameterfvEXT onutGetConvolutionParameterfvEXT
#define glGetConvolutionParameteriv onutGetConvolutionParameteriv
#define glGetConvolutionParameterivEXT onutGetConvolutionParameterivEXT
#define glGetConvolutionParameterxvOES onutGetConvolutionParameterxvOES
#define glGetCoverageModulationTableNV onutGetCoverageModulationTableNV
#define glGetDebugMessageLog onutGetDebugMessageLog
#define glGetDebugMessageLogAMD onutGetDebugMessageLogAMD
#define glGetDebugMessageLogARB onutGetDebugMessageLogARB
#define glGetDebugMessageLogKHR onutGetDebugMessageLogKHR
#define glGetDetailTexFuncSGIS onutGetDetailTexFuncSGIS
#define glGetDoubleIndexedvEXT onutGetDoubleIndexedvEXT
#define glGetDoublei_v onutGetDoublei_v
#define glGetDoublei_vEXT onutGetDoublei_vEXT
#define glGetDoublev onutGetDoublev
#define glGetDriverControlStringQCOM onutGetDriverControlStringQCOM
#define glGetDriverControlsQCOM onutGetDriverControlsQCOM
#define glGetError onutGetError
#define glGetFenceivNV onutGetFenceivNV
#define glGetFinalCombinerInputParameterfvNV onutGetFinalCombinerInputParameterfvNV
#define glGetFinalCombinerInputParameterivNV onutGetFinalCombinerInputParameterivNV
#define glGetFirstPerfQueryIdINTEL onutGetFirstPerfQueryIdINTEL
#define glGetFixedv onutGetFixedv
#define glGetFixedvOES onutGetFixedvOES
#define glGetFloatIndexedvEXT onutGetFloatIndexedvEXT
#define glGetFloati_v onutGetFloati_v
#define glGetFloati_vEXT onutGetFloati_vEXT
#define glGetFloati_vNV onutGetFloati_vNV
#define glGetFloati_vOES onutGetFloati_vOES
#define glGetFloatv onutGetFloatv
#define glGetFogFuncSGIS onutGetFogFuncSGIS
#define glGetFragDataIndex onutGetFragDataIndex
#define glGetFragDataIndexEXT onutGetFragDataIndexEXT
#define glGetFragDataLocation onutGetFragDataLocation
#define glGetFragDataLocationEXT onutGetFragDataLocationEXT
#define glGetFragmentLightfvSGIX onutGetFragmentLightfvSGIX
#define glGetFragmentLightivSGIX onutGetFragmentLightivSGIX
#define glGetFragmentMaterialfvSGIX onutGetFragmentMaterialfvSGIX
#define glGetFragmentMaterialivSGIX onutGetFragmentMaterialivSGIX
#define glGetFramebufferAttachmentParameteriv onutGetFramebufferAttachmentParameteriv
#define glGetFramebufferAttachmentParameterivEXT onutGetFramebufferAttachmentParameterivEXT
#define glGetFramebufferAttachmentParameterivOES onutGetFramebufferAttachmentParameterivOES
#define glGetFramebufferParameterfvAMD onutGetFramebufferParameterfvAMD
#define glGetFramebufferParameteriv onutGetFramebufferParameteriv
#define glGetFramebufferParameterivEXT onutGetFramebufferParameterivEXT
#define glGetFramebufferPixelLocalStorageSizeEXT onutGetFramebufferPixelLocalStorageSizeEXT
#define glGetGraphicsResetStatus onutGetGraphicsResetStatus
#define glGetGraphicsResetStatusARB onutGetGraphicsResetStatusARB
#define glGetGraphicsResetStatusEXT onutGetGraphicsResetStatusEXT
#define glGetGraphicsResetStatusKHR onutGetGraphicsResetStatusKHR
#define glGetHandleARB onutGetHandleARB
#define glGetHistogram onutGetHistogram
#define glGetHistogramEXT onutGetHistogramEXT
#define glGetHistogramParameterfv onutGetHistogramParameterfv
#define glGetHistogramParameterfvEXT onutGetHistogramParameterfvEXT
#define glGetHistogramParameteriv onutGetHistogramParameteriv
#define glGetHistogramParameterivEXT onutGetHistogramParameterivEXT
#define glGetHistogramParameterxvOES onutGetHistogramParameterxvOES
#define glGetImageHandleARB onutGetImageHandleARB
#define glGetImageHandleNV onutGetImageHandleNV
#define glGetImageTransformParameterfvHP onutGetImageTransformParameterfvHP
#define glGetImageTransformParameterivHP onutGetImageTransformParameterivHP
#define glGetInfoLogARB onutGetInfoLogARB
#define glGetInstrumentsSGIX onutGetInstrumentsSGIX
#define glGetInteger64i_v onutGetInteger64i_v
#define glGetInteger64v onutGetInteger64v
#define glGetInteger64vAPPLE onutGetInteger64vAPPLE
#define glGetIntegerIndexedvEXT onutGetIntegerIndexedvEXT
#define glGetIntegeri_v onutGetIntegeri_v
#define glGetIntegeri_vEXT onutGetIntegeri_vEXT
#define glGetIntegerui64i_vNV onutGetIntegerui64i_vNV
#define glGetIntegerui64vNV onutGetIntegerui64vNV
#define glGetIntegerv onutGetIntegerv
#define glGetInternalformatSampleivNV onutGetInternalformatSampleivNV
#define glGetInternalformati64v onutGetInternalformati64v
#define glGetInternalformativ onutGetInternalformativ
#define glGetInvariantBooleanvEXT onutGetInvariantBooleanvEXT
#define glGetInvariantFloatvEXT onutGetInvariantFloatvEXT
#define glGetInvariantIntegervEXT onutGetInvariantIntegervEXT
#define glGetLightfv onutGetLightfv
#define glGetLightiv onutGetLightiv
#define glGetLightxOES onutGetLightxOES
#define glGetLightxv onutGetLightxv
#define glGetLightxvOES onutGetLightxvOES
#define glGetListParameterfvSGIX onutGetListParameterfvSGIX
#define glGetListParameterivSGIX onutGetListParameterivSGIX
#define glGetLocalConstantBooleanvEXT onutGetLocalConstantBooleanvEXT
#define glGetLocalConstantFloatvEXT onutGetLocalConstantFloatvEXT
#define glGetLocalConstantIntegervEXT onutGetLocalConstantIntegervEXT
#define glGetMapAttribParameterfvNV onutGetMapAttribParameterfvNV
#define glGetMapAttribParameterivNV onutGetMapAttribParameterivNV
#define glGetMapControlPointsNV onutGetMapControlPointsNV
#define glGetMapParameterfvNV onutGetMapParameterfvNV
#define glGetMapParameterivNV onutGetMapParameterivNV
#define glGetMapdv onutGetMapdv
#define glGetMapfv onutGetMapfv
#define glGetMapiv onutGetMapiv
#define glGetMapxvOES onutGetMapxvOES
#define glGetMaterialfv onutGetMaterialfv
#define glGetMaterialiv onutGetMaterialiv
#define glGetMaterialxOES onutGetMaterialxOES
#define glGetMaterialxv onutGetMaterialxv
#define glGetMaterialxvOES onutGetMaterialxvOES
#define glGetMemoryObjectParameterivEXT onutGetMemoryObjectParameterivEXT
#define glGetMinmax onutGetMinmax
#define glGetMinmaxEXT onutGetMinmaxEXT
#define glGetMinmaxParameterfv onutGetMinmaxParameterfv
#define glGetMinmaxParameterfvEXT onutGetMinmaxParameterfvEXT
#define glGetMinmaxParameteriv onutGetMinmaxParameteriv
#define glGetMinmaxParameterivEXT onutGetMinmaxParameterivEXT
#define glGetMultiTexEnvfvEXT onutGetMultiTexEnvfvEXT
#define glGetMultiTexEnvivEXT onutGetMultiTexEnvivEXT
#define glGetMultiTexGendvEXT onutGetMultiTexGendvEXT
#define glGetMultiTexGenfvEXT onutGetMultiTexGenfvEXT
#define glGetMultiTexGenivEXT onutGetMultiTexGenivEXT
#define glGetMultiTexImageEXT onutGetMultiTexImageEXT
#define glGetMultiTexLevelParameterfvEXT onutGetMultiTexLevelParameterfvEXT
#define glGetMultiTexLevelParameterivEXT onutGetMultiTexLevelParameterivEXT
#define glGetMultiTexParameterIivEXT onutGetMultiTexParameterIivEXT
#define glGetMultiTexParameterIuivEXT onutGetMultiTexParameterIuivEXT
#define glGetMultiTexParameterfvEXT onutGetMultiTexParameterfvEXT
#define glGetMultiTexParameterivEXT onutGetMultiTexParameterivEXT
#define glGetMultisamplefv onutGetMultisamplefv
#define glGetMultisamplefvNV onutGetMultisamplefvNV
#define glGetNamedBufferParameteri64v onutGetNamedBufferParameteri64v
#define glGetNamedBufferParameteriv onutGetNamedBufferParameteriv
#define glGetNamedBufferParameterivEXT onutGetNamedBufferParameterivEXT
#define glGetNamedBufferParameterui64vNV onutGetNamedBufferParameterui64vNV
#define glGetNamedBufferPointerv onutGetNamedBufferPointerv
#define glGetNamedBufferPointervEXT onutGetNamedBufferPointervEXT
#define glGetNamedBufferSubData onutGetNamedBufferSubData
#define glGetNamedBufferSubDataEXT onutGetNamedBufferSubDataEXT
#define glGetNamedFramebufferAttachmentParameteriv onutGetNamedFramebufferAttachmentParameteriv
#define glGetNamedFramebufferAttachmentParameterivEXT onutGetNamedFramebufferAttachmentParameterivEXT
#define glGetNamedFramebufferParameterfvAMD onutGetNamedFramebufferParameterfvAMD
#define glGetNamedFramebufferParameteriv onutGetNamedFramebufferParameteriv
#define glGetNamedFramebufferParameterivEXT onutGetNamedFramebufferParameterivEXT
#define glGetNamedProgramLocalParameterIivEXT onutGetNamedProgramLocalParameterIivEXT
#define glGetNamedProgramLocalParameterIuivEXT onutGetNamedProgramLocalParameterIuivEXT
#define glGetNamedProgramLocalParameterdvEXT onutGetNamedProgramLocalParameterdvEXT
#define glGetNamedProgramLocalParameterfvEXT onutGetNamedProgramLocalParameterfvEXT
#define glGetNamedProgramStringEXT onutGetNamedProgramStringEXT
#define glGetNamedProgramivEXT onutGetNamedProgramivEXT
#define glGetNamedRenderbufferParameteriv onutGetNamedRenderbufferParameteriv
#define glGetNamedRenderbufferParameterivEXT onutGetNamedRenderbufferParameterivEXT
#define glGetNamedStringARB onutGetNamedStringARB
#define glGetNamedStringivARB onutGetNamedStringivARB
#define glGetNextPerfQueryIdINTEL onutGetNextPerfQueryIdINTEL
#define glGetObjectBufferfvATI onutGetObjectBufferfvATI
#define glGetObjectBufferivATI onutGetObjectBufferivATI
#define glGetObjectLabel onutGetObjectLabel
#define glGetObjectLabelEXT onutGetObjectLabelEXT
#define glGetObjectLabelKHR onutGetObjectLabelKHR
#define glGetObjectParameterfvARB onutGetObjectParameterfvARB
#define glGetObjectParameterivAPPLE onutGetObjectParameterivAPPLE
#define glGetObjectParameterivARB onutGetObjectParameterivARB
#define glGetObjectPtrLabel onutGetObjectPtrLabel
#define glGetObjectPtrLabelKHR onutGetObjectPtrLabelKHR
#define glGetOcclusionQueryivNV onutGetOcclusionQueryivNV
#define glGetOcclusionQueryuivNV onutGetOcclusionQueryuivNV
#define glGetPathColorGenfvNV onutGetPathColorGenfvNV
#define glGetPathColorGenivNV onutGetPathColorGenivNV
#define glGetPathCommandsNV onutGetPathCommandsNV
#define glGetPathCoordsNV onutGetPathCoordsNV
#define glGetPathDashArrayNV onutGetPathDashArrayNV
#define glGetPathLengthNV onutGetPathLengthNV
#define glGetPathMetricRangeNV onutGetPathMetricRangeNV
#define glGetPathMetricsNV onutGetPathMetricsNV
#define glGetPathParameterfvNV onutGetPathParameterfvNV
#define glGetPathParameterivNV onutGetPathParameterivNV
#define glGetPathSpacingNV onutGetPathSpacingNV
#define glGetPathTexGenfvNV onutGetPathTexGenfvNV
#define glGetPathTexGenivNV onutGetPathTexGenivNV
#define glGetPerfCounterInfoINTEL onutGetPerfCounterInfoINTEL
#define glGetPerfMonitorCounterDataAMD onutGetPerfMonitorCounterDataAMD
#define glGetPerfMonitorCounterInfoAMD onutGetPerfMonitorCounterInfoAMD
#define glGetPerfMonitorCounterStringAMD onutGetPerfMonitorCounterStringAMD
#define glGetPerfMonitorCountersAMD onutGetPerfMonitorCountersAMD
#define glGetPerfMonitorGroupStringAMD onutGetPerfMonitorGroupStringAMD
#define glGetPerfMonitorGroupsAMD onutGetPerfMonitorGroupsAMD
#define glGetPerfQueryDataINTEL onutGetPerfQueryDataINTEL
#define glGetPerfQueryIdByNameINTEL onutGetPerfQueryIdByNameINTEL
#define glGetPerfQueryInfoINTEL onutGetPerfQueryInfoINTEL
#define glGetPixelMapfv onutGetPixelMapfv
#define glGetPixelMapuiv onutGetPixelMapuiv
#define glGetPixelMapusv onutGetPixelMapusv
#define glGetPixelMapxv onutGetPixelMapxv
#define glGetPixelTexGenParameterfvSGIS onutGetPixelTexGenParameterfvSGIS
#define glGetPixelTexGenParameterivSGIS onutGetPixelTexGenParameterivSGIS
#define glGetPixelTransformParameterfvEXT onutGetPixelTransformParameterfvEXT
#define glGetPixelTransformParameterivEXT onutGetPixelTransformParameterivEXT
#define glGetPointerIndexedvEXT onutGetPointerIndexedvEXT
#define glGetPointeri_vEXT onutGetPointeri_vEXT
#define glGetPointerv onutGetPointerv
#define glGetPointervEXT onutGetPointervEXT
#define glGetPointervKHR onutGetPointervKHR
#define glGetPolygonStipple onutGetPolygonStipple
#define glGetProgramBinary onutGetProgramBinary
#define glGetProgramBinaryOES onutGetProgramBinaryOES
#define glGetProgramEnvParameterIivNV onutGetProgramEnvParameterIivNV
#define glGetProgramEnvParameterIuivNV onutGetProgramEnvParameterIuivNV
#define glGetProgramEnvParameterdvARB onutGetProgramEnvParameterdvARB
#define glGetProgramEnvParameterfvARB onutGetProgramEnvParameterfvARB
#define glGetProgramInfoLog onutGetProgramInfoLog
#define glGetProgramInterfaceiv onutGetProgramInterfaceiv
#define glGetProgramLocalParameterIivNV onutGetProgramLocalParameterIivNV
#define glGetProgramLocalParameterIuivNV onutGetProgramLocalParameterIuivNV
#define glGetProgramLocalParameterdvARB onutGetProgramLocalParameterdvARB
#define glGetProgramLocalParameterfvARB onutGetProgramLocalParameterfvARB
#define glGetProgramNamedParameterdvNV onutGetProgramNamedParameterdvNV
#define glGetProgramNamedParameterfvNV onutGetProgramNamedParameterfvNV
#define glGetProgramParameterdvNV onutGetProgramParameterdvNV
#define glGetProgramParameterfvNV onutGetProgramParameterfvNV
#define glGetProgramPipelineInfoLog onutGetProgramPipelineInfoLog
#define glGetProgramPipelineInfoLogEXT onutGetProgramPipelineInfoLogEXT
#define glGetProgramPipelineiv onutGetProgramPipelineiv
#define glGetProgramPipelineivEXT onutGetProgramPipelineivEXT
#define glGetProgramResourceIndex onutGetProgramResourceIndex
#define glGetProgramResourceLocation onutGetProgramResourceLocation
#define glGetProgramResourceLocationIndex onutGetProgramResourceLocationIndex
#define glGetProgramResourceLocationIndexEXT onutGetProgramResourceLocationIndexEXT
#define glGetProgramResourceName onutGetProgramResourceName
#define glGetProgramResourcefvNV onutGetProgramResourcefvNV
#define glGetProgramResourceiv onutGetProgramResourceiv
#define glGetProgramStageiv onutGetProgramStageiv
#define glGetProgramStringARB onutGetProgramStringARB
#define glGetProgramStringNV onutGetProgramStringNV
#define glGetProgramSubroutineParameteruivNV onutGetProgramSubroutineParameteruivNV
#define glGetProgramiv onutGetProgramiv
#define glGetProgramivARB onutGetProgramivARB
#define glGetProgramivNV onutGetProgramivNV
#define glGetQueryBufferObjecti64v onutGetQueryBufferObjecti64v
#define glGetQueryBufferObjectiv onutGetQueryBufferObjectiv
#define glGetQueryBufferObjectui64v onutGetQueryBufferObjectui64v
#define glGetQueryBufferObjectuiv onutGetQueryBufferObjectuiv
#define glGetQueryIndexediv onutGetQueryIndexediv
#define glGetQueryObjecti64v onutGetQueryObjecti64v
#define glGetQueryObjecti64vEXT onutGetQueryObjecti64vEXT
#define glGetQueryObjectiv onutGetQueryObjectiv
#define glGetQueryObjectivARB onutGetQueryObjectivARB
#define glGetQueryObjectivEXT onutGetQueryObjectivEXT
#define glGetQueryObjectui64v onutGetQueryObjectui64v
#define glGetQueryObjectui64vEXT onutGetQueryObjectui64vEXT
#define glGetQueryObjectuiv onutGetQueryObjectuiv
#define glGetQueryObjectuivARB onutGetQueryObjectuivARB
#define glGetQueryObjectuivEXT onutGetQueryObjectuivEXT
#define glGetQueryiv onutGetQueryiv
#define glGetQueryivARB onutGetQueryivARB
#define glGetQueryivEXT onutGetQueryivEXT
#define glGetRenderbufferParameteriv onutGetRenderbufferParameteriv
#define glGetRenderbufferParameterivEXT onutGetRenderbufferParameterivEXT
#define glGetRenderbufferParameterivOES onutGetRenderbufferParameterivOES
#define glGetSamplerParameterIiv onutGetSamplerParameterIiv
#define glGetSamplerParameterIivEXT onutGetSamplerParameterIivEXT
#define glGetSamplerParameterIivOES onutGetSamplerParameterIivOES
#define glGetSamplerParameterIuiv onutGetSamplerParameterIuiv
#define glGetSamplerParameterIuivEXT onutGetSamplerParameterIuivEXT
#define glGetSamplerParameterIuivOES onutGetSamplerParameterIuivOES
#define glGetSamplerParameterfv onutGetSamplerParameterfv
#define glGetSamplerParameteriv onutGetSamplerParameteriv
#define glGetSemaphoreParameterui64vEXT onutGetSemaphoreParameterui64vEXT
#define glGetSeparableFilter onutGetSeparableFilter
#define glGetSeparableFilterEXT onutGetSeparableFilterEXT
#define glGetShaderInfoLog onutGetShaderInfoLog
#define glGetShaderPrecisionFormat onutGetShaderPrecisionFormat
#define glGetShaderSource onutGetShaderSource
#define glGetShaderSourceARB onutGetShaderSourceARB
#define glGetShaderiv onutGetShaderiv
#define glGetSharpenTexFuncSGIS onutGetSharpenTexFuncSGIS
#define glGetStageIndexNV onutGetStageIndexNV
#define glGetString onutGetString
#define glGetStringi onutGetStringi
#define glGetSubroutineIndex onutGetSubroutineIndex
#define glGetSubroutineUniformLocation onutGetSubroutineUniformLocation
#define glGetSynciv onutGetSynciv
#define glGetSyncivAPPLE onutGetSyncivAPPLE
#define glGetTexBumpParameterfvATI onutGetTexBumpParameterfvATI
#define glGetTexBumpParameterivATI onutGetTexBumpParameterivATI
#define glGetTexEnvfv onutGetTexEnvfv
#define glGetTexEnviv onutGetTexEnviv
#define glGetTexEnvxv onutGetTexEnvxv
#define glGetTexEnvxvOES onutGetTexEnvxvOES
#define glGetTexFilterFuncSGIS onutGetTexFilterFuncSGIS
#define glGetTexGendv onutGetTexGendv
#define glGetTexGenfv onutGetTexGenfv
#define glGetTexGenfvOES onutGetTexGenfvOES
#define glGetTexGeniv onutGetTexGeniv
#define glGetTexGenivOES onutGetTexGenivOES
#define glGetTexGenxvOES onutGetTexGenxvOES
#define glGetTexImage onutGetTexImage
#define glGetTexLevelParameterfv onutGetTexLevelParameterfv
#define glGetTexLevelParameteriv onutGetTexLevelParameteriv
#define glGetTexLevelParameterxvOES onutGetTexLevelParameterxvOES
#define glGetTexParameterIiv onutGetTexParameterIiv
#define glGetTexParameterIivEXT onutGetTexParameterIivEXT
#define glGetTexParameterIivOES onutGetTexParameterIivOES
#define glGetTexParameterIuiv onutGetTexParameterIuiv
#define glGetTexParameterIuivEXT onutGetTexParameterIuivEXT
#define glGetTexParameterIuivOES onutGetTexParameterIuivOES
#define glGetTexParameterPointervAPPLE onutGetTexParameterPointervAPPLE
#define glGetTexParameterfv onutGetTexParameterfv
#define glGetTexParameteriv onutGetTexParameteriv
#define glGetTexParameterxv onutGetTexParameterxv
#define glGetTexParameterxvOES onutGetTexParameterxvOES
#define glGetTextureHandleARB onutGetTextureHandleARB
#define glGetTextureHandleIMG onutGetTextureHandleIMG
#define glGetTextureHandleNV onutGetTextureHandleNV
#define glGetTextureImage onutGetTextureImage
#define glGetTextureImageEXT onutGetTextureImageEXT
#define glGetTextureLevelParameterfv onutGetTextureLevelParameterfv
#define glGetTextureLevelParameterfvEXT onutGetTextureLevelParameterfvEXT
#define glGetTextureLevelParameteriv onutGetTextureLevelParameteriv
#define glGetTextureLevelParameterivEXT onutGetTextureLevelParameterivEXT
#define glGetTextureParameterIiv onutGetTextureParameterIiv
#define glGetTextureParameterIivEXT onutGetTextureParameterIivEXT
#define glGetTextureParameterIuiv onutGetTextureParameterIuiv
#define glGetTextureParameterIuivEXT onutGetTextureParameterIuivEXT
#define glGetTextureParameterfv onutGetTextureParameterfv
#define glGetTextureParameterfvEXT onutGetTextureParameterfvEXT
#define glGetTextureParameteriv onutGetTextureParameteriv
#define glGetTextureParameterivEXT onutGetTextureParameterivEXT
#define glGetTextureSamplerHandleARB onutGetTextureSamplerHandleARB
#define glGetTextureSamplerHandleIMG onutGetTextureSamplerHandleIMG
#define glGetTextureSamplerHandleNV onutGetTextureSamplerHandleNV
#define glGetTextureSubImage onutGetTextureSubImage
#define glGetTrackMatrixivNV onutGetTrackMatrixivNV
#define glGetTransformFeedbackVarying onutGetTransformFeedbackVarying
#define glGetTransformFeedbackVaryingEXT onutGetTransformFeedbackVaryingEXT
#define glGetTransformFeedbackVaryingNV onutGetTransformFeedbackVaryingNV
#define glGetTransformFeedbacki64_v onutGetTransformFeedbacki64_v
#define glGetTransformFeedbacki_v onutGetTransformFeedbacki_v
#define glGetTransformFeedbackiv onutGetTransformFeedbackiv
#define glGetTranslatedShaderSourceANGLE onutGetTranslatedShaderSourceANGLE
#define glGetUniformBlockIndex onutGetUniformBlockIndex
#define glGetUniformBufferSizeEXT onutGetUniformBufferSizeEXT
#define glGetUniformIndices onutGetUniformIndices
#define glGetUniformLocation onutGetUniformLocation
#define glGetUniformLocationARB onutGetUniformLocationARB
#define glGetUniformOffsetEXT onutGetUniformOffsetEXT
#define glGetUniformSubroutineuiv onutGetUniformSubroutineuiv
#define glGetUniformdv onutGetUniformdv
#define glGetUniformfv onutGetUniformfv
#define glGetUniformfvARB onutGetUniformfvARB
#define glGetUniformi64vARB onutGetUniformi64vARB
#define glGetUniformi64vNV onutGetUniformi64vNV
#define glGetUniformiv onutGetUniformiv
#define glGetUniformivARB onutGetUniformivARB
#define glGetUniformui64vARB onutGetUniformui64vARB
#define glGetUniformui64vNV onutGetUniformui64vNV
#define glGetUniformuiv onutGetUniformuiv
#define glGetUniformuivEXT onutGetUniformuivEXT
#define glGetUnsignedBytei_vEXT onutGetUnsignedBytei_vEXT
#define glGetUnsignedBytevEXT onutGetUnsignedBytevEXT
#define glGetVariantArrayObjectfvATI onutGetVariantArrayObjectfvATI
#define glGetVariantArrayObjectivATI onutGetVariantArrayObjectivATI
#define glGetVariantBooleanvEXT onutGetVariantBooleanvEXT
#define glGetVariantFloatvEXT onutGetVariantFloatvEXT
#define glGetVariantIntegervEXT onutGetVariantIntegervEXT
#define glGetVariantPointervEXT onutGetVariantPointervEXT
#define glGetVaryingLocationNV onutGetVaryingLocationNV
#define glGetVertexArrayIndexed64iv onutGetVertexArrayIndexed64iv
#define glGetVertexArrayIndexediv onutGetVertexArrayIndexediv
#define glGetVertexArrayIntegeri_vEXT onutGetVertexArrayIntegeri_vEXT
#define glGetVertexArrayIntegervEXT onutGetVertexArrayIntegervEXT
#define glGetVertexArrayPointeri_vEXT onutGetVertexArrayPointeri_vEXT
#define glGetVertexArrayPointervEXT onutGetVertexArrayPointervEXT
#define glGetVertexArrayiv onutGetVertexArrayiv
#define glGetVertexAttribArrayObjectfvATI onutGetVertexAttribArrayObjectfvATI
#define glGetVertexAttribArrayObjectivATI onutGetVertexAttribArrayObjectivATI
#define glGetVertexAttribIiv onutGetVertexAttribIiv
#define glGetVertexAttribIivEXT onutGetVertexAttribIivEXT
#define glGetVertexAttribIuiv onutGetVertexAttribIuiv
#define glGetVertexAttribIuivEXT onutGetVertexAttribIuivEXT
#define glGetVertexAttribLdv onutGetVertexAttribLdv
#define glGetVertexAttribLdvEXT onutGetVertexAttribLdvEXT
#define glGetVertexAttribLi64vNV onutGetVertexAttribLi64vNV
#define glGetVertexAttribLui64vARB onutGetVertexAttribLui64vARB
#define glGetVertexAttribLui64vNV onutGetVertexAttribLui64vNV
#define glGetVertexAttribPointerv onutGetVertexAttribPointerv
#define glGetVertexAttribPointervARB onutGetVertexAttribPointervARB
#define glGetVertexAttribPointervNV onutGetVertexAttribPointervNV
#define glGetVertexAttribdv onutGetVertexAttribdv
#define glGetVertexAttribdvARB onutGetVertexAttribdvARB
#define glGetVertexAttribdvNV onutGetVertexAttribdvNV
#define glGetVertexAttribfv onutGetVertexAttribfv
#define glGetVertexAttribfvARB onutGetVertexAttribfvARB
#define glGetVertexAttribfvNV onutGetVertexAttribfvNV
#define glGetVertexAttribiv onutGetVertexAttribiv
#define glGetVertexAttribivARB onutGetVertexAttribivARB
#define glGetVertexAttribivNV onutGetVertexAttribivNV
#define glGetVideoCaptureStreamdvNV onutGetVideoCaptureStreamdvNV
#define glGetVideoCaptureStreamfvNV onutGetVideoCaptureStreamfvNV
#define glGetVideoCaptureStreamivNV onutGetVideoCaptureStreamivNV
#define glGetVideoCaptureivNV onutGetVideoCaptureivNV
#define glGetVideoi64vNV onutGetVideoi64vNV
#define glGetVideoivNV onutGetVideoivNV
#define glGetVideoui64vNV onutGetVideoui64vNV
#define glGetVideouivNV onutGetVideouivNV
#define glGetVkProcAddrNV onutGetVkProcAddrNV
#define glGetnColorTable onutGetnColorTable
#define glGetnColorTableARB onutGetnColorTableARB
#define glGetnCompressedTexImage onutGetnCompressedTexImage
#define glGetnCompressedTexImageARB onutGetnCompressedTexImageARB
#define glGetnConvolutionFilter onutGetnConvolutionFilter
#define glGetnConvolutionFilterARB onutGetnConvolutionFilterARB
#define glGetnHistogram onutGetnHistogram
#define glGetnHistogramARB onutGetnHistogramARB
#define glGetnMapdv onutGetnMapdv
#define glGetnMapdvARB onutGetnMapdvARB
#define glGetnMapfv onutGetnMapfv
#define glGetnMapfvARB onutGetnMapfvARB
#define glGetnMapiv onutGetnMapiv
#define glGetnMapivARB onutGetnMapivARB
#define glGetnMinmax onutGetnMinmax
#define glGetnMinmaxARB onutGetnMinmaxARB
#define glGetnPixelMapfv onutGetnPixelMapfv
#define glGetnPixelMapfvARB onutGetnPixelMapfvARB
#define glGetnPixelMapuiv onutGetnPixelMapuiv
#define glGetnPixelMapuivARB onutGetnPixelMapuivARB
#define glGetnPixelMapusv onutGetnPixelMapusv
#define glGetnPixelMapusvARB onutGetnPixelMapusvARB
#define glGetnPolygonStipple onutGetnPolygonStipple
#define glGetnPolygonStippleARB onutGetnPolygonStippleARB
#define glGetnSeparableFilter onutGetnSeparableFilter
#define glGetnSeparableFilterARB onutGetnSeparableFilterARB
#define glGetnTexImage onutGetnTexImage
#define glGetnTexImageARB onutGetnTexImageARB
#define glGetnUniformdv onutGetnUniformdv
#define glGetnUniformdvARB onutGetnUniformdvARB
#define glGetnUniformfv onutGetnUniformfv
#define glGetnUniformfvARB onutGetnUniformfvARB
#define glGetnUniformfvEXT onutGetnUniformfvEXT
#define glGetnUniformfvKHR onutGetnUniformfvKHR
#define glGetnUniformi64vARB onutGetnUniformi64vARB
#define glGetnUniformiv onutGetnUniformiv
#define glGetnUniformivARB onutGetnUniformivARB
#define glGetnUniformivEXT onutGetnUniformivEXT
#define glGetnUniformivKHR onutGetnUniformivKHR
#define glGetnUniformui64vARB onutGetnUniformui64vARB
#define glGetnUniformuiv onutGetnUniformuiv
#define glGetnUniformuivARB onutGetnUniformuivARB
#define glGetnUniformuivKHR onutGetnUniformuivKHR
#define glGlobalAlphaFactorbSUN onutGlobalAlphaFactorbSUN
#define glGlobalAlphaFactordSUN onutGlobalAlphaFactordSUN
#define glGlobalAlphaFactorfSUN onutGlobalAlphaFactorfSUN
#define glGlobalAlphaFactoriSUN onutGlobalAlphaFactoriSUN
#define glGlobalAlphaFactorsSUN onutGlobalAlphaFactorsSUN
#define glGlobalAlphaFactorubSUN onutGlobalAlphaFactorubSUN
#define glGlobalAlphaFactoruiSUN onutGlobalAlphaFactoruiSUN
#define glGlobalAlphaFactorusSUN onutGlobalAlphaFactorusSUN
#define glHint onutHint
#define glHintPGI onutHintPGI
#define glHistogram onutHistogram
#define glHistogramEXT onutHistogramEXT
#define glIglooInterfaceSGIX onutIglooInterfaceSGIX
#define glImageTransformParameterfHP onutImageTransformParameterfHP
#define glImageTransformParameterfvHP onutImageTransformParameterfvHP
#define glImageTransformParameteriHP onutImageTransformParameteriHP
#define glImageTransformParameterivHP onutImageTransformParameterivHP
#define glImportMemoryFdEXT onutImportMemoryFdEXT
#define glImportMemoryWin32HandleEXT onutImportMemoryWin32HandleEXT
#define glImportMemoryWin32NameEXT onutImportMemoryWin32NameEXT
#define glImportSemaphoreFdEXT onutImportSemaphoreFdEXT
#define glImportSemaphoreWin32HandleEXT onutImportSemaphoreWin32HandleEXT
#define glImportSemaphoreWin32NameEXT onutImportSemaphoreWin32NameEXT
#define glImportSyncEXT onutImportSyncEXT
#define glIndexFormatNV onutIndexFormatNV
#define glIndexFuncEXT onutIndexFuncEXT
#define glIndexMask onutIndexMask
#define glIndexMaterialEXT onutIndexMaterialEXT
#define glIndexPointer onutIndexPointer
#define glIndexPointerEXT onutIndexPointerEXT
#define glIndexPointerListIBM onutIndexPointerListIBM
#define glIndexd onutIndexd
#define glIndexdv onutIndexdv
#define glIndexf onutIndexf
#define glIndexfv onutIndexfv
#define glIndexi onutIndexi
#define glIndexiv onutIndexiv
#define glIndexs onutIndexs
#define glIndexsv onutIndexsv
#define glIndexub onutIndexub
#define glIndexubv onutIndexubv
#define glIndexxOES onutIndexxOES
#define glIndexxvOES onutIndexxvOES
#define glInitNames onutInitNames
#define glInsertComponentEXT onutInsertComponentEXT
#define glInsertEventMarkerEXT onutInsertEventMarkerEXT
#define glInstrumentsBufferSGIX onutInstrumentsBufferSGIX
#define glInterleavedArrays onutInterleavedArrays
#define glInterpolatePathsNV onutInterpolatePathsNV
#define glInvalidateBufferData onutInvalidateBufferData
#define glInvalidateBufferSubData onutInvalidateBufferSubData
#define glInvalidateFramebuffer onutInvalidateFramebuffer
#define glInvalidateNamedFramebufferData onutInvalidateNamedFramebufferData
#define glInvalidateNamedFramebufferSubData onutInvalidateNamedFramebufferSubData
#define glInvalidateSubFramebuffer onutInvalidateSubFramebuffer
#define glInvalidateTexImage onutInvalidateTexImage
#define glInvalidateTexSubImage onutInvalidateTexSubImage
#define glIsAsyncMarkerSGIX onutIsAsyncMarkerSGIX
#define glIsBuffer onutIsBuffer
#define glIsBufferARB onutIsBufferARB
#define glIsBufferResidentNV onutIsBufferResidentNV
#define glIsCommandListNV onutIsCommandListNV
#define glIsEnabled onutIsEnabled
#define glIsEnabledIndexedEXT onutIsEnabledIndexedEXT
#define glIsEnabledi onutIsEnabledi
#define glIsEnablediEXT onutIsEnablediEXT
#define glIsEnablediNV onutIsEnablediNV
#define glIsEnablediOES onutIsEnablediOES
#define glIsFenceAPPLE onutIsFenceAPPLE
#define glIsFenceNV onutIsFenceNV
#define glIsFramebuffer onutIsFramebuffer
#define glIsFramebufferEXT onutIsFramebufferEXT
#define glIsFramebufferOES onutIsFramebufferOES
#define glIsImageHandleResidentARB onutIsImageHandleResidentARB
#define glIsImageHandleResidentNV onutIsImageHandleResidentNV
#define glIsList onutIsList
#define glIsMemoryObjectEXT onutIsMemoryObjectEXT
#define glIsNameAMD onutIsNameAMD
#define glIsNamedBufferResidentNV onutIsNamedBufferResidentNV
#define glIsNamedStringARB onutIsNamedStringARB
#define glIsObjectBufferATI onutIsObjectBufferATI
#define glIsOcclusionQueryNV onutIsOcclusionQueryNV
#define glIsPathNV onutIsPathNV
#define glIsPointInFillPathNV onutIsPointInFillPathNV
#define glIsPointInStrokePathNV onutIsPointInStrokePathNV
#define glIsProgram onutIsProgram
#define glIsProgramARB onutIsProgramARB
#define glIsProgramNV onutIsProgramNV
#define glIsProgramPipeline onutIsProgramPipeline
#define glIsProgramPipelineEXT onutIsProgramPipelineEXT
#define glIsQuery onutIsQuery
#define glIsQueryARB onutIsQueryARB
#define glIsQueryEXT onutIsQueryEXT
#define glIsRenderbuffer onutIsRenderbuffer
#define glIsRenderbufferEXT onutIsRenderbufferEXT
#define glIsRenderbufferOES onutIsRenderbufferOES
#define glIsSampler onutIsSampler
#define glIsSemaphoreEXT onutIsSemaphoreEXT
#define glIsShader onutIsShader
#define glIsStateNV onutIsStateNV
#define glIsSync onutIsSync
#define glIsSyncAPPLE onutIsSyncAPPLE
#define glIsTexture onutIsTexture
#define glIsTextureEXT onutIsTextureEXT
#define glIsTextureHandleResidentARB onutIsTextureHandleResidentARB
#define glIsTextureHandleResidentNV onutIsTextureHandleResidentNV
#define glIsTransformFeedback onutIsTransformFeedback
#define glIsTransformFeedbackNV onutIsTransformFeedbackNV
#define glIsVariantEnabledEXT onutIsVariantEnabledEXT
#define glIsVertexArray onutIsVertexArray
#define glIsVertexArrayAPPLE onutIsVertexArrayAPPLE
#define glIsVertexArrayOES onutIsVertexArrayOES
#define glIsVertexAttribEnabledAPPLE onutIsVertexAttribEnabledAPPLE
#define glLGPUCopyImageSubDataNVX onutLGPUCopyImageSubDataNVX
#define glLGPUInterlockNVX onutLGPUInterlockNVX
#define glLGPUNamedBufferSubDataNVX onutLGPUNamedBufferSubDataNVX
#define glLabelObjectEXT onutLabelObjectEXT
#define glLightEnviSGIX onutLightEnviSGIX
#define glLightModelf onutLightModelf
#define glLightModelfv onutLightModelfv
#define glLightModeli onutLightModeli
#define glLightModeliv onutLightModeliv
#define glLightModelx onutLightModelx
#define glLightModelxOES onutLightModelxOES
#define glLightModelxv onutLightModelxv
#define glLightModelxvOES onutLightModelxvOES
#define glLightf onutLightf
#define glLightfv onutLightfv
#define glLighti onutLighti
#define glLightiv onutLightiv
#define glLightx onutLightx
#define glLightxOES onutLightxOES
#define glLightxv onutLightxv
#define glLightxvOES onutLightxvOES
#define glLineStipple onutLineStipple
#define glLineWidth onutLineWidth
#define glLineWidthx onutLineWidthx
#define glLineWidthxOES onutLineWidthxOES
#define glLinkProgram onutLinkProgram
#define glLinkProgramARB onutLinkProgramARB
#define glListBase onutListBase
#define glListDrawCommandsStatesClientNV onutListDrawCommandsStatesClientNV
#define glListParameterfSGIX onutListParameterfSGIX
#define glListParameterfvSGIX onutListParameterfvSGIX
#define glListParameteriSGIX onutListParameteriSGIX
#define glListParameterivSGIX onutListParameterivSGIX
#define glLoadIdentity onutLoadIdentity
#define glLoadIdentityDeformationMapSGIX onutLoadIdentityDeformationMapSGIX
#define glLoadMatrixd onutLoadMatrixd
#define glLoadMatrixf onutLoadMatrixf
#define glLoadMatrixx onutLoadMatrixx
#define glLoadMatrixxOES onutLoadMatrixxOES
#define glLoadName onutLoadName
#define glLoadPaletteFromModelViewMatrixOES onutLoadPaletteFromModelViewMatrixOES
#define glLoadProgramNV onutLoadProgramNV
#define glLoadTransposeMatrixd onutLoadTransposeMatrixd
#define glLoadTransposeMatrixdARB onutLoadTransposeMatrixdARB
#define glLoadTransposeMatrixf onutLoadTransposeMatrixf
#define glLoadTransposeMatrixfARB onutLoadTransposeMatrixfARB
#define glLoadTransposeMatrixxOES onutLoadTransposeMatrixxOES
#define glLockArraysEXT onutLockArraysEXT
#define glLogicOp onutLogicOp
#define glMakeBufferNonResidentNV onutMakeBufferNonResidentNV
#define glMakeBufferResidentNV onutMakeBufferResidentNV
#define glMakeImageHandleNonResidentARB onutMakeImageHandleNonResidentARB
#define glMakeImageHandleNonResidentNV onutMakeImageHandleNonResidentNV
#define glMakeImageHandleResidentARB onutMakeImageHandleResidentARB
#define glMakeImageHandleResidentNV onutMakeImageHandleResidentNV
#define glMakeNamedBufferNonResidentNV onutMakeNamedBufferNonResidentNV
#define glMakeNamedBufferResidentNV onutMakeNamedBufferResidentNV
#define glMakeTextureHandleNonResidentARB onutMakeTextureHandleNonResidentARB
#define glMakeTextureHandleNonResidentNV onutMakeTextureHandleNonResidentNV
#define glMakeTextureHandleResidentARB onutMakeTextureHandleResidentARB
#define glMakeTextureHandleResidentNV onutMakeTextureHandleResidentNV
#define glMap1d onutMap1d
#define glMap1f onutMap1f
#define glMap1xOES onutMap1xOES
#define glMap2d onutMap2d
#define glMap2f onutMap2f
#define glMap2xOES onutMap2xOES
#define glMapBuffer onutMapBuffer
#define glMapBufferARB onutMapBufferARB
#define glMapBufferOES onutMapBufferOES
#define glMapBufferRange onutMapBufferRange
#define glMapBufferRangeEXT onutMapBufferRangeEXT
#define glMapControlPointsNV onutMapControlPointsNV
#define glMapGrid1d onutMapGrid1d
#define glMapGrid1f onutMapGrid1f
#define glMapGrid1xOES onutMapGrid1xOES
#define glMapGrid2d onutMapGrid2d
#define glMapGrid2f onutMapGrid2f
#define glMapGrid2xOES onutMapGrid2xOES
#define glMapNamedBuffer onutMapNamedBuffer
#define glMapNamedBufferEXT onutMapNamedBufferEXT
#define glMapNamedBufferRange onutMapNamedBufferRange
#define glMapNamedBufferRangeEXT onutMapNamedBufferRangeEXT
#define glMapObjectBufferATI onutMapObjectBufferATI
#define glMapParameterfvNV onutMapParameterfvNV
#define glMapParameterivNV onutMapParameterivNV
#define glMapTexture2DINTEL onutMapTexture2DINTEL
#define glMapVertexAttrib1dAPPLE onutMapVertexAttrib1dAPPLE
#define glMapVertexAttrib1fAPPLE onutMapVertexAttrib1fAPPLE
#define glMapVertexAttrib2dAPPLE onutMapVertexAttrib2dAPPLE
#define glMapVertexAttrib2fAPPLE onutMapVertexAttrib2fAPPLE
#define glMaterialf onutMaterialf
#define glMaterialfv onutMaterialfv
#define glMateriali onutMateriali
#define glMaterialiv onutMaterialiv
#define glMaterialx onutMaterialx
#define glMaterialxOES onutMaterialxOES
#define glMaterialxv onutMaterialxv
#define glMaterialxvOES onutMaterialxvOES
#define glMatrixFrustumEXT onutMatrixFrustumEXT
#define glMatrixIndexPointerARB onutMatrixIndexPointerARB
#define glMatrixIndexPointerOES onutMatrixIndexPointerOES
#define glMatrixIndexubvARB onutMatrixIndexubvARB
#define glMatrixIndexuivARB onutMatrixIndexuivARB
#define glMatrixIndexusvARB onutMatrixIndexusvARB
#define glMatrixLoad3x2fNV onutMatrixLoad3x2fNV
#define glMatrixLoad3x3fNV onutMatrixLoad3x3fNV
#define glMatrixLoadIdentityEXT onutMatrixLoadIdentityEXT
#define glMatrixLoadTranspose3x3fNV onutMatrixLoadTranspose3x3fNV
#define glMatrixLoadTransposedEXT onutMatrixLoadTransposedEXT
#define glMatrixLoadTransposefEXT onutMatrixLoadTransposefEXT
#define glMatrixLoaddEXT onutMatrixLoaddEXT
#define glMatrixLoadfEXT onutMatrixLoadfEXT
#define glMatrixMode onutMatrixMode
#define glMatrixMult3x2fNV onutMatrixMult3x2fNV
#define glMatrixMult3x3fNV onutMatrixMult3x3fNV
#define glMatrixMultTranspose3x3fNV onutMatrixMultTranspose3x3fNV
#define glMatrixMultTransposedEXT onutMatrixMultTransposedEXT
#define glMatrixMultTransposefEXT onutMatrixMultTransposefEXT
#define glMatrixMultdEXT onutMatrixMultdEXT
#define glMatrixMultfEXT onutMatrixMultfEXT
#define glMatrixOrthoEXT onutMatrixOrthoEXT
#define glMatrixPopEXT onutMatrixPopEXT
#define glMatrixPushEXT onutMatrixPushEXT
#define glMatrixRotatedEXT onutMatrixRotatedEXT
#define glMatrixRotatefEXT onutMatrixRotatefEXT
#define glMatrixScaledEXT onutMatrixScaledEXT
#define glMatrixScalefEXT onutMatrixScalefEXT
#define glMatrixTranslatedEXT onutMatrixTranslatedEXT
#define glMatrixTranslatefEXT onutMatrixTranslatefEXT
#define glMaxShaderCompilerThreadsARB onutMaxShaderCompilerThreadsARB
#define glMemoryBarrier onutMemoryBarrier
#define glMemoryBarrierByRegion onutMemoryBarrierByRegion
#define glMemoryBarrierEXT onutMemoryBarrierEXT
#define glMemoryObjectParameterivEXT onutMemoryObjectParameterivEXT
#define glMinSampleShading onutMinSampleShading
#define glMinSampleShadingARB onutMinSampleShadingARB
#define glMinSampleShadingOES onutMinSampleShadingOES
#define glMinmax onutMinmax
#define glMinmaxEXT onutMinmaxEXT
#define glMultMatrixd onutMultMatrixd
#define glMultMatrixf onutMultMatrixf
#define glMultMatrixx onutMultMatrixx
#define glMultMatrixxOES onutMultMatrixxOES
#define glMultTransposeMatrixd onutMultTransposeMatrixd
#define glMultTransposeMatrixdARB onutMultTransposeMatrixdARB
#define glMultTransposeMatrixf onutMultTransposeMatrixf
#define glMultTransposeMatrixfARB onutMultTransposeMatrixfARB
#define glMultTransposeMatrixxOES onutMultTransposeMatrixxOES
#define glMultiDrawArrays onutMultiDrawArrays
#define glMultiDrawArraysEXT onutMultiDrawArraysEXT
#define glMultiDrawArraysIndirect onutMultiDrawArraysIndirect
#define glMultiDrawArraysIndirectAMD onutMultiDrawArraysIndirectAMD
#define glMultiDrawArraysIndirectBindlessCountNV onutMultiDrawArraysIndirectBindlessCountNV
#define glMultiDrawArraysIndirectBindlessNV onutMultiDrawArraysIndirectBindlessNV
#define glMultiDrawArraysIndirectCountARB onutMultiDrawArraysIndirectCountARB
#define glMultiDrawArraysIndirectEXT onutMultiDrawArraysIndirectEXT
#define glMultiDrawElementArrayAPPLE onutMultiDrawElementArrayAPPLE
#define glMultiDrawElements onutMultiDrawElements
#define glMultiDrawElementsBaseVertex onutMultiDrawElementsBaseVertex
#define glMultiDrawElementsBaseVertexEXT onutMultiDrawElementsBaseVertexEXT
#define glMultiDrawElementsBaseVertexOES onutMultiDrawElementsBaseVertexOES
#define glMultiDrawElementsEXT onutMultiDrawElementsEXT
#define glMultiDrawElementsIndirect onutMultiDrawElementsIndirect
#define glMultiDrawElementsIndirectAMD onutMultiDrawElementsIndirectAMD
#define glMultiDrawElementsIndirectBindlessCountNV onutMultiDrawElementsIndirectBindlessCountNV
#define glMultiDrawElementsIndirectBindlessNV onutMultiDrawElementsIndirectBindlessNV
#define glMultiDrawElementsIndirectCountARB onutMultiDrawElementsIndirectCountARB
#define glMultiDrawElementsIndirectEXT onutMultiDrawElementsIndirectEXT
#define glMultiDrawRangeElementArrayAPPLE onutMultiDrawRangeElementArrayAPPLE
#define glMultiModeDrawArraysIBM onutMultiModeDrawArraysIBM
#define glMultiModeDrawElementsIBM onutMultiModeDrawElementsIBM
#define glMultiTexBufferEXT onutMultiTexBufferEXT
#define glMultiTexCoord1bOES onutMultiTexCoord1bOES
#define glMultiTexCoord1bvOES onutMultiTexCoord1bvOES
#define glMultiTexCoord1d onutMultiTexCoord1d
#define glMultiTexCoord1dARB onutMultiTexCoord1dARB
#define glMultiTexCoord1dv onutMultiTexCoord1dv
#define glMultiTexCoord1dvARB onutMultiTexCoord1dvARB
#define glMultiTexCoord1f onutMultiTexCoord1f
#define glMultiTexCoord1fARB onutMultiTexCoord1fARB
#define glMultiTexCoord1fv onutMultiTexCoord1fv
#define glMultiTexCoord1fvARB onutMultiTexCoord1fvARB
#define glMultiTexCoord1hNV onutMultiTexCoord1hNV
#define glMultiTexCoord1hvNV onutMultiTexCoord1hvNV
#define glMultiTexCoord1i onutMultiTexCoord1i
#define glMultiTexCoord1iARB onutMultiTexCoord1iARB
#define glMultiTexCoord1iv onutMultiTexCoord1iv
#define glMultiTexCoord1ivARB onutMultiTexCoord1ivARB
#define glMultiTexCoord1s onutMultiTexCoord1s
#define glMultiTexCoord1sARB onutMultiTexCoord1sARB
#define glMultiTexCoord1sv onutMultiTexCoord1sv
#define glMultiTexCoord1svARB onutMultiTexCoord1svARB
#define glMultiTexCoord1xOES onutMultiTexCoord1xOES
#define glMultiTexCoord1xvOES onutMultiTexCoord1xvOES
#define glMultiTexCoord2bOES onutMultiTexCoord2bOES
#define glMultiTexCoord2bvOES onutMultiTexCoord2bvOES
#define glMultiTexCoord2d onutMultiTexCoord2d
#define glMultiTexCoord2dARB onutMultiTexCoord2dARB
#define glMultiTexCoord2dv onutMultiTexCoord2dv
#define glMultiTexCoord2dvARB onutMultiTexCoord2dvARB
#define glMultiTexCoord2f onutMultiTexCoord2f
#define glMultiTexCoord2fARB onutMultiTexCoord2fARB
#define glMultiTexCoord2fv onutMultiTexCoord2fv
#define glMultiTexCoord2fvARB onutMultiTexCoord2fvARB
#define glMultiTexCoord2hNV onutMultiTexCoord2hNV
#define glMultiTexCoord2hvNV onutMultiTexCoord2hvNV
#define glMultiTexCoord2i onutMultiTexCoord2i
#define glMultiTexCoord2iARB onutMultiTexCoord2iARB
#define glMultiTexCoord2iv onutMultiTexCoord2iv
#define glMultiTexCoord2ivARB onutMultiTexCoord2ivARB
#define glMultiTexCoord2s onutMultiTexCoord2s
#define glMultiTexCoord2sARB onutMultiTexCoord2sARB
#define glMultiTexCoord2sv onutMultiTexCoord2sv
#define glMultiTexCoord2svARB onutMultiTexCoord2svARB
#define glMultiTexCoord2xOES onutMultiTexCoord2xOES
#define glMultiTexCoord2xvOES onutMultiTexCoord2xvOES
#define glMultiTexCoord3bOES onutMultiTexCoord3bOES
#define glMultiTexCoord3bvOES onutMultiTexCoord3bvOES
#define glMultiTexCoord3d onutMultiTexCoord3d
#define glMultiTexCoord3dARB onutMultiTexCoord3dARB
#define glMultiTexCoord3dv onutMultiTexCoord3dv
#define glMultiTexCoord3dvARB onutMultiTexCoord3dvARB
#define glMultiTexCoord3f onutMultiTexCoord3f
#define glMultiTexCoord3fARB onutMultiTexCoord3fARB
#define glMultiTexCoord3fv onutMultiTexCoord3fv
#define glMultiTexCoord3fvARB onutMultiTexCoord3fvARB
#define glMultiTexCoord3hNV onutMultiTexCoord3hNV
#define glMultiTexCoord3hvNV onutMultiTexCoord3hvNV
#define glMultiTexCoord3i onutMultiTexCoord3i
#define glMultiTexCoord3iARB onutMultiTexCoord3iARB
#define glMultiTexCoord3iv onutMultiTexCoord3iv
#define glMultiTexCoord3ivARB onutMultiTexCoord3ivARB
#define glMultiTexCoord3s onutMultiTexCoord3s
#define glMultiTexCoord3sARB onutMultiTexCoord3sARB
#define glMultiTexCoord3sv onutMultiTexCoord3sv
#define glMultiTexCoord3svARB onutMultiTexCoord3svARB
#define glMultiTexCoord3xOES onutMultiTexCoord3xOES
#define glMultiTexCoord3xvOES onutMultiTexCoord3xvOES
#define glMultiTexCoord4bOES onutMultiTexCoord4bOES
#define glMultiTexCoord4bvOES onutMultiTexCoord4bvOES
#define glMultiTexCoord4d onutMultiTexCoord4d
#define glMultiTexCoord4dARB onutMultiTexCoord4dARB
#define glMultiTexCoord4dv onutMultiTexCoord4dv
#define glMultiTexCoord4dvARB onutMultiTexCoord4dvARB
#define glMultiTexCoord4f onutMultiTexCoord4f
#define glMultiTexCoord4fARB onutMultiTexCoord4fARB
#define glMultiTexCoord4fv onutMultiTexCoord4fv
#define glMultiTexCoord4fvARB onutMultiTexCoord4fvARB
#define glMultiTexCoord4hNV onutMultiTexCoord4hNV
#define glMultiTexCoord4hvNV onutMultiTexCoord4hvNV
#define glMultiTexCoord4i onutMultiTexCoord4i
#define glMultiTexCoord4iARB onutMultiTexCoord4iARB
#define glMultiTexCoord4iv onutMultiTexCoord4iv
#define glMultiTexCoord4ivARB onutMultiTexCoord4ivARB
#define glMultiTexCoord4s onutMultiTexCoord4s
#define glMultiTexCoord4sARB onutMultiTexCoord4sARB
#define glMultiTexCoord4sv onutMultiTexCoord4sv
#define glMultiTexCoord4svARB onutMultiTexCoord4svARB
#define glMultiTexCoord4x onutMultiTexCoord4x
#define glMultiTexCoord4xOES onutMultiTexCoord4xOES
#define glMultiTexCoord4xvOES onutMultiTexCoord4xvOES
#define glMultiTexCoordP1ui onutMultiTexCoordP1ui
#define glMultiTexCoordP1uiv onutMultiTexCoordP1uiv
#define glMultiTexCoordP2ui onutMultiTexCoordP2ui
#define glMultiTexCoordP2uiv onutMultiTexCoordP2uiv
#define glMultiTexCoordP3ui onutMultiTexCoordP3ui
#define glMultiTexCoordP3uiv onutMultiTexCoordP3uiv
#define glMultiTexCoordP4ui onutMultiTexCoordP4ui
#define glMultiTexCoordP4uiv onutMultiTexCoordP4uiv
#define glMultiTexCoordPointerEXT onutMultiTexCoordPointerEXT
#define glMultiTexEnvfEXT onutMultiTexEnvfEXT
#define glMultiTexEnvfvEXT onutMultiTexEnvfvEXT
#define glMultiTexEnviEXT onutMultiTexEnviEXT
#define glMultiTexEnvivEXT onutMultiTexEnvivEXT
#define glMultiTexGendEXT onutMultiTexGendEXT
#define glMultiTexGendvEXT onutMultiTexGendvEXT
#define glMultiTexGenfEXT onutMultiTexGenfEXT
#define glMultiTexGenfvEXT onutMultiTexGenfvEXT
#define glMultiTexGeniEXT onutMultiTexGeniEXT
#define glMultiTexGenivEXT onutMultiTexGenivEXT
#define glMultiTexImage1DEXT onutMultiTexImage1DEXT
#define glMultiTexImage2DEXT onutMultiTexImage2DEXT
#define glMultiTexImage3DEXT onutMultiTexImage3DEXT
#define glMultiTexParameterIivEXT onutMultiTexParameterIivEXT
#define glMultiTexParameterIuivEXT onutMultiTexParameterIuivEXT
#define glMultiTexParameterfEXT onutMultiTexParameterfEXT
#define glMultiTexParameterfvEXT onutMultiTexParameterfvEXT
#define glMultiTexParameteriEXT onutMultiTexParameteriEXT
#define glMultiTexParameterivEXT onutMultiTexParameterivEXT
#define glMultiTexRenderbufferEXT onutMultiTexRenderbufferEXT
#define glMultiTexSubImage1DEXT onutMultiTexSubImage1DEXT
#define glMultiTexSubImage2DEXT onutMultiTexSubImage2DEXT
#define glMultiTexSubImage3DEXT onutMultiTexSubImage3DEXT
#define glMulticastBarrierNV onutMulticastBarrierNV
#define glMulticastBlitFramebufferNV onutMulticastBlitFramebufferNV
#define glMulticastBufferSubDataNV onutMulticastBufferSubDataNV
#define glMulticastCopyBufferSubDataNV onutMulticastCopyBufferSubDataNV
#define glMulticastCopyImageSubDataNV onutMulticastCopyImageSubDataNV
#define glMulticastFramebufferSampleLocationsfvNV onutMulticastFramebufferSampleLocationsfvNV
#define glMulticastGetQueryObjecti64vNV onutMulticastGetQueryObjecti64vNV
#define glMulticastGetQueryObjectivNV onutMulticastGetQueryObjectivNV
#define glMulticastGetQueryObjectui64vNV onutMulticastGetQueryObjectui64vNV
#define glMulticastGetQueryObjectuivNV onutMulticastGetQueryObjectuivNV
#define glMulticastWaitSyncNV onutMulticastWaitSyncNV
#define glNamedBufferData onutNamedBufferData
#define glNamedBufferDataEXT onutNamedBufferDataEXT
#define glNamedBufferPageCommitmentARB onutNamedBufferPageCommitmentARB
#define glNamedBufferPageCommitmentEXT onutNamedBufferPageCommitmentEXT
#define glNamedBufferStorage onutNamedBufferStorage
#define glNamedBufferStorageEXT onutNamedBufferStorageEXT
#define glNamedBufferStorageExternalEXT onutNamedBufferStorageExternalEXT
#define glNamedBufferStorageMemEXT onutNamedBufferStorageMemEXT
#define glNamedBufferSubData onutNamedBufferSubData
#define glNamedBufferSubDataEXT onutNamedBufferSubDataEXT
#define glNamedCopyBufferSubDataEXT onutNamedCopyBufferSubDataEXT
#define glNamedFramebufferDrawBuffer onutNamedFramebufferDrawBuffer
#define glNamedFramebufferDrawBuffers onutNamedFramebufferDrawBuffers
#define glNamedFramebufferParameteri onutNamedFramebufferParameteri
#define glNamedFramebufferParameteriEXT onutNamedFramebufferParameteriEXT
#define glNamedFramebufferReadBuffer onutNamedFramebufferReadBuffer
#define glNamedFramebufferRenderbuffer onutNamedFramebufferRenderbuffer
#define glNamedFramebufferRenderbufferEXT onutNamedFramebufferRenderbufferEXT
#define glNamedFramebufferSampleLocationsfvARB onutNamedFramebufferSampleLocationsfvARB
#define glNamedFramebufferSampleLocationsfvNV onutNamedFramebufferSampleLocationsfvNV
#define glNamedFramebufferSamplePositionsfvAMD onutNamedFramebufferSamplePositionsfvAMD
#define glNamedFramebufferTexture onutNamedFramebufferTexture
#define glNamedFramebufferTexture1DEXT onutNamedFramebufferTexture1DEXT
#define glNamedFramebufferTexture2DEXT onutNamedFramebufferTexture2DEXT
#define glNamedFramebufferTexture3DEXT onutNamedFramebufferTexture3DEXT
#define glNamedFramebufferTextureEXT onutNamedFramebufferTextureEXT
#define glNamedFramebufferTextureFaceEXT onutNamedFramebufferTextureFaceEXT
#define glNamedFramebufferTextureLayer onutNamedFramebufferTextureLayer
#define glNamedFramebufferTextureLayerEXT onutNamedFramebufferTextureLayerEXT
#define glNamedProgramLocalParameter4dEXT onutNamedProgramLocalParameter4dEXT
#define glNamedProgramLocalParameter4dvEXT onutNamedProgramLocalParameter4dvEXT
#define glNamedProgramLocalParameter4fEXT onutNamedProgramLocalParameter4fEXT
#define glNamedProgramLocalParameter4fvEXT onutNamedProgramLocalParameter4fvEXT
#define glNamedProgramLocalParameterI4iEXT onutNamedProgramLocalParameterI4iEXT
#define glNamedProgramLocalParameterI4ivEXT onutNamedProgramLocalParameterI4ivEXT
#define glNamedProgramLocalParameterI4uiEXT onutNamedProgramLocalParameterI4uiEXT
#define glNamedProgramLocalParameterI4uivEXT onutNamedProgramLocalParameterI4uivEXT
#define glNamedProgramLocalParameters4fvEXT onutNamedProgramLocalParameters4fvEXT
#define glNamedProgramLocalParametersI4ivEXT onutNamedProgramLocalParametersI4ivEXT
#define glNamedProgramLocalParametersI4uivEXT onutNamedProgramLocalParametersI4uivEXT
#define glNamedProgramStringEXT onutNamedProgramStringEXT
#define glNamedRenderbufferStorage onutNamedRenderbufferStorage
#define glNamedRenderbufferStorageEXT onutNamedRenderbufferStorageEXT
#define glNamedRenderbufferStorageMultisample onutNamedRenderbufferStorageMultisample
#define glNamedRenderbufferStorageMultisampleCoverageEXT onutNamedRenderbufferStorageMultisampleCoverageEXT
#define glNamedRenderbufferStorageMultisampleEXT onutNamedRenderbufferStorageMultisampleEXT
#define glNamedStringARB onutNamedStringARB
#define glNewBufferRegion onutNewBufferRegion
#define glNewList onutNewList
#define glNewObjectBufferATI onutNewObjectBufferATI
#define glNormal3b onutNormal3b
#define glNormal3bv onutNormal3bv
#define glNormal3d onutNormal3d
#define glNormal3dv onutNormal3dv
#define glNormal3f onutNormal3f
#define glNormal3fVertex3fSUN onutNormal3fVertex3fSUN
#define glNormal3fVertex3fvSUN onutNormal3fVertex3fvSUN
#define glNormal3fv onutNormal3fv
#define glNormal3hNV onutNormal3hNV
#define glNormal3hvNV onutNormal3hvNV
#define glNormal3i onutNormal3i
#define glNormal3iv onutNormal3iv
#define glNormal3s onutNormal3s
#define glNormal3sv onutNormal3sv
#define glNormal3x onutNormal3x
#define glNormal3xOES onutNormal3xOES
#define glNormal3xvOES onutNormal3xvOES
#define glNormalFormatNV onutNormalFormatNV
#define glNormalP3ui onutNormalP3ui
#define glNormalP3uiv onutNormalP3uiv
#define glNormalPointer onutNormalPointer
#define glNormalPointerEXT onutNormalPointerEXT
#define glNormalPointerListIBM onutNormalPointerListIBM
#define glNormalPointervINTEL onutNormalPointervINTEL
#define glNormalStream3bATI onutNormalStream3bATI
#define glNormalStream3bvATI onutNormalStream3bvATI
#define glNormalStream3dATI onutNormalStream3dATI
#define glNormalStream3dvATI onutNormalStream3dvATI
#define glNormalStream3fATI onutNormalStream3fATI
#define glNormalStream3fvATI onutNormalStream3fvATI
#define glNormalStream3iATI onutNormalStream3iATI
#define glNormalStream3ivATI onutNormalStream3ivATI
#define glNormalStream3sATI onutNormalStream3sATI
#define glNormalStream3svATI onutNormalStream3svATI
#define glObjectLabel onutObjectLabel
#define glObjectLabelKHR onutObjectLabelKHR
#define glObjectPtrLabel onutObjectPtrLabel
#define glObjectPtrLabelKHR onutObjectPtrLabelKHR
#define glObjectPurgeableAPPLE onutObjectPurgeableAPPLE
#define glObjectUnpurgeableAPPLE onutObjectUnpurgeableAPPLE
#define glOrtho onutOrtho
#define glOrthof onutOrthof
#define glOrthofOES onutOrthofOES
#define glOrthox onutOrthox
#define glOrthoxOES onutOrthoxOES
#define glPNTrianglesfATI onutPNTrianglesfATI
#define glPNTrianglesiATI onutPNTrianglesiATI
#define glPassTexCoordATI onutPassTexCoordATI
#define glPassThrough onutPassThrough
#define glPassThroughxOES onutPassThroughxOES
#define glPatchParameterfv onutPatchParameterfv
#define glPatchParameteri onutPatchParameteri
#define glPatchParameteriEXT onutPatchParameteriEXT
#define glPatchParameteriOES onutPatchParameteriOES
#define glPathColorGenNV onutPathColorGenNV
#define glPathCommandsNV onutPathCommandsNV
#define glPathCoordsNV onutPathCoordsNV
#define glPathCoverDepthFuncNV onutPathCoverDepthFuncNV
#define glPathDashArrayNV onutPathDashArrayNV
#define glPathFogGenNV onutPathFogGenNV
#define glPathGlyphIndexArrayNV onutPathGlyphIndexArrayNV
#define glPathGlyphIndexRangeNV onutPathGlyphIndexRangeNV
#define glPathGlyphRangeNV onutPathGlyphRangeNV
#define glPathGlyphsNV onutPathGlyphsNV
#define glPathMemoryGlyphIndexArrayNV onutPathMemoryGlyphIndexArrayNV
#define glPathParameterfNV onutPathParameterfNV
#define glPathParameterfvNV onutPathParameterfvNV
#define glPathParameteriNV onutPathParameteriNV
#define glPathParameterivNV onutPathParameterivNV
#define glPathStencilDepthOffsetNV onutPathStencilDepthOffsetNV
#define glPathStencilFuncNV onutPathStencilFuncNV
#define glPathStringNV onutPathStringNV
#define glPathSubCommandsNV onutPathSubCommandsNV
#define glPathSubCoordsNV onutPathSubCoordsNV
#define glPathTexGenNV onutPathTexGenNV
#define glPauseTransformFeedback onutPauseTransformFeedback
#define glPauseTransformFeedbackNV onutPauseTransformFeedbackNV
#define glPixelDataRangeNV onutPixelDataRangeNV
#define glPixelMapfv onutPixelMapfv
#define glPixelMapuiv onutPixelMapuiv
#define glPixelMapusv onutPixelMapusv
#define glPixelMapx onutPixelMapx
#define glPixelStoref onutPixelStoref
#define glPixelStorei onutPixelStorei
#define glPixelStorex onutPixelStorex
#define glPixelTexGenParameterfSGIS onutPixelTexGenParameterfSGIS
#define glPixelTexGenParameterfvSGIS onutPixelTexGenParameterfvSGIS
#define glPixelTexGenParameteriSGIS onutPixelTexGenParameteriSGIS
#define glPixelTexGenParameterivSGIS onutPixelTexGenParameterivSGIS
#define glPixelTexGenSGIX onutPixelTexGenSGIX
#define glPixelTransferf onutPixelTransferf
#define glPixelTransferi onutPixelTransferi
#define glPixelTransferxOES onutPixelTransferxOES
#define glPixelTransformParameterfEXT onutPixelTransformParameterfEXT
#define glPixelTransformParameterfvEXT onutPixelTransformParameterfvEXT
#define glPixelTransformParameteriEXT onutPixelTransformParameteriEXT
#define glPixelTransformParameterivEXT onutPixelTransformParameterivEXT
#define glPixelZoom onutPixelZoom
#define glPixelZoomxOES onutPixelZoomxOES
#define glPointAlongPathNV onutPointAlongPathNV
#define glPointParameterf onutPointParameterf
#define glPointParameterfARB onutPointParameterfARB
#define glPointParameterfEXT onutPointParameterfEXT
#define glPointParameterfSGIS onutPointParameterfSGIS
#define glPointParameterfv onutPointParameterfv
#define glPointParameterfvARB onutPointParameterfvARB
#define glPointParameterfvEXT onutPointParameterfvEXT
#define glPointParameterfvSGIS onutPointParameterfvSGIS
#define glPointParameteri onutPointParameteri
#define glPointParameteriNV onutPointParameteriNV
#define glPointParameteriv onutPointParameteriv
#define glPointParameterivNV onutPointParameterivNV
#define glPointParameterx onutPointParameterx
#define glPointParameterxOES onutPointParameterxOES
#define glPointParameterxv onutPointParameterxv
#define glPointParameterxvOES onutPointParameterxvOES
#define glPointSize onutPointSize
#define glPointSizePointerOES onutPointSizePointerOES
#define glPointSizex onutPointSizex
#define glPointSizexOES onutPointSizexOES
#define glPollAsyncSGIX onutPollAsyncSGIX
#define glPollInstrumentsSGIX onutPollInstrumentsSGIX
#define glPolygonMode onutPolygonMode
#define glPolygonModeNV onutPolygonModeNV
#define glPolygonOffset onutPolygonOffset
#define glPolygonOffsetClampEXT onutPolygonOffsetClampEXT
#define glPolygonOffsetEXT onutPolygonOffsetEXT
#define glPolygonOffsetx onutPolygonOffsetx
#define glPolygonOffsetxOES onutPolygonOffsetxOES
#define glPolygonStipple onutPolygonStipple
#define glPopAttrib onutPopAttrib
#define glPopClientAttrib onutPopClientAttrib
#define glPopDebugGroup onutPopDebugGroup
#define glPopDebugGroupKHR onutPopDebugGroupKHR
#define glPopGroupMarkerEXT onutPopGroupMarkerEXT
#define glPopMatrix onutPopMatrix
#define glPopName onutPopName
#define glPresentFrameDualFillNV onutPresentFrameDualFillNV
#define glPresentFrameKeyedNV onutPresentFrameKeyedNV
#define glPrimitiveBoundingBox onutPrimitiveBoundingBox
#define glPrimitiveBoundingBoxARB onutPrimitiveBoundingBoxARB
#define glPrimitiveBoundingBoxEXT onutPrimitiveBoundingBoxEXT
#define glPrimitiveBoundingBoxOES onutPrimitiveBoundingBoxOES
#define glPrimitiveRestartIndex onutPrimitiveRestartIndex
#define glPrimitiveRestartIndexNV onutPrimitiveRestartIndexNV
#define glPrimitiveRestartNV onutPrimitiveRestartNV
#define glPrioritizeTextures onutPrioritizeTextures
#define glPrioritizeTexturesEXT onutPrioritizeTexturesEXT
#define glPrioritizeTexturesxOES onutPrioritizeTexturesxOES
#define glProgramBinary onutProgramBinary
#define glProgramBinaryOES onutProgramBinaryOES
#define glProgramBufferParametersIivNV onutProgramBufferParametersIivNV
#define glProgramBufferParametersIuivNV onutProgramBufferParametersIuivNV
#define glProgramBufferParametersfvNV onutProgramBufferParametersfvNV
#define glProgramEnvParameter4dARB onutProgramEnvParameter4dARB
#define glProgramEnvParameter4dvARB onutProgramEnvParameter4dvARB
#define glProgramEnvParameter4fARB onutProgramEnvParameter4fARB
#define glProgramEnvParameter4fvARB onutProgramEnvParameter4fvARB
#define glProgramEnvParameterI4iNV onutProgramEnvParameterI4iNV
#define glProgramEnvParameterI4ivNV onutProgramEnvParameterI4ivNV
#define glProgramEnvParameterI4uiNV onutProgramEnvParameterI4uiNV
#define glProgramEnvParameterI4uivNV onutProgramEnvParameterI4uivNV
#define glProgramEnvParameters4fvEXT onutProgramEnvParameters4fvEXT
#define glProgramEnvParametersI4ivNV onutProgramEnvParametersI4ivNV
#define glProgramEnvParametersI4uivNV onutProgramEnvParametersI4uivNV
#define glProgramLocalParameter4dARB onutProgramLocalParameter4dARB
#define glProgramLocalParameter4dvARB onutProgramLocalParameter4dvARB
#define glProgramLocalParameter4fARB onutProgramLocalParameter4fARB
#define glProgramLocalParameter4fvARB onutProgramLocalParameter4fvARB
#define glProgramLocalParameterI4iNV onutProgramLocalParameterI4iNV
#define glProgramLocalParameterI4ivNV onutProgramLocalParameterI4ivNV
#define glProgramLocalParameterI4uiNV onutProgramLocalParameterI4uiNV
#define glProgramLocalParameterI4uivNV onutProgramLocalParameterI4uivNV
#define glProgramLocalParameters4fvEXT onutProgramLocalParameters4fvEXT
#define glProgramLocalParametersI4ivNV onutProgramLocalParametersI4ivNV
#define glProgramLocalParametersI4uivNV onutProgramLocalParametersI4uivNV
#define glProgramNamedParameter4dNV onutProgramNamedParameter4dNV
#define glProgramNamedParameter4dvNV onutProgramNamedParameter4dvNV
#define glProgramNamedParameter4fNV onutProgramNamedParameter4fNV
#define glProgramNamedParameter4fvNV onutProgramNamedParameter4fvNV
#define glProgramParameter4dNV onutProgramParameter4dNV
#define glProgramParameter4dvNV onutProgramParameter4dvNV
#define glProgramParameter4fNV onutProgramParameter4fNV
#define glProgramParameter4fvNV onutProgramParameter4fvNV
#define glProgramParameteri onutProgramParameteri
#define glProgramParameteriARB onutProgramParameteriARB
#define glProgramParameteriEXT onutProgramParameteriEXT
#define glProgramParameters4dvNV onutProgramParameters4dvNV
#define glProgramParameters4fvNV onutProgramParameters4fvNV
#define glProgramPathFragmentInputGenNV onutProgramPathFragmentInputGenNV
#define glProgramStringARB onutProgramStringARB
#define glProgramSubroutineParametersuivNV onutProgramSubroutineParametersuivNV
#define glProgramUniform1d onutProgramUniform1d
#define glProgramUniform1dEXT onutProgramUniform1dEXT
#define glProgramUniform1dv onutProgramUniform1dv
#define glProgramUniform1dvEXT onutProgramUniform1dvEXT
#define glProgramUniform1f onutProgramUniform1f
#define glProgramUniform1fEXT onutProgramUniform1fEXT
#define glProgramUniform1fv onutProgramUniform1fv
#define glProgramUniform1fvEXT onutProgramUniform1fvEXT
#define glProgramUniform1i onutProgramUniform1i
#define glProgramUniform1i64ARB onutProgramUniform1i64ARB
#define glProgramUniform1i64NV onutProgramUniform1i64NV
#define glProgramUniform1i64vARB onutProgramUniform1i64vARB
#define glProgramUniform1i64vNV onutProgramUniform1i64vNV
#define glProgramUniform1iEXT onutProgramUniform1iEXT
#define glProgramUniform1iv onutProgramUniform1iv
#define glProgramUniform1ivEXT onutProgramUniform1ivEXT
#define glProgramUniform1ui onutProgramUniform1ui
#define glProgramUniform1ui64ARB onutProgramUniform1ui64ARB
#define glProgramUniform1ui64NV onutProgramUniform1ui64NV
#define glProgramUniform1ui64vARB onutProgramUniform1ui64vARB
#define glProgramUniform1ui64vNV onutProgramUniform1ui64vNV
#define glProgramUniform1uiEXT onutProgramUniform1uiEXT
#define glProgramUniform1uiv onutProgramUniform1uiv
#define glProgramUniform1uivEXT onutProgramUniform1uivEXT
#define glProgramUniform2d onutProgramUniform2d
#define glProgramUniform2dEXT onutProgramUniform2dEXT
#define glProgramUniform2dv onutProgramUniform2dv
#define glProgramUniform2dvEXT onutProgramUniform2dvEXT
#define glProgramUniform2f onutProgramUniform2f
#define glProgramUniform2fEXT onutProgramUniform2fEXT
#define glProgramUniform2fv onutProgramUniform2fv
#define glProgramUniform2fvEXT onutProgramUniform2fvEXT
#define glProgramUniform2i onutProgramUniform2i
#define glProgramUniform2i64ARB onutProgramUniform2i64ARB
#define glProgramUniform2i64NV onutProgramUniform2i64NV
#define glProgramUniform2i64vARB onutProgramUniform2i64vARB
#define glProgramUniform2i64vNV onutProgramUniform2i64vNV
#define glProgramUniform2iEXT onutProgramUniform2iEXT
#define glProgramUniform2iv onutProgramUniform2iv
#define glProgramUniform2ivEXT onutProgramUniform2ivEXT
#define glProgramUniform2ui onutProgramUniform2ui
#define glProgramUniform2ui64ARB onutProgramUniform2ui64ARB
#define glProgramUniform2ui64NV onutProgramUniform2ui64NV
#define glProgramUniform2ui64vARB onutProgramUniform2ui64vARB
#define glProgramUniform2ui64vNV onutProgramUniform2ui64vNV
#define glProgramUniform2uiEXT onutProgramUniform2uiEXT
#define glProgramUniform2uiv onutProgramUniform2uiv
#define glProgramUniform2uivEXT onutProgramUniform2uivEXT
#define glProgramUniform3d onutProgramUniform3d
#define glProgramUniform3dEXT onutProgramUniform3dEXT
#define glProgramUniform3dv onutProgramUniform3dv
#define glProgramUniform3dvEXT onutProgramUniform3dvEXT
#define glProgramUniform3f onutProgramUniform3f
#define glProgramUniform3fEXT onutProgramUniform3fEXT
#define glProgramUniform3fv onutProgramUniform3fv
#define glProgramUniform3fvEXT onutProgramUniform3fvEXT
#define glProgramUniform3i onutProgramUniform3i
#define glProgramUniform3i64ARB onutProgramUniform3i64ARB
#define glProgramUniform3i64NV onutProgramUniform3i64NV
#define glProgramUniform3i64vARB onutProgramUniform3i64vARB
#define glProgramUniform3i64vNV onutProgramUniform3i64vNV
#define glProgramUniform3iEXT onutProgramUniform3iEXT
#define glProgramUniform3iv onutProgramUniform3iv
#define glProgramUniform3ivEXT onutProgramUniform3ivEXT
#define glProgramUniform3ui onutProgramUniform3ui
#define glProgramUniform3ui64ARB onutProgramUniform3ui64ARB
#define glProgramUniform3ui64NV onutProgramUniform3ui64NV
#define glProgramUniform3ui64vARB onutProgramUniform3ui64vARB
#define glProgramUniform3ui64vNV onutProgramUniform3ui64vNV
#define glProgramUniform3uiEXT onutProgramUniform3uiEXT
#define glProgramUniform3uiv onutProgramUniform3uiv
#define glProgramUniform3uivEXT onutProgramUniform3uivEXT
#define glProgramUniform4d onutProgramUniform4d
#define glProgramUniform4dEXT onutProgramUniform4dEXT
#define glProgramUniform4dv onutProgramUniform4dv
#define glProgramUniform4dvEXT onutProgramUniform4dvEXT
#define glProgramUniform4f onutProgramUniform4f
#define glProgramUniform4fEXT onutProgramUniform4fEXT
#define glProgramUniform4fv onutProgramUniform4fv
#define glProgramUniform4fvEXT onutProgramUniform4fvEXT
#define glProgramUniform4i onutProgramUniform4i
#define glProgramUniform4i64ARB onutProgramUniform4i64ARB
#define glProgramUniform4i64NV onutProgramUniform4i64NV
#define glProgramUniform4i64vARB onutProgramUniform4i64vARB
#define glProgramUniform4i64vNV onutProgramUniform4i64vNV
#define glProgramUniform4iEXT onutProgramUniform4iEXT
#define glProgramUniform4iv onutProgramUniform4iv
#define glProgramUniform4ivEXT onutProgramUniform4ivEXT
#define glProgramUniform4ui onutProgramUniform4ui
#define glProgramUniform4ui64ARB onutProgramUniform4ui64ARB
#define glProgramUniform4ui64NV onutProgramUniform4ui64NV
#define glProgramUniform4ui64vARB onutProgramUniform4ui64vARB
#define glProgramUniform4ui64vNV onutProgramUniform4ui64vNV
#define glProgramUniform4uiEXT onutProgramUniform4uiEXT
#define glProgramUniform4uiv onutProgramUniform4uiv
#define glProgramUniform4uivEXT onutProgramUniform4uivEXT
#define glProgramUniformHandleui64ARB onutProgramUniformHandleui64ARB
#define glProgramUniformHandleui64IMG onutProgramUniformHandleui64IMG
#define glProgramUniformHandleui64NV onutProgramUniformHandleui64NV
#define glProgramUniformHandleui64vARB onutProgramUniformHandleui64vARB
#define glProgramUniformHandleui64vIMG onutProgramUniformHandleui64vIMG
#define glProgramUniformHandleui64vNV onutProgramUniformHandleui64vNV
#define glProgramUniformMatrix2dv onutProgramUniformMatrix2dv
#define glProgramUniformMatrix2dvEXT onutProgramUniformMatrix2dvEXT
#define glProgramUniformMatrix2fv onutProgramUniformMatrix2fv
#define glProgramUniformMatrix2fvEXT onutProgramUniformMatrix2fvEXT
#define glProgramUniformMatrix2x3dv onutProgramUniformMatrix2x3dv
#define glProgramUniformMatrix2x3dvEXT onutProgramUniformMatrix2x3dvEXT
#define glProgramUniformMatrix2x3fv onutProgramUniformMatrix2x3fv
#define glProgramUniformMatrix2x3fvEXT onutProgramUniformMatrix2x3fvEXT
#define glProgramUniformMatrix2x4dv onutProgramUniformMatrix2x4dv
#define glProgramUniformMatrix2x4dvEXT onutProgramUniformMatrix2x4dvEXT
#define glProgramUniformMatrix2x4fv onutProgramUniformMatrix2x4fv
#define glProgramUniformMatrix2x4fvEXT onutProgramUniformMatrix2x4fvEXT
#define glProgramUniformMatrix3dv onutProgramUniformMatrix3dv
#define glProgramUniformMatrix3dvEXT onutProgramUniformMatrix3dvEXT
#define glProgramUniformMatrix3fv onutProgramUniformMatrix3fv
#define glProgramUniformMatrix3fvEXT onutProgramUniformMatrix3fvEXT
#define glProgramUniformMatrix3x2dv onutProgramUniformMatrix3x2dv
#define glProgramUniformMatrix3x2dvEXT onutProgramUniformMatrix3x2dvEXT
#define glProgramUniformMatrix3x2fv onutProgramUniformMatrix3x2fv
#define glProgramUniformMatrix3x2fvEXT onutProgramUniformMatrix3x2fvEXT
#define glProgramUniformMatrix3x4dv onutProgramUniformMatrix3x4dv
#define glProgramUniformMatrix3x4dvEXT onutProgramUniformMatrix3x4dvEXT
#define glProgramUniformMatrix3x4fv onutProgramUniformMatrix3x4fv
#define glProgramUniformMatrix3x4fvEXT onutProgramUniformMatrix3x4fvEXT
#define glProgramUniformMatrix4dv onutProgramUniformMatrix4dv
#define glProgramUniformMatrix4dvEXT onutProgramUniformMatrix4dvEXT
#define glProgramUniformMatrix4fv onutProgramUniformMatrix4fv
#define glProgramUniformMatrix4fvEXT onutProgramUniformMatrix4fvEXT
#define glProgramUniformMatrix4x2dv onutProgramUniformMatrix4x2dv
#define glProgramUniformMatrix4x2dvEXT onutProgramUniformMatrix4x2dvEXT
#define glProgramUniformMatrix4x2fv onutProgramUniformMatrix4x2fv
#define glProgramUniformMatrix4x2fvEXT onutProgramUniformMatrix4x2fvEXT
#define glProgramUniformMatrix4x3dv onutProgramUniformMatrix4x3dv
#define glProgramUniformMatrix4x3dvEXT onutProgramUniformMatrix4x3dvEXT
#define glProgramUniformMatrix4x3fv onutProgramUniformMatrix4x3fv
#define glProgramUniformMatrix4x3fvEXT onutProgramUniformMatrix4x3fvEXT
#define glProgramUniformui64NV onutProgramUniformui64NV
#define glProgramUniformui64vNV onutProgramUniformui64vNV
#define glProgramVertexLimitNV onutProgramVertexLimitNV
#define glProvokingVertex onutProvokingVertex
#define glProvokingVertexEXT onutProvokingVertexEXT
#define glPushAttrib onutPushAttrib
#define glPushClientAttrib onutPushClientAttrib
#define glPushClientAttribDefaultEXT onutPushClientAttribDefaultEXT
#define glPushDebugGroup onutPushDebugGroup
#define glPushDebugGroupKHR onutPushDebugGroupKHR
#define glPushGroupMarkerEXT onutPushGroupMarkerEXT
#define glPushMatrix onutPushMatrix
#define glPushName onutPushName
#define glQueryCounter onutQueryCounter
#define glQueryCounterEXT onutQueryCounterEXT
#define glQueryMatrixxOES onutQueryMatrixxOES
#define glQueryObjectParameteruiAMD onutQueryObjectParameteruiAMD
#define glRasterPos2d onutRasterPos2d
#define glRasterPos2dv onutRasterPos2dv
#define glRasterPos2f onutRasterPos2f
#define glRasterPos2fv onutRasterPos2fv
#define glRasterPos2i onutRasterPos2i
#define glRasterPos2iv onutRasterPos2iv
#define glRasterPos2s onutRasterPos2s
#define glRasterPos2sv onutRasterPos2sv
#define glRasterPos2xOES onutRasterPos2xOES
#define glRasterPos2xvOES onutRasterPos2xvOES
#define glRasterPos3d onutRasterPos3d
#define glRasterPos3dv onutRasterPos3dv
#define glRasterPos3f onutRasterPos3f
#define glRasterPos3fv onutRasterPos3fv
#define glRasterPos3i onutRasterPos3i
#define glRasterPos3iv onutRasterPos3iv
#define glRasterPos3s onutRasterPos3s
#define glRasterPos3sv onutRasterPos3sv
#define glRasterPos3xOES onutRasterPos3xOES
#define glRasterPos3xvOES onutRasterPos3xvOES
#define glRasterPos4d onutRasterPos4d
#define glRasterPos4dv onutRasterPos4dv
#define glRasterPos4f onutRasterPos4f
#define glRasterPos4fv onutRasterPos4fv
#define glRasterPos4i onutRasterPos4i
#define glRasterPos4iv onutRasterPos4iv
#define glRasterPos4s onutRasterPos4s
#define glRasterPos4sv onutRasterPos4sv
#define glRasterPos4xOES onutRasterPos4xOES
#define glRasterPos4xvOES onutRasterPos4xvOES
#define glRasterSamplesEXT onutRasterSamplesEXT
#define glReadBuffer onutReadBuffer
#define glReadBufferIndexedEXT onutReadBufferIndexedEXT
#define glReadBufferNV onutReadBufferNV
#define glReadBufferRegion onutReadBufferRegion
#define glReadInstrumentsSGIX onutReadInstrumentsSGIX
#define glReadPixels onutReadPixels
#define glReadnPixels onutReadnPixels
#define glReadnPixelsARB onutReadnPixelsARB
#define glReadnPixelsEXT onutReadnPixelsEXT
#define glReadnPixelsKHR onutReadnPixelsKHR
#define glRectd onutRectd
#define glRectdv onutRectdv
#define glRectf onutRectf
#define glRectfv onutRectfv
#define glRecti onutRecti
#define glRectiv onutRectiv
#define glRects onutRects
#define glRectsv onutRectsv
#define glRectxOES onutRectxOES
#define glRectxvOES onutRectxvOES
#define glReferencePlaneSGIX onutReferencePlaneSGIX
#define glReleaseKeyedMutexWin32EXT onutReleaseKeyedMutexWin32EXT
#define glReleaseShaderCompiler onutReleaseShaderCompiler
#define glRenderGpuMaskNV onutRenderGpuMaskNV
#define glRenderMode onutRenderMode
#define glRenderbufferStorage onutRenderbufferStorage
#define glRenderbufferStorageEXT onutRenderbufferStorageEXT
#define glRenderbufferStorageMultisample onutRenderbufferStorageMultisample
#define glRenderbufferStorageMultisampleANGLE onutRenderbufferStorageMultisampleANGLE
#define glRenderbufferStorageMultisampleAPPLE onutRenderbufferStorageMultisampleAPPLE
#define glRenderbufferStorageMultisampleCoverageNV onutRenderbufferStorageMultisampleCoverageNV
#define glRenderbufferStorageMultisampleEXT onutRenderbufferStorageMultisampleEXT
#define glRenderbufferStorageMultisampleIMG onutRenderbufferStorageMultisampleIMG
#define glRenderbufferStorageMultisampleNV onutRenderbufferStorageMultisampleNV
#define glRenderbufferStorageOES onutRenderbufferStorageOES
#define glReplacementCodePointerSUN onutReplacementCodePointerSUN
#define glReplacementCodeubSUN onutReplacementCodeubSUN
#define glReplacementCodeubvSUN onutReplacementCodeubvSUN
#define glReplacementCodeuiColor3fVertex3fSUN onutReplacementCodeuiColor3fVertex3fSUN
#define glReplacementCodeuiColor3fVertex3fvSUN onutReplacementCodeuiColor3fVertex3fvSUN
#define glReplacementCodeuiColor4fNormal3fVertex3fSUN onutReplacementCodeuiColor4fNormal3fVertex3fSUN
#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN onutReplacementCodeuiColor4fNormal3fVertex3fvSUN
#define glReplacementCodeuiColor4ubVertex3fSUN onutReplacementCodeuiColor4ubVertex3fSUN
#define glReplacementCodeuiColor4ubVertex3fvSUN onutReplacementCodeuiColor4ubVertex3fvSUN
#define glReplacementCodeuiNormal3fVertex3fSUN onutReplacementCodeuiNormal3fVertex3fSUN
#define glReplacementCodeuiNormal3fVertex3fvSUN onutReplacementCodeuiNormal3fVertex3fvSUN
#define glReplacementCodeuiSUN onutReplacementCodeuiSUN
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN onutReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN onutReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN onutReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN onutReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
#define glReplacementCodeuiTexCoord2fVertex3fSUN onutReplacementCodeuiTexCoord2fVertex3fSUN
#define glReplacementCodeuiTexCoord2fVertex3fvSUN onutReplacementCodeuiTexCoord2fVertex3fvSUN
#define glReplacementCodeuiVertex3fSUN onutReplacementCodeuiVertex3fSUN
#define glReplacementCodeuiVertex3fvSUN onutReplacementCodeuiVertex3fvSUN
#define glReplacementCodeuivSUN onutReplacementCodeuivSUN
#define glReplacementCodeusSUN onutReplacementCodeusSUN
#define glReplacementCodeusvSUN onutReplacementCodeusvSUN
#define glRequestResidentProgramsNV onutRequestResidentProgramsNV
#define glResetHistogram onutResetHistogram
#define glResetHistogramEXT onutResetHistogramEXT
#define glResetMinmax onutResetMinmax
#define glResetMinmaxEXT onutResetMinmaxEXT
#define glResizeBuffersMESA onutResizeBuffersMESA
#define glResolveDepthValuesNV onutResolveDepthValuesNV
#define glResolveMultisampleFramebufferAPPLE onutResolveMultisampleFramebufferAPPLE
#define glResumeTransformFeedback onutResumeTransformFeedback
#define glResumeTransformFeedbackNV onutResumeTransformFeedbackNV
#define glRotated onutRotated
#define glRotatef onutRotatef
#define glRotatex onutRotatex
#define glRotatexOES onutRotatexOES
#define glSampleCoverage onutSampleCoverage
#define glSampleCoverageARB onutSampleCoverageARB
#define glSampleCoveragex onutSampleCoveragex
#define glSampleCoveragexOES onutSampleCoveragexOES
#define glSampleMapATI onutSampleMapATI
#define glSampleMaskEXT onutSampleMaskEXT
#define glSampleMaskIndexedNV onutSampleMaskIndexedNV
#define glSampleMaskSGIS onutSampleMaskSGIS
#define glSampleMaski onutSampleMaski
#define glSamplePatternEXT onutSamplePatternEXT
#define glSamplePatternSGIS onutSamplePatternSGIS
#define glSamplerParameterIiv onutSamplerParameterIiv
#define glSamplerParameterIivEXT onutSamplerParameterIivEXT
#define glSamplerParameterIivOES onutSamplerParameterIivOES
#define glSamplerParameterIuiv onutSamplerParameterIuiv
#define glSamplerParameterIuivEXT onutSamplerParameterIuivEXT
#define glSamplerParameterIuivOES onutSamplerParameterIuivOES
#define glSamplerParameterf onutSamplerParameterf
#define glSamplerParameterfv onutSamplerParameterfv
#define glSamplerParameteri onutSamplerParameteri
#define glSamplerParameteriv onutSamplerParameteriv
#define glScaled onutScaled
#define glScalef onutScalef
#define glScalex onutScalex
#define glScalexOES onutScalexOES
#define glScissor onutScissor
#define glScissorArrayv onutScissorArrayv
#define glScissorArrayvNV onutScissorArrayvNV
#define glScissorArrayvOES onutScissorArrayvOES
#define glScissorIndexed onutScissorIndexed
#define glScissorIndexedNV onutScissorIndexedNV
#define glScissorIndexedOES onutScissorIndexedOES
#define glScissorIndexedv onutScissorIndexedv
#define glScissorIndexedvNV onutScissorIndexedvNV
#define glScissorIndexedvOES onutScissorIndexedvOES
#define glSecondaryColor3b onutSecondaryColor3b
#define glSecondaryColor3bEXT onutSecondaryColor3bEXT
#define glSecondaryColor3bv onutSecondaryColor3bv
#define glSecondaryColor3bvEXT onutSecondaryColor3bvEXT
#define glSecondaryColor3d onutSecondaryColor3d
#define glSecondaryColor3dEXT onutSecondaryColor3dEXT
#define glSecondaryColor3dv onutSecondaryColor3dv
#define glSecondaryColor3dvEXT onutSecondaryColor3dvEXT
#define glSecondaryColor3f onutSecondaryColor3f
#define glSecondaryColor3fEXT onutSecondaryColor3fEXT
#define glSecondaryColor3fv onutSecondaryColor3fv
#define glSecondaryColor3fvEXT onutSecondaryColor3fvEXT
#define glSecondaryColor3hNV onutSecondaryColor3hNV
#define glSecondaryColor3hvNV onutSecondaryColor3hvNV
#define glSecondaryColor3i onutSecondaryColor3i
#define glSecondaryColor3iEXT onutSecondaryColor3iEXT
#define glSecondaryColor3iv onutSecondaryColor3iv
#define glSecondaryColor3ivEXT onutSecondaryColor3ivEXT
#define glSecondaryColor3s onutSecondaryColor3s
#define glSecondaryColor3sEXT onutSecondaryColor3sEXT
#define glSecondaryColor3sv onutSecondaryColor3sv
#define glSecondaryColor3svEXT onutSecondaryColor3svEXT
#define glSecondaryColor3ub onutSecondaryColor3ub
#define glSecondaryColor3ubEXT onutSecondaryColor3ubEXT
#define glSecondaryColor3ubv onutSecondaryColor3ubv
#define glSecondaryColor3ubvEXT onutSecondaryColor3ubvEXT
#define glSecondaryColor3ui onutSecondaryColor3ui
#define glSecondaryColor3uiEXT onutSecondaryColor3uiEXT
#define glSecondaryColor3uiv onutSecondaryColor3uiv
#define glSecondaryColor3uivEXT onutSecondaryColor3uivEXT
#define glSecondaryColor3us onutSecondaryColor3us
#define glSecondaryColor3usEXT onutSecondaryColor3usEXT
#define glSecondaryColor3usv onutSecondaryColor3usv
#define glSecondaryColor3usvEXT onutSecondaryColor3usvEXT
#define glSecondaryColorFormatNV onutSecondaryColorFormatNV
#define glSecondaryColorP3ui onutSecondaryColorP3ui
#define glSecondaryColorP3uiv onutSecondaryColorP3uiv
#define glSecondaryColorPointer onutSecondaryColorPointer
#define glSecondaryColorPointerEXT onutSecondaryColorPointerEXT
#define glSecondaryColorPointerListIBM onutSecondaryColorPointerListIBM
#define glSelectBuffer onutSelectBuffer
#define glSelectPerfMonitorCountersAMD onutSelectPerfMonitorCountersAMD
#define glSemaphoreParameterui64vEXT onutSemaphoreParameterui64vEXT
#define glSeparableFilter2D onutSeparableFilter2D
#define glSeparableFilter2DEXT onutSeparableFilter2DEXT
#define glSetFenceAPPLE onutSetFenceAPPLE
#define glSetFenceNV onutSetFenceNV
#define glSetFragmentShaderConstantATI onutSetFragmentShaderConstantATI
#define glSetInvariantEXT onutSetInvariantEXT
#define glSetLocalConstantEXT onutSetLocalConstantEXT
#define glSetMultisamplefvAMD onutSetMultisamplefvAMD
#define glShadeModel onutShadeModel
#define glShaderBinary onutShaderBinary
#define glShaderOp1EXT onutShaderOp1EXT
#define glShaderOp2EXT onutShaderOp2EXT
#define glShaderOp3EXT onutShaderOp3EXT
#define glShaderSource onutShaderSource
#define glShaderSourceARB onutShaderSourceARB
#define glShaderStorageBlockBinding onutShaderStorageBlockBinding
#define glSharpenTexFuncSGIS onutSharpenTexFuncSGIS
#define glSignalSemaphoreEXT onutSignalSemaphoreEXT
#define glSignalVkFenceNV onutSignalVkFenceNV
#define glSignalVkSemaphoreNV onutSignalVkSemaphoreNV
#define glSpecializeShaderARB onutSpecializeShaderARB
#define glSpriteParameterfSGIX onutSpriteParameterfSGIX
#define glSpriteParameterfvSGIX onutSpriteParameterfvSGIX
#define glSpriteParameteriSGIX onutSpriteParameteriSGIX
#define glSpriteParameterivSGIX onutSpriteParameterivSGIX
#define glStartInstrumentsSGIX onutStartInstrumentsSGIX
#define glStartTilingQCOM onutStartTilingQCOM
#define glStateCaptureNV onutStateCaptureNV
#define glStencilClearTagEXT onutStencilClearTagEXT
#define glStencilFillPathInstancedNV onutStencilFillPathInstancedNV
#define glStencilFillPathNV onutStencilFillPathNV
#define glStencilFunc onutStencilFunc
#define glStencilFuncSeparate onutStencilFuncSeparate
#define glStencilFuncSeparateATI onutStencilFuncSeparateATI
#define glStencilMask onutStencilMask
#define glStencilMaskSeparate onutStencilMaskSeparate
#define glStencilOp onutStencilOp
#define glStencilOpSeparate onutStencilOpSeparate
#define glStencilOpSeparateATI onutStencilOpSeparateATI
#define glStencilOpValueAMD onutStencilOpValueAMD
#define glStencilStrokePathInstancedNV onutStencilStrokePathInstancedNV
#define glStencilStrokePathNV onutStencilStrokePathNV
#define glStencilThenCoverFillPathInstancedNV onutStencilThenCoverFillPathInstancedNV
#define glStencilThenCoverFillPathNV onutStencilThenCoverFillPathNV
#define glStencilThenCoverStrokePathInstancedNV onutStencilThenCoverStrokePathInstancedNV
#define glStencilThenCoverStrokePathNV onutStencilThenCoverStrokePathNV
#define glStopInstrumentsSGIX onutStopInstrumentsSGIX
#define glStringMarkerGREMEDY onutStringMarkerGREMEDY
#define glSubpixelPrecisionBiasNV onutSubpixelPrecisionBiasNV
#define glSwizzleEXT onutSwizzleEXT
#define glSyncTextureINTEL onutSyncTextureINTEL
#define glTagSampleBufferSGIX onutTagSampleBufferSGIX
#define glTangent3bEXT onutTangent3bEXT
#define glTangent3bvEXT onutTangent3bvEXT
#define glTangent3dEXT onutTangent3dEXT
#define glTangent3dvEXT onutTangent3dvEXT
#define glTangent3fEXT onutTangent3fEXT
#define glTangent3fvEXT onutTangent3fvEXT
#define glTangent3iEXT onutTangent3iEXT
#define glTangent3ivEXT onutTangent3ivEXT
#define glTangent3sEXT onutTangent3sEXT
#define glTangent3svEXT onutTangent3svEXT
#define glTangentPointerEXT onutTangentPointerEXT
#define glTbufferMask3DFX onutTbufferMask3DFX
#define glTessellationFactorAMD onutTessellationFactorAMD
#define glTessellationModeAMD onutTessellationModeAMD
#define glTestFenceAPPLE onutTestFenceAPPLE
#define glTestFenceNV onutTestFenceNV
#define glTestObjectAPPLE onutTestObjectAPPLE
#define glTexBuffer onutTexBuffer
#define glTexBufferARB onutTexBufferARB
#define glTexBufferEXT onutTexBufferEXT
#define glTexBufferOES onutTexBufferOES
#define glTexBufferRange onutTexBufferRange
#define glTexBufferRangeEXT onutTexBufferRangeEXT
#define glTexBufferRangeOES onutTexBufferRangeOES
#define glTexBumpParameterfvATI onutTexBumpParameterfvATI
#define glTexBumpParameterivATI onutTexBumpParameterivATI
#define glTexCoord1bOES onutTexCoord1bOES
#define glTexCoord1bvOES onutTexCoord1bvOES
#define glTexCoord1d onutTexCoord1d
#define glTexCoord1dv onutTexCoord1dv
#define glTexCoord1f onutTexCoord1f
#define glTexCoord1fv onutTexCoord1fv
#define glTexCoord1hNV onutTexCoord1hNV
#define glTexCoord1hvNV onutTexCoord1hvNV
#define glTexCoord1i onutTexCoord1i
#define glTexCoord1iv onutTexCoord1iv
#define glTexCoord1s onutTexCoord1s
#define glTexCoord1sv onutTexCoord1sv
#define glTexCoord1xOES onutTexCoord1xOES
#define glTexCoord1xvOES onutTexCoord1xvOES
#define glTexCoord2bOES onutTexCoord2bOES
#define glTexCoord2bvOES onutTexCoord2bvOES
#define glTexCoord2d onutTexCoord2d
#define glTexCoord2dv onutTexCoord2dv
#define glTexCoord2f onutTexCoord2f
#define glTexCoord2fColor3fVertex3fSUN onutTexCoord2fColor3fVertex3fSUN
#define glTexCoord2fColor3fVertex3fvSUN onutTexCoord2fColor3fVertex3fvSUN
#define glTexCoord2fColor4fNormal3fVertex3fSUN onutTexCoord2fColor4fNormal3fVertex3fSUN
#define glTexCoord2fColor4fNormal3fVertex3fvSUN onutTexCoord2fColor4fNormal3fVertex3fvSUN
#define glTexCoord2fColor4ubVertex3fSUN onutTexCoord2fColor4ubVertex3fSUN
#define glTexCoord2fColor4ubVertex3fvSUN onutTexCoord2fColor4ubVertex3fvSUN
#define glTexCoord2fNormal3fVertex3fSUN onutTexCoord2fNormal3fVertex3fSUN
#define glTexCoord2fNormal3fVertex3fvSUN onutTexCoord2fNormal3fVertex3fvSUN
#define glTexCoord2fVertex3fSUN onutTexCoord2fVertex3fSUN
#define glTexCoord2fVertex3fvSUN onutTexCoord2fVertex3fvSUN
#define glTexCoord2fv onutTexCoord2fv
#define glTexCoord2hNV onutTexCoord2hNV
#define glTexCoord2hvNV onutTexCoord2hvNV
#define glTexCoord2i onutTexCoord2i
#define glTexCoord2iv onutTexCoord2iv
#define glTexCoord2s onutTexCoord2s
#define glTexCoord2sv onutTexCoord2sv
#define glTexCoord2xOES onutTexCoord2xOES
#define glTexCoord2xvOES onutTexCoord2xvOES
#define glTexCoord3bOES onutTexCoord3bOES
#define glTexCoord3bvOES onutTexCoord3bvOES
#define glTexCoord3d onutTexCoord3d
#define glTexCoord3dv onutTexCoord3dv
#define glTexCoord3f onutTexCoord3f
#define glTexCoord3fv onutTexCoord3fv
#define glTexCoord3hNV onutTexCoord3hNV
#define glTexCoord3hvNV onutTexCoord3hvNV
#define glTexCoord3i onutTexCoord3i
#define glTexCoord3iv onutTexCoord3iv
#define glTexCoord3s onutTexCoord3s
#define glTexCoord3sv onutTexCoord3sv
#define glTexCoord3xOES onutTexCoord3xOES
#define glTexCoord3xvOES onutTexCoord3xvOES
#define glTexCoord4bOES onutTexCoord4bOES
#define glTexCoord4bvOES onutTexCoord4bvOES
#define glTexCoord4d onutTexCoord4d
#define glTexCoord4dv onutTexCoord4dv
#define glTexCoord4f onutTexCoord4f
#define glTexCoord4fColor4fNormal3fVertex4fSUN onutTexCoord4fColor4fNormal3fVertex4fSUN
#define glTexCoord4fColor4fNormal3fVertex4fvSUN onutTexCoord4fColor4fNormal3fVertex4fvSUN
#define glTexCoord4fVertex4fSUN onutTexCoord4fVertex4fSUN
#define glTexCoord4fVertex4fvSUN onutTexCoord4fVertex4fvSUN
#define glTexCoord4fv onutTexCoord4fv
#define glTexCoord4hNV onutTexCoord4hNV
#define glTexCoord4hvNV onutTexCoord4hvNV
#define glTexCoord4i onutTexCoord4i
#define glTexCoord4iv onutTexCoord4iv
#define glTexCoord4s onutTexCoord4s
#define glTexCoord4sv onutTexCoord4sv
#define glTexCoord4xOES onutTexCoord4xOES
#define glTexCoord4xvOES onutTexCoord4xvOES
#define glTexCoordFormatNV onutTexCoordFormatNV
#define glTexCoordP1ui onutTexCoordP1ui
#define glTexCoordP1uiv onutTexCoordP1uiv
#define glTexCoordP2ui onutTexCoordP2ui
#define glTexCoordP2uiv onutTexCoordP2uiv
#define glTexCoordP3ui onutTexCoordP3ui
#define glTexCoordP3uiv onutTexCoordP3uiv
#define glTexCoordP4ui onutTexCoordP4ui
#define glTexCoordP4uiv onutTexCoordP4uiv
#define glTexCoordPointer onutTexCoordPointer
#define glTexCoordPointerEXT onutTexCoordPointerEXT
#define glTexCoordPointerListIBM onutTexCoordPointerListIBM
#define glTexCoordPointervINTEL onutTexCoordPointervINTEL
#define glTexEnvf onutTexEnvf
#define glTexEnvfv onutTexEnvfv
#define glTexEnvi onutTexEnvi
#define glTexEnviv onutTexEnviv
#define glTexEnvx onutTexEnvx
#define glTexEnvxOES onutTexEnvxOES
#define glTexEnvxv onutTexEnvxv
#define glTexEnvxvOES onutTexEnvxvOES
#define glTexFilterFuncSGIS onutTexFilterFuncSGIS
#define glTexGend onutTexGend
#define glTexGendv onutTexGendv
#define glTexGenf onutTexGenf
#define glTexGenfOES onutTexGenfOES
#define glTexGenfv onutTexGenfv
#define glTexGenfvOES onutTexGenfvOES
#define glTexGeni onutTexGeni
#define glTexGeniOES onutTexGeniOES
#define glTexGeniv onutTexGeniv
#define glTexGenivOES onutTexGenivOES
#define glTexGenxOES onutTexGenxOES
#define glTexGenxvOES onutTexGenxvOES
#define glTexImage1D onutTexImage1D
#define glTexImage2D onutTexImage2D
#define glTexImage2DMultisample onutTexImage2DMultisample
#define glTexImage2DMultisampleCoverageNV onutTexImage2DMultisampleCoverageNV
#define glTexImage3D onutTexImage3D
#define glTexImage3DEXT onutTexImage3DEXT
#define glTexImage3DMultisample onutTexImage3DMultisample
#define glTexImage3DMultisampleCoverageNV onutTexImage3DMultisampleCoverageNV
#define glTexImage3DOES onutTexImage3DOES
#define glTexImage4DSGIS onutTexImage4DSGIS
#define glTexPageCommitmentARB onutTexPageCommitmentARB
#define glTexPageCommitmentEXT onutTexPageCommitmentEXT
#define glTexParameterIiv onutTexParameterIiv
#define glTexParameterIivEXT onutTexParameterIivEXT
#define glTexParameterIivOES onutTexParameterIivOES
#define glTexParameterIuiv onutTexParameterIuiv
#define glTexParameterIuivEXT onutTexParameterIuivEXT
#define glTexParameterIuivOES onutTexParameterIuivOES
#define glTexParameterf onutTexParameterf
#define glTexParameterfv onutTexParameterfv
#define glTexParameteri onutTexParameteri
#define glTexParameteriv onutTexParameteriv
#define glTexParameterx onutTexParameterx
#define glTexParameterxOES onutTexParameterxOES
#define glTexParameterxv onutTexParameterxv
#define glTexParameterxvOES onutTexParameterxvOES
#define glTexRenderbufferNV onutTexRenderbufferNV
#define glTexStorage1D onutTexStorage1D
#define glTexStorage1DEXT onutTexStorage1DEXT
#define glTexStorage2D onutTexStorage2D
#define glTexStorage2DEXT onutTexStorage2DEXT
#define glTexStorage2DMultisample onutTexStorage2DMultisample
#define glTexStorage3D onutTexStorage3D
#define glTexStorage3DEXT onutTexStorage3DEXT
#define glTexStorage3DMultisample onutTexStorage3DMultisample
#define glTexStorage3DMultisampleOES onutTexStorage3DMultisampleOES
#define glTexStorageMem1DEXT onutTexStorageMem1DEXT
#define glTexStorageMem2DEXT onutTexStorageMem2DEXT
#define glTexStorageMem2DMultisampleEXT onutTexStorageMem2DMultisampleEXT
#define glTexStorageMem3DEXT onutTexStorageMem3DEXT
#define glTexStorageMem3DMultisampleEXT onutTexStorageMem3DMultisampleEXT
#define glTexStorageSparseAMD onutTexStorageSparseAMD
#define glTexSubImage1D onutTexSubImage1D
#define glTexSubImage1DEXT onutTexSubImage1DEXT
#define glTexSubImage2D onutTexSubImage2D
#define glTexSubImage2DEXT onutTexSubImage2DEXT
#define glTexSubImage3D onutTexSubImage3D
#define glTexSubImage3DEXT onutTexSubImage3DEXT
#define glTexSubImage3DOES onutTexSubImage3DOES
#define glTexSubImage4DSGIS onutTexSubImage4DSGIS
#define glTextureBarrier onutTextureBarrier
#define glTextureBarrierNV onutTextureBarrierNV
#define glTextureBuffer onutTextureBuffer
#define glTextureBufferEXT onutTextureBufferEXT
#define glTextureBufferRange onutTextureBufferRange
#define glTextureBufferRangeEXT onutTextureBufferRangeEXT
#define glTextureColorMaskSGIS onutTextureColorMaskSGIS
#define glTextureImage1DEXT onutTextureImage1DEXT
#define glTextureImage2DEXT onutTextureImage2DEXT
#define glTextureImage2DMultisampleCoverageNV onutTextureImage2DMultisampleCoverageNV
#define glTextureImage2DMultisampleNV onutTextureImage2DMultisampleNV
#define glTextureImage3DEXT onutTextureImage3DEXT
#define glTextureImage3DMultisampleCoverageNV onutTextureImage3DMultisampleCoverageNV
#define glTextureImage3DMultisampleNV onutTextureImage3DMultisampleNV
#define glTextureLightEXT onutTextureLightEXT
#define glTextureMaterialEXT onutTextureMaterialEXT
#define glTextureNormalEXT onutTextureNormalEXT
#define glTexturePageCommitmentEXT onutTexturePageCommitmentEXT
#define glTextureParameterIiv onutTextureParameterIiv
#define glTextureParameterIivEXT onutTextureParameterIivEXT
#define glTextureParameterIuiv onutTextureParameterIuiv
#define glTextureParameterIuivEXT onutTextureParameterIuivEXT
#define glTextureParameterf onutTextureParameterf
#define glTextureParameterfEXT onutTextureParameterfEXT
#define glTextureParameterfv onutTextureParameterfv
#define glTextureParameterfvEXT onutTextureParameterfvEXT
#define glTextureParameteri onutTextureParameteri
#define glTextureParameteriEXT onutTextureParameteriEXT
#define glTextureParameteriv onutTextureParameteriv
#define glTextureParameterivEXT onutTextureParameterivEXT
#define glTextureRangeAPPLE onutTextureRangeAPPLE
#define glTextureRenderbufferEXT onutTextureRenderbufferEXT
#define glTextureStorage1D onutTextureStorage1D
#define glTextureStorage1DEXT onutTextureStorage1DEXT
#define glTextureStorage2D onutTextureStorage2D
#define glTextureStorage2DEXT onutTextureStorage2DEXT
#define glTextureStorage2DMultisample onutTextureStorage2DMultisample
#define glTextureStorage2DMultisampleEXT onutTextureStorage2DMultisampleEXT
#define glTextureStorage3D onutTextureStorage3D
#define glTextureStorage3DEXT onutTextureStorage3DEXT
#define glTextureStorage3DMultisample onutTextureStorage3DMultisample
#define glTextureStorage3DMultisampleEXT onutTextureStorage3DMultisampleEXT
#define glTextureStorageMem1DEXT onutTextureStorageMem1DEXT
#define glTextureStorageMem2DEXT onutTextureStorageMem2DEXT
#define glTextureStorageMem2DMultisampleEXT onutTextureStorageMem2DMultisampleEXT
#define glTextureStorageMem3DEXT onutTextureStorageMem3DEXT
#define glTextureStorageMem3DMultisampleEXT onutTextureStorageMem3DMultisampleEXT
#define glTextureStorageSparseAMD onutTextureStorageSparseAMD
#define glTextureSubImage1D onutTextureSubImage1D
#define glTextureSubImage1DEXT onutTextureSubImage1DEXT
#define glTextureSubImage2D onutTextureSubImage2D
#define glTextureSubImage2DEXT onutTextureSubImage2DEXT
#define glTextureSubImage3D onutTextureSubImage3D
#define glTextureSubImage3DEXT onutTextureSubImage3DEXT
#define glTextureView onutTextureView
#define glTextureViewEXT onutTextureViewEXT
#define glTextureViewOES onutTextureViewOES
#define glTrackMatrixNV onutTrackMatrixNV
#define glTransformFeedbackAttribsNV onutTransformFeedbackAttribsNV
#define glTransformFeedbackBufferBase onutTransformFeedbackBufferBase
#define glTransformFeedbackBufferRange onutTransformFeedbackBufferRange
#define glTransformFeedbackStreamAttribsNV onutTransformFeedbackStreamAttribsNV
#define glTransformFeedbackVaryings onutTransformFeedbackVaryings
#define glTransformFeedbackVaryingsEXT onutTransformFeedbackVaryingsEXT
#define glTransformFeedbackVaryingsNV onutTransformFeedbackVaryingsNV
#define glTransformPathNV onutTransformPathNV
#define glTranslated onutTranslated
#define glTranslatef onutTranslatef
#define glTranslatex onutTranslatex
#define glTranslatexOES onutTranslatexOES
#define glUniform1d onutUniform1d
#define glUniform1dv onutUniform1dv
#define glUniform1f onutUniform1f
#define glUniform1fARB onutUniform1fARB
#define glUniform1fv onutUniform1fv
#define glUniform1fvARB onutUniform1fvARB
#define glUniform1i onutUniform1i
#define glUniform1i64ARB onutUniform1i64ARB
#define glUniform1i64NV onutUniform1i64NV
#define glUniform1i64vARB onutUniform1i64vARB
#define glUniform1i64vNV onutUniform1i64vNV
#define glUniform1iARB onutUniform1iARB
#define glUniform1iv onutUniform1iv
#define glUniform1ivARB onutUniform1ivARB
#define glUniform1ui onutUniform1ui
#define glUniform1ui64ARB onutUniform1ui64ARB
#define glUniform1ui64NV onutUniform1ui64NV
#define glUniform1ui64vARB onutUniform1ui64vARB
#define glUniform1ui64vNV onutUniform1ui64vNV
#define glUniform1uiEXT onutUniform1uiEXT
#define glUniform1uiv onutUniform1uiv
#define glUniform1uivEXT onutUniform1uivEXT
#define glUniform2d onutUniform2d
#define glUniform2dv onutUniform2dv
#define glUniform2f onutUniform2f
#define glUniform2fARB onutUniform2fARB
#define glUniform2fv onutUniform2fv
#define glUniform2fvARB onutUniform2fvARB
#define glUniform2i onutUniform2i
#define glUniform2i64ARB onutUniform2i64ARB
#define glUniform2i64NV onutUniform2i64NV
#define glUniform2i64vARB onutUniform2i64vARB
#define glUniform2i64vNV onutUniform2i64vNV
#define glUniform2iARB onutUniform2iARB
#define glUniform2iv onutUniform2iv
#define glUniform2ivARB onutUniform2ivARB
#define glUniform2ui onutUniform2ui
#define glUniform2ui64ARB onutUniform2ui64ARB
#define glUniform2ui64NV onutUniform2ui64NV
#define glUniform2ui64vARB onutUniform2ui64vARB
#define glUniform2ui64vNV onutUniform2ui64vNV
#define glUniform2uiEXT onutUniform2uiEXT
#define glUniform2uiv onutUniform2uiv
#define glUniform2uivEXT onutUniform2uivEXT
#define glUniform3d onutUniform3d
#define glUniform3dv onutUniform3dv
#define glUniform3f onutUniform3f
#define glUniform3fARB onutUniform3fARB
#define glUniform3fv onutUniform3fv
#define glUniform3fvARB onutUniform3fvARB
#define glUniform3i onutUniform3i
#define glUniform3i64ARB onutUniform3i64ARB
#define glUniform3i64NV onutUniform3i64NV
#define glUniform3i64vARB onutUniform3i64vARB
#define glUniform3i64vNV onutUniform3i64vNV
#define glUniform3iARB onutUniform3iARB
#define glUniform3iv onutUniform3iv
#define glUniform3ivARB onutUniform3ivARB
#define glUniform3ui onutUniform3ui
#define glUniform3ui64ARB onutUniform3ui64ARB
#define glUniform3ui64NV onutUniform3ui64NV
#define glUniform3ui64vARB onutUniform3ui64vARB
#define glUniform3ui64vNV onutUniform3ui64vNV
#define glUniform3uiEXT onutUniform3uiEXT
#define glUniform3uiv onutUniform3uiv
#define glUniform3uivEXT onutUniform3uivEXT
#define glUniform4d onutUniform4d
#define glUniform4dv onutUniform4dv
#define glUniform4f onutUniform4f
#define glUniform4fARB onutUniform4fARB
#define glUniform4fv onutUniform4fv
#define glUniform4fvARB onutUniform4fvARB
#define glUniform4i onutUniform4i
#define glUniform4i64ARB onutUniform4i64ARB
#define glUniform4i64NV onutUniform4i64NV
#define glUniform4i64vARB onutUniform4i64vARB
#define glUniform4i64vNV onutUniform4i64vNV
#define glUniform4iARB onutUniform4iARB
#define glUniform4iv onutUniform4iv
#define glUniform4ivARB onutUniform4ivARB
#define glUniform4ui onutUniform4ui
#define glUniform4ui64ARB onutUniform4ui64ARB
#define glUniform4ui64NV onutUniform4ui64NV
#define glUniform4ui64vARB onutUniform4ui64vARB
#define glUniform4ui64vNV onutUniform4ui64vNV
#define glUniform4uiEXT onutUniform4uiEXT
#define glUniform4uiv onutUniform4uiv
#define glUniform4uivEXT onutUniform4uivEXT
#define glUniformBlockBinding onutUniformBlockBinding
#define glUniformBufferEXT onutUniformBufferEXT
#define glUniformHandleui64ARB onutUniformHandleui64ARB
#define glUniformHandleui64IMG onutUniformHandleui64IMG
#define glUniformHandleui64NV onutUniformHandleui64NV
#define glUniformHandleui64vARB onutUniformHandleui64vARB
#define glUniformHandleui64vIMG onutUniformHandleui64vIMG
#define glUniformHandleui64vNV onutUniformHandleui64vNV
#define glUniformMatrix2dv onutUniformMatrix2dv
#define glUniformMatrix2fv onutUniformMatrix2fv
#define glUniformMatrix2fvARB onutUniformMatrix2fvARB
#define glUniformMatrix2x3dv onutUniformMatrix2x3dv
#define glUniformMatrix2x3fv onutUniformMatrix2x3fv
#define glUniformMatrix2x3fvNV onutUniformMatrix2x3fvNV
#define glUniformMatrix2x4dv onutUniformMatrix2x4dv
#define glUniformMatrix2x4fv onutUniformMatrix2x4fv
#define glUniformMatrix2x4fvNV onutUniformMatrix2x4fvNV
#define glUniformMatrix3dv onutUniformMatrix3dv
#define glUniformMatrix3fv onutUniformMatrix3fv
#define glUniformMatrix3fvARB onutUniformMatrix3fvARB
#define glUniformMatrix3x2dv onutUniformMatrix3x2dv
#define glUniformMatrix3x2fv onutUniformMatrix3x2fv
#define glUniformMatrix3x2fvNV onutUniformMatrix3x2fvNV
#define glUniformMatrix3x4dv onutUniformMatrix3x4dv
#define glUniformMatrix3x4fv onutUniformMatrix3x4fv
#define glUniformMatrix3x4fvNV onutUniformMatrix3x4fvNV
#define glUniformMatrix4dv onutUniformMatrix4dv
#define glUniformMatrix4fv onutUniformMatrix4fv
#define glUniformMatrix4fvARB onutUniformMatrix4fvARB
#define glUniformMatrix4x2dv onutUniformMatrix4x2dv
#define glUniformMatrix4x2fv onutUniformMatrix4x2fv
#define glUniformMatrix4x2fvNV onutUniformMatrix4x2fvNV
#define glUniformMatrix4x3dv onutUniformMatrix4x3dv
#define glUniformMatrix4x3fv onutUniformMatrix4x3fv
#define glUniformMatrix4x3fvNV onutUniformMatrix4x3fvNV
#define glUniformSubroutinesuiv onutUniformSubroutinesuiv
#define glUniformui64NV onutUniformui64NV
#define glUniformui64vNV onutUniformui64vNV
#define glUnlockArraysEXT onutUnlockArraysEXT
#define glUnmapBuffer onutUnmapBuffer
#define glUnmapBufferARB onutUnmapBufferARB
#define glUnmapBufferOES onutUnmapBufferOES
#define glUnmapNamedBuffer onutUnmapNamedBuffer
#define glUnmapNamedBufferEXT onutUnmapNamedBufferEXT
#define glUnmapObjectBufferATI onutUnmapObjectBufferATI
#define glUnmapTexture2DINTEL onutUnmapTexture2DINTEL
#define glUpdateObjectBufferATI onutUpdateObjectBufferATI
#define glUseProgram onutUseProgram
#define glUseProgramObjectARB onutUseProgramObjectARB
#define glUseProgramStages onutUseProgramStages
#define glUseProgramStagesEXT onutUseProgramStagesEXT
#define glUseShaderProgramEXT onutUseShaderProgramEXT
#define glVDPAUFiniNV onutVDPAUFiniNV
#define glVDPAUGetSurfaceivNV onutVDPAUGetSurfaceivNV
#define glVDPAUInitNV onutVDPAUInitNV
#define glVDPAUIsSurfaceNV onutVDPAUIsSurfaceNV
#define glVDPAUMapSurfacesNV onutVDPAUMapSurfacesNV
#define glVDPAURegisterOutputSurfaceNV onutVDPAURegisterOutputSurfaceNV
#define glVDPAURegisterVideoSurfaceNV onutVDPAURegisterVideoSurfaceNV
#define glVDPAUSurfaceAccessNV onutVDPAUSurfaceAccessNV
#define glVDPAUUnmapSurfacesNV onutVDPAUUnmapSurfacesNV
#define glVDPAUUnregisterSurfaceNV onutVDPAUUnregisterSurfaceNV
#define glValidateProgram onutValidateProgram
#define glValidateProgramARB onutValidateProgramARB
#define glValidateProgramPipeline onutValidateProgramPipeline
#define glValidateProgramPipelineEXT onutValidateProgramPipelineEXT
#define glVariantArrayObjectATI onutVariantArrayObjectATI
#define glVariantPointerEXT onutVariantPointerEXT
#define glVariantbvEXT onutVariantbvEXT
#define glVariantdvEXT onutVariantdvEXT
#define glVariantfvEXT onutVariantfvEXT
#define glVariantivEXT onutVariantivEXT
#define glVariantsvEXT onutVariantsvEXT
#define glVariantubvEXT onutVariantubvEXT
#define glVariantuivEXT onutVariantuivEXT
#define glVariantusvEXT onutVariantusvEXT
#define glVertex2bOES onutVertex2bOES
#define glVertex2bvOES onutVertex2bvOES
#define glVertex2d onutVertex2d
#define glVertex2dv onutVertex2dv
#define glVertex2f onutVertex2f
#define glVertex2fv onutVertex2fv
#define glVertex2hNV onutVertex2hNV
#define glVertex2hvNV onutVertex2hvNV
#define glVertex2i onutVertex2i
#define glVertex2iv onutVertex2iv
#define glVertex2s onutVertex2s
#define glVertex2sv onutVertex2sv
#define glVertex2xOES onutVertex2xOES
#define glVertex2xvOES onutVertex2xvOES
#define glVertex3bOES onutVertex3bOES
#define glVertex3bvOES onutVertex3bvOES
#define glVertex3d onutVertex3d
#define glVertex3dv onutVertex3dv
#define glVertex3f onutVertex3f
#define glVertex3fv onutVertex3fv
#define glVertex3hNV onutVertex3hNV
#define glVertex3hvNV onutVertex3hvNV
#define glVertex3i onutVertex3i
#define glVertex3iv onutVertex3iv
#define glVertex3s onutVertex3s
#define glVertex3sv onutVertex3sv
#define glVertex3xOES onutVertex3xOES
#define glVertex3xvOES onutVertex3xvOES
#define glVertex4bOES onutVertex4bOES
#define glVertex4bvOES onutVertex4bvOES
#define glVertex4d onutVertex4d
#define glVertex4dv onutVertex4dv
#define glVertex4f onutVertex4f
#define glVertex4fv onutVertex4fv
#define glVertex4hNV onutVertex4hNV
#define glVertex4hvNV onutVertex4hvNV
#define glVertex4i onutVertex4i
#define glVertex4iv onutVertex4iv
#define glVertex4s onutVertex4s
#define glVertex4sv onutVertex4sv
#define glVertex4xOES onutVertex4xOES
#define glVertex4xvOES onutVertex4xvOES
#define glVertexArrayAttribBinding onutVertexArrayAttribBinding
#define glVertexArrayAttribFormat onutVertexArrayAttribFormat
#define glVertexArrayAttribIFormat onutVertexArrayAttribIFormat
#define glVertexArrayAttribLFormat onutVertexArrayAttribLFormat
#define glVertexArrayBindVertexBufferEXT onutVertexArrayBindVertexBufferEXT
#define glVertexArrayBindingDivisor onutVertexArrayBindingDivisor
#define glVertexArrayColorOffsetEXT onutVertexArrayColorOffsetEXT
#define glVertexArrayEdgeFlagOffsetEXT onutVertexArrayEdgeFlagOffsetEXT
#define glVertexArrayElementBuffer onutVertexArrayElementBuffer
#define glVertexArrayFogCoordOffsetEXT onutVertexArrayFogCoordOffsetEXT
#define glVertexArrayIndexOffsetEXT onutVertexArrayIndexOffsetEXT
#define glVertexArrayMultiTexCoordOffsetEXT onutVertexArrayMultiTexCoordOffsetEXT
#define glVertexArrayNormalOffsetEXT onutVertexArrayNormalOffsetEXT
#define glVertexArrayParameteriAPPLE onutVertexArrayParameteriAPPLE
#define glVertexArrayRangeAPPLE onutVertexArrayRangeAPPLE
#define glVertexArrayRangeNV onutVertexArrayRangeNV
#define glVertexArraySecondaryColorOffsetEXT onutVertexArraySecondaryColorOffsetEXT
#define glVertexArrayTexCoordOffsetEXT onutVertexArrayTexCoordOffsetEXT
#define glVertexArrayVertexAttribBindingEXT onutVertexArrayVertexAttribBindingEXT
#define glVertexArrayVertexAttribDivisorEXT onutVertexArrayVertexAttribDivisorEXT
#define glVertexArrayVertexAttribFormatEXT onutVertexArrayVertexAttribFormatEXT
#define glVertexArrayVertexAttribIFormatEXT onutVertexArrayVertexAttribIFormatEXT
#define glVertexArrayVertexAttribIOffsetEXT onutVertexArrayVertexAttribIOffsetEXT
#define glVertexArrayVertexAttribLFormatEXT onutVertexArrayVertexAttribLFormatEXT
#define glVertexArrayVertexAttribLOffsetEXT onutVertexArrayVertexAttribLOffsetEXT
#define glVertexArrayVertexAttribOffsetEXT onutVertexArrayVertexAttribOffsetEXT
#define glVertexArrayVertexBindingDivisorEXT onutVertexArrayVertexBindingDivisorEXT
#define glVertexArrayVertexBuffer onutVertexArrayVertexBuffer
#define glVertexArrayVertexBuffers onutVertexArrayVertexBuffers
#define glVertexArrayVertexOffsetEXT onutVertexArrayVertexOffsetEXT
#define glVertexAttrib1d onutVertexAttrib1d
#define glVertexAttrib1dARB onutVertexAttrib1dARB
#define glVertexAttrib1dNV onutVertexAttrib1dNV
#define glVertexAttrib1dv onutVertexAttrib1dv
#define glVertexAttrib1dvARB onutVertexAttrib1dvARB
#define glVertexAttrib1dvNV onutVertexAttrib1dvNV
#define glVertexAttrib1f onutVertexAttrib1f
#define glVertexAttrib1fARB onutVertexAttrib1fARB
#define glVertexAttrib1fNV onutVertexAttrib1fNV
#define glVertexAttrib1fv onutVertexAttrib1fv
#define glVertexAttrib1fvARB onutVertexAttrib1fvARB
#define glVertexAttrib1fvNV onutVertexAttrib1fvNV
#define glVertexAttrib1hNV onutVertexAttrib1hNV
#define glVertexAttrib1hvNV onutVertexAttrib1hvNV
#define glVertexAttrib1s onutVertexAttrib1s
#define glVertexAttrib1sARB onutVertexAttrib1sARB
#define glVertexAttrib1sNV onutVertexAttrib1sNV
#define glVertexAttrib1sv onutVertexAttrib1sv
#define glVertexAttrib1svARB onutVertexAttrib1svARB
#define glVertexAttrib1svNV onutVertexAttrib1svNV
#define glVertexAttrib2d onutVertexAttrib2d
#define glVertexAttrib2dARB onutVertexAttrib2dARB
#define glVertexAttrib2dNV onutVertexAttrib2dNV
#define glVertexAttrib2dv onutVertexAttrib2dv
#define glVertexAttrib2dvARB onutVertexAttrib2dvARB
#define glVertexAttrib2dvNV onutVertexAttrib2dvNV
#define glVertexAttrib2f onutVertexAttrib2f
#define glVertexAttrib2fARB onutVertexAttrib2fARB
#define glVertexAttrib2fNV onutVertexAttrib2fNV
#define glVertexAttrib2fv onutVertexAttrib2fv
#define glVertexAttrib2fvARB onutVertexAttrib2fvARB
#define glVertexAttrib2fvNV onutVertexAttrib2fvNV
#define glVertexAttrib2hNV onutVertexAttrib2hNV
#define glVertexAttrib2hvNV onutVertexAttrib2hvNV
#define glVertexAttrib2s onutVertexAttrib2s
#define glVertexAttrib2sARB onutVertexAttrib2sARB
#define glVertexAttrib2sNV onutVertexAttrib2sNV
#define glVertexAttrib2sv onutVertexAttrib2sv
#define glVertexAttrib2svARB onutVertexAttrib2svARB
#define glVertexAttrib2svNV onutVertexAttrib2svNV
#define glVertexAttrib3d onutVertexAttrib3d
#define glVertexAttrib3dARB onutVertexAttrib3dARB
#define glVertexAttrib3dNV onutVertexAttrib3dNV
#define glVertexAttrib3dv onutVertexAttrib3dv
#define glVertexAttrib3dvARB onutVertexAttrib3dvARB
#define glVertexAttrib3dvNV onutVertexAttrib3dvNV
#define glVertexAttrib3f onutVertexAttrib3f
#define glVertexAttrib3fARB onutVertexAttrib3fARB
#define glVertexAttrib3fNV onutVertexAttrib3fNV
#define glVertexAttrib3fv onutVertexAttrib3fv
#define glVertexAttrib3fvARB onutVertexAttrib3fvARB
#define glVertexAttrib3fvNV onutVertexAttrib3fvNV
#define glVertexAttrib3hNV onutVertexAttrib3hNV
#define glVertexAttrib3hvNV onutVertexAttrib3hvNV
#define glVertexAttrib3s onutVertexAttrib3s
#define glVertexAttrib3sARB onutVertexAttrib3sARB
#define glVertexAttrib3sNV onutVertexAttrib3sNV
#define glVertexAttrib3sv onutVertexAttrib3sv
#define glVertexAttrib3svARB onutVertexAttrib3svARB
#define glVertexAttrib3svNV onutVertexAttrib3svNV
#define glVertexAttrib4Nbv onutVertexAttrib4Nbv
#define glVertexAttrib4NbvARB onutVertexAttrib4NbvARB
#define glVertexAttrib4Niv onutVertexAttrib4Niv
#define glVertexAttrib4NivARB onutVertexAttrib4NivARB
#define glVertexAttrib4Nsv onutVertexAttrib4Nsv
#define glVertexAttrib4NsvARB onutVertexAttrib4NsvARB
#define glVertexAttrib4Nub onutVertexAttrib4Nub
#define glVertexAttrib4NubARB onutVertexAttrib4NubARB
#define glVertexAttrib4Nubv onutVertexAttrib4Nubv
#define glVertexAttrib4NubvARB onutVertexAttrib4NubvARB
#define glVertexAttrib4Nuiv onutVertexAttrib4Nuiv
#define glVertexAttrib4NuivARB onutVertexAttrib4NuivARB
#define glVertexAttrib4Nusv onutVertexAttrib4Nusv
#define glVertexAttrib4NusvARB onutVertexAttrib4NusvARB
#define glVertexAttrib4bv onutVertexAttrib4bv
#define glVertexAttrib4bvARB onutVertexAttrib4bvARB
#define glVertexAttrib4d onutVertexAttrib4d
#define glVertexAttrib4dARB onutVertexAttrib4dARB
#define glVertexAttrib4dNV onutVertexAttrib4dNV
#define glVertexAttrib4dv onutVertexAttrib4dv
#define glVertexAttrib4dvARB onutVertexAttrib4dvARB
#define glVertexAttrib4dvNV onutVertexAttrib4dvNV
#define glVertexAttrib4f onutVertexAttrib4f
#define glVertexAttrib4fARB onutVertexAttrib4fARB
#define glVertexAttrib4fNV onutVertexAttrib4fNV
#define glVertexAttrib4fv onutVertexAttrib4fv
#define glVertexAttrib4fvARB onutVertexAttrib4fvARB
#define glVertexAttrib4fvNV onutVertexAttrib4fvNV
#define glVertexAttrib4hNV onutVertexAttrib4hNV
#define glVertexAttrib4hvNV onutVertexAttrib4hvNV
#define glVertexAttrib4iv onutVertexAttrib4iv
#define glVertexAttrib4ivARB onutVertexAttrib4ivARB
#define glVertexAttrib4s onutVertexAttrib4s
#define glVertexAttrib4sARB onutVertexAttrib4sARB
#define glVertexAttrib4sNV onutVertexAttrib4sNV
#define glVertexAttrib4sv onutVertexAttrib4sv
#define glVertexAttrib4svARB onutVertexAttrib4svARB
#define glVertexAttrib4svNV onutVertexAttrib4svNV
#define glVertexAttrib4ubNV onutVertexAttrib4ubNV
#define glVertexAttrib4ubv onutVertexAttrib4ubv
#define glVertexAttrib4ubvARB onutVertexAttrib4ubvARB
#define glVertexAttrib4ubvNV onutVertexAttrib4ubvNV
#define glVertexAttrib4uiv onutVertexAttrib4uiv
#define glVertexAttrib4uivARB onutVertexAttrib4uivARB
#define glVertexAttrib4usv onutVertexAttrib4usv
#define glVertexAttrib4usvARB onutVertexAttrib4usvARB
#define glVertexAttribArrayObjectATI onutVertexAttribArrayObjectATI
#define glVertexAttribBinding onutVertexAttribBinding
#define glVertexAttribDivisor onutVertexAttribDivisor
#define glVertexAttribDivisorANGLE onutVertexAttribDivisorANGLE
#define glVertexAttribDivisorARB onutVertexAttribDivisorARB
#define glVertexAttribDivisorEXT onutVertexAttribDivisorEXT
#define glVertexAttribDivisorNV onutVertexAttribDivisorNV
#define glVertexAttribFormat onutVertexAttribFormat
#define glVertexAttribFormatNV onutVertexAttribFormatNV
#define glVertexAttribI1i onutVertexAttribI1i
#define glVertexAttribI1iEXT onutVertexAttribI1iEXT
#define glVertexAttribI1iv onutVertexAttribI1iv
#define glVertexAttribI1ivEXT onutVertexAttribI1ivEXT
#define glVertexAttribI1ui onutVertexAttribI1ui
#define glVertexAttribI1uiEXT onutVertexAttribI1uiEXT
#define glVertexAttribI1uiv onutVertexAttribI1uiv
#define glVertexAttribI1uivEXT onutVertexAttribI1uivEXT
#define glVertexAttribI2i onutVertexAttribI2i
#define glVertexAttribI2iEXT onutVertexAttribI2iEXT
#define glVertexAttribI2iv onutVertexAttribI2iv
#define glVertexAttribI2ivEXT onutVertexAttribI2ivEXT
#define glVertexAttribI2ui onutVertexAttribI2ui
#define glVertexAttribI2uiEXT onutVertexAttribI2uiEXT
#define glVertexAttribI2uiv onutVertexAttribI2uiv
#define glVertexAttribI2uivEXT onutVertexAttribI2uivEXT
#define glVertexAttribI3i onutVertexAttribI3i
#define glVertexAttribI3iEXT onutVertexAttribI3iEXT
#define glVertexAttribI3iv onutVertexAttribI3iv
#define glVertexAttribI3ivEXT onutVertexAttribI3ivEXT
#define glVertexAttribI3ui onutVertexAttribI3ui
#define glVertexAttribI3uiEXT onutVertexAttribI3uiEXT
#define glVertexAttribI3uiv onutVertexAttribI3uiv
#define glVertexAttribI3uivEXT onutVertexAttribI3uivEXT
#define glVertexAttribI4bv onutVertexAttribI4bv
#define glVertexAttribI4bvEXT onutVertexAttribI4bvEXT
#define glVertexAttribI4i onutVertexAttribI4i
#define glVertexAttribI4iEXT onutVertexAttribI4iEXT
#define glVertexAttribI4iv onutVertexAttribI4iv
#define glVertexAttribI4ivEXT onutVertexAttribI4ivEXT
#define glVertexAttribI4sv onutVertexAttribI4sv
#define glVertexAttribI4svEXT onutVertexAttribI4svEXT
#define glVertexAttribI4ubv onutVertexAttribI4ubv
#define glVertexAttribI4ubvEXT onutVertexAttribI4ubvEXT
#define glVertexAttribI4ui onutVertexAttribI4ui
#define glVertexAttribI4uiEXT onutVertexAttribI4uiEXT
#define glVertexAttribI4uiv onutVertexAttribI4uiv
#define glVertexAttribI4uivEXT onutVertexAttribI4uivEXT
#define glVertexAttribI4usv onutVertexAttribI4usv
#define glVertexAttribI4usvEXT onutVertexAttribI4usvEXT
#define glVertexAttribIFormat onutVertexAttribIFormat
#define glVertexAttribIFormatNV onutVertexAttribIFormatNV
#define glVertexAttribIPointer onutVertexAttribIPointer
#define glVertexAttribIPointerEXT onutVertexAttribIPointerEXT
#define glVertexAttribL1d onutVertexAttribL1d
#define glVertexAttribL1dEXT onutVertexAttribL1dEXT
#define glVertexAttribL1dv onutVertexAttribL1dv
#define glVertexAttribL1dvEXT onutVertexAttribL1dvEXT
#define glVertexAttribL1i64NV onutVertexAttribL1i64NV
#define glVertexAttribL1i64vNV onutVertexAttribL1i64vNV
#define glVertexAttribL1ui64ARB onutVertexAttribL1ui64ARB
#define glVertexAttribL1ui64NV onutVertexAttribL1ui64NV
#define glVertexAttribL1ui64vARB onutVertexAttribL1ui64vARB
#define glVertexAttribL1ui64vNV onutVertexAttribL1ui64vNV
#define glVertexAttribL2d onutVertexAttribL2d
#define glVertexAttribL2dEXT onutVertexAttribL2dEXT
#define glVertexAttribL2dv onutVertexAttribL2dv
#define glVertexAttribL2dvEXT onutVertexAttribL2dvEXT
#define glVertexAttribL2i64NV onutVertexAttribL2i64NV
#define glVertexAttribL2i64vNV onutVertexAttribL2i64vNV
#define glVertexAttribL2ui64NV onutVertexAttribL2ui64NV
#define glVertexAttribL2ui64vNV onutVertexAttribL2ui64vNV
#define glVertexAttribL3d onutVertexAttribL3d
#define glVertexAttribL3dEXT onutVertexAttribL3dEXT
#define glVertexAttribL3dv onutVertexAttribL3dv
#define glVertexAttribL3dvEXT onutVertexAttribL3dvEXT
#define glVertexAttribL3i64NV onutVertexAttribL3i64NV
#define glVertexAttribL3i64vNV onutVertexAttribL3i64vNV
#define glVertexAttribL3ui64NV onutVertexAttribL3ui64NV
#define glVertexAttribL3ui64vNV onutVertexAttribL3ui64vNV
#define glVertexAttribL4d onutVertexAttribL4d
#define glVertexAttribL4dEXT onutVertexAttribL4dEXT
#define glVertexAttribL4dv onutVertexAttribL4dv
#define glVertexAttribL4dvEXT onutVertexAttribL4dvEXT
#define glVertexAttribL4i64NV onutVertexAttribL4i64NV
#define glVertexAttribL4i64vNV onutVertexAttribL4i64vNV
#define glVertexAttribL4ui64NV onutVertexAttribL4ui64NV
#define glVertexAttribL4ui64vNV onutVertexAttribL4ui64vNV
#define glVertexAttribLFormat onutVertexAttribLFormat
#define glVertexAttribLFormatNV onutVertexAttribLFormatNV
#define glVertexAttribLPointer onutVertexAttribLPointer
#define glVertexAttribLPointerEXT onutVertexAttribLPointerEXT
#define glVertexAttribP1ui onutVertexAttribP1ui
#define glVertexAttribP1uiv onutVertexAttribP1uiv
#define glVertexAttribP2ui onutVertexAttribP2ui
#define glVertexAttribP2uiv onutVertexAttribP2uiv
#define glVertexAttribP3ui onutVertexAttribP3ui
#define glVertexAttribP3uiv onutVertexAttribP3uiv
#define glVertexAttribP4ui onutVertexAttribP4ui
#define glVertexAttribP4uiv onutVertexAttribP4uiv
#define glVertexAttribParameteriAMD onutVertexAttribParameteriAMD
#define glVertexAttribPointer onutVertexAttribPointer
#define glVertexAttribPointerARB onutVertexAttribPointerARB
#define glVertexAttribPointerNV onutVertexAttribPointerNV
#define glVertexAttribs1dvNV onutVertexAttribs1dvNV
#define glVertexAttribs1fvNV onutVertexAttribs1fvNV
#define glVertexAttribs1hvNV onutVertexAttribs1hvNV
#define glVertexAttribs1svNV onutVertexAttribs1svNV
#define glVertexAttribs2dvNV onutVertexAttribs2dvNV
#define glVertexAttribs2fvNV onutVertexAttribs2fvNV
#define glVertexAttribs2hvNV onutVertexAttribs2hvNV
#define glVertexAttribs2svNV onutVertexAttribs2svNV
#define glVertexAttribs3dvNV onutVertexAttribs3dvNV
#define glVertexAttribs3fvNV onutVertexAttribs3fvNV
#define glVertexAttribs3hvNV onutVertexAttribs3hvNV
#define glVertexAttribs3svNV onutVertexAttribs3svNV
#define glVertexAttribs4dvNV onutVertexAttribs4dvNV
#define glVertexAttribs4fvNV onutVertexAttribs4fvNV
#define glVertexAttribs4hvNV onutVertexAttribs4hvNV
#define glVertexAttribs4svNV onutVertexAttribs4svNV
#define glVertexAttribs4ubvNV onutVertexAttribs4ubvNV
#define glVertexBindingDivisor onutVertexBindingDivisor
#define glVertexBlendARB onutVertexBlendARB
#define glVertexBlendEnvfATI onutVertexBlendEnvfATI
#define glVertexBlendEnviATI onutVertexBlendEnviATI
#define glVertexFormatNV onutVertexFormatNV
#define glVertexP2ui onutVertexP2ui
#define glVertexP2uiv onutVertexP2uiv
#define glVertexP3ui onutVertexP3ui
#define glVertexP3uiv onutVertexP3uiv
#define glVertexP4ui onutVertexP4ui
#define glVertexP4uiv onutVertexP4uiv
#define glVertexPointer onutVertexPointer
#define glVertexPointerEXT onutVertexPointerEXT
#define glVertexPointerListIBM onutVertexPointerListIBM
#define glVertexPointervINTEL onutVertexPointervINTEL
#define glVertexStream1dATI onutVertexStream1dATI
#define glVertexStream1dvATI onutVertexStream1dvATI
#define glVertexStream1fATI onutVertexStream1fATI
#define glVertexStream1fvATI onutVertexStream1fvATI
#define glVertexStream1iATI onutVertexStream1iATI
#define glVertexStream1ivATI onutVertexStream1ivATI
#define glVertexStream1sATI onutVertexStream1sATI
#define glVertexStream1svATI onutVertexStream1svATI
#define glVertexStream2dATI onutVertexStream2dATI
#define glVertexStream2dvATI onutVertexStream2dvATI
#define glVertexStream2fATI onutVertexStream2fATI
#define glVertexStream2fvATI onutVertexStream2fvATI
#define glVertexStream2iATI onutVertexStream2iATI
#define glVertexStream2ivATI onutVertexStream2ivATI
#define glVertexStream2sATI onutVertexStream2sATI
#define glVertexStream2svATI onutVertexStream2svATI
#define glVertexStream3dATI onutVertexStream3dATI
#define glVertexStream3dvATI onutVertexStream3dvATI
#define glVertexStream3fATI onutVertexStream3fATI
#define glVertexStream3fvATI onutVertexStream3fvATI
#define glVertexStream3iATI onutVertexStream3iATI
#define glVertexStream3ivATI onutVertexStream3ivATI
#define glVertexStream3sATI onutVertexStream3sATI
#define glVertexStream3svATI onutVertexStream3svATI
#define glVertexStream4dATI onutVertexStream4dATI
#define glVertexStream4dvATI onutVertexStream4dvATI
#define glVertexStream4fATI onutVertexStream4fATI
#define glVertexStream4fvATI onutVertexStream4fvATI
#define glVertexStream4iATI onutVertexStream4iATI
#define glVertexStream4ivATI onutVertexStream4ivATI
#define glVertexStream4sATI onutVertexStream4sATI
#define glVertexStream4svATI onutVertexStream4svATI
#define glVertexWeightPointerEXT onutVertexWeightPointerEXT
#define glVertexWeightfEXT onutVertexWeightfEXT
#define glVertexWeightfvEXT onutVertexWeightfvEXT
#define glVertexWeighthNV onutVertexWeighthNV
#define glVertexWeighthvNV onutVertexWeighthvNV
#define glVideoCaptureNV onutVideoCaptureNV
#define glVideoCaptureStreamParameterdvNV onutVideoCaptureStreamParameterdvNV
#define glVideoCaptureStreamParameterfvNV onutVideoCaptureStreamParameterfvNV
#define glVideoCaptureStreamParameterivNV onutVideoCaptureStreamParameterivNV
#define glViewport onutViewport
#define glViewportArrayv onutViewportArrayv
#define glViewportArrayvNV onutViewportArrayvNV
#define glViewportArrayvOES onutViewportArrayvOES
#define glViewportIndexedf onutViewportIndexedf
#define glViewportIndexedfNV onutViewportIndexedfNV
#define glViewportIndexedfOES onutViewportIndexedfOES
#define glViewportIndexedfv onutViewportIndexedfv
#define glViewportIndexedfvNV onutViewportIndexedfvNV
#define glViewportIndexedfvOES onutViewportIndexedfvOES
#define glViewportPositionWScaleNV onutViewportPositionWScaleNV
#define glViewportSwizzleNV onutViewportSwizzleNV
#define glWaitSemaphoreEXT onutWaitSemaphoreEXT
#define glWaitSync onutWaitSync
#define glWaitSyncAPPLE onutWaitSyncAPPLE
#define glWaitVkSemaphoreNV onutWaitVkSemaphoreNV
#define glWeightPathsNV onutWeightPathsNV
#define glWeightPointerARB onutWeightPointerARB
#define glWeightPointerOES onutWeightPointerOES
#define glWeightbvARB onutWeightbvARB
#define glWeightdvARB onutWeightdvARB
#define glWeightfvARB onutWeightfvARB
#define glWeightivARB onutWeightivARB
#define glWeightsvARB onutWeightsvARB
#define glWeightubvARB onutWeightubvARB
#define glWeightuivARB onutWeightuivARB
#define glWeightusvARB onutWeightusvARB
#define glWindowPos2d onutWindowPos2d
#define glWindowPos2dARB onutWindowPos2dARB
#define glWindowPos2dMESA onutWindowPos2dMESA
#define glWindowPos2dv onutWindowPos2dv
#define glWindowPos2dvARB onutWindowPos2dvARB
#define glWindowPos2dvMESA onutWindowPos2dvMESA
#define glWindowPos2f onutWindowPos2f
#define glWindowPos2fARB onutWindowPos2fARB
#define glWindowPos2fMESA onutWindowPos2fMESA
#define glWindowPos2fv onutWindowPos2fv
#define glWindowPos2fvARB onutWindowPos2fvARB
#define glWindowPos2fvMESA onutWindowPos2fvMESA
#define glWindowPos2i onutWindowPos2i
#define glWindowPos2iARB onutWindowPos2iARB
#define glWindowPos2iMESA onutWindowPos2iMESA
#define glWindowPos2iv onutWindowPos2iv
#define glWindowPos2ivARB onutWindowPos2ivARB
#define glWindowPos2ivMESA onutWindowPos2ivMESA
#define glWindowPos2s onutWindowPos2s
#define glWindowPos2sARB onutWindowPos2sARB
#define glWindowPos2sMESA onutWindowPos2sMESA
#define glWindowPos2sv onutWindowPos2sv
#define glWindowPos2svARB onutWindowPos2svARB
#define glWindowPos2svMESA onutWindowPos2svMESA
#define glWindowPos3d onutWindowPos3d
#define glWindowPos3dARB onutWindowPos3dARB
#define glWindowPos3dMESA onutWindowPos3dMESA
#define glWindowPos3dv onutWindowPos3dv
#define glWindowPos3dvARB onutWindowPos3dvARB
#define glWindowPos3dvMESA onutWindowPos3dvMESA
#define glWindowPos3f onutWindowPos3f
#define glWindowPos3fARB onutWindowPos3fARB
#define glWindowPos3fMESA onutWindowPos3fMESA
#define glWindowPos3fv onutWindowPos3fv
#define glWindowPos3fvARB onutWindowPos3fvARB
#define glWindowPos3fvMESA onutWindowPos3fvMESA
#define glWindowPos3i onutWindowPos3i
#define glWindowPos3iARB onutWindowPos3iARB
#define glWindowPos3iMESA onutWindowPos3iMESA
#define glWindowPos3iv onutWindowPos3iv
#define glWindowPos3ivARB onutWindowPos3ivARB
#define glWindowPos3ivMESA onutWindowPos3ivMESA
#define glWindowPos3s onutWindowPos3s
#define glWindowPos3sARB onutWindowPos3sARB
#define glWindowPos3sMESA onutWindowPos3sMESA
#define glWindowPos3sv onutWindowPos3sv
#define glWindowPos3svARB onutWindowPos3svARB
#define glWindowPos3svMESA onutWindowPos3svMESA
#define glWindowPos4dMESA onutWindowPos4dMESA
#define glWindowPos4dvMESA onutWindowPos4dvMESA
#define glWindowPos4fMESA onutWindowPos4fMESA
#define glWindowPos4fvMESA onutWindowPos4fvMESA
#define glWindowPos4iMESA onutWindowPos4iMESA
#define glWindowPos4ivMESA onutWindowPos4ivMESA
#define glWindowPos4sMESA onutWindowPos4sMESA
#define glWindowPos4svMESA onutWindowPos4svMESA
#define glWindowRectanglesEXT onutWindowRectanglesEXT
#define glWriteMaskEXT onutWriteMaskEXT


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* _ONUT_GL_H_ */
